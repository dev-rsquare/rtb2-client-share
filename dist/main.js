var Ns = (e, o, n) => {
  if (!o.has(e))
    throw TypeError("Cannot " + n);
};
var J = (e, o, n) => (Ns(e, o, "read from private field"), n ? n.call(e) : o.get(e)), We = (e, o, n) => {
  if (o.has(e))
    throw TypeError("Cannot add the same private member more than once");
  o instanceof WeakSet ? o.add(e) : o.set(e, n);
}, Be = (e, o, n, r) => (Ns(e, o, "write to private field"), r ? r.call(e, n) : o.set(e, n), n);
var Or = (e, o, n, r) => ({
  set _(s) {
    Be(e, o, s, n);
  },
  get _() {
    return J(e, o, r);
  }
}), Ct = (e, o, n) => (Ns(e, o, "access private method"), n);
import { jsx as x, jsxs as Ce } from "react/jsx-runtime";
import { Column as TB } from "./components/Column/index.js";
import { Row as $B } from "./components/Row/index.js";
import { u as ac, G as tf, P as t, i as of, _ as z, s as nf, b as u, f as cs, h as k, a as rf, j as sf, k as af, g as ee, e as us, l as er, r as on, m as lf, n as ds, o as cf, p as ri, C as uf, q as df, t as Pe, v as go, w as pf, x as Ko, T as ff, y as ic, z as Gr, A as sn, B as ps, D as fs, E as si, F as mf, c as bf, H as gf } from "./createTheme-3a6629d7.js";
import { S as RB, I as wB, J as EB, L as PB, K as NB } from "./createTheme-3a6629d7.js";
import * as f from "react";
import uo, { Children as hf, isValidElement as Vr, cloneElement as Ur, createElement as lc } from "react";
import { R as $r, r as Qs, c as vf } from "./client-42d26036.js";
import { g as cc, a as uc, u as ms, s as P, b as oe, c as rt, d as ai, e as dr, f as ii, l as li, r as yf, h as Cf, i as dt, j as dc, k as pr, m as xf, t as Tf, n as Wn, T as Of } from "./styles-c4f708d6.js";
import { N as kB, p as MB, D as BB, x as LB, B as DB, I as AB, o as FB, z as jB, M as _B, A as zB, q as VB, w as UB, F as WB, K as HB, y as qB, E as GB, v as KB, J as YB, C as XB, L as QB, G as ZB, H as JB } from "./styles-c4f708d6.js";
import { c as D, g as ne } from "./Box-02053ebc.js";
import { B as tL, b as oL } from "./Box-02053ebc.js";
import { b as $f, c as Sf, a as Rf, g as wf, l as Ef, o as Pf, p as Nf, r as If } from "./grey-c051ab9f.js";
import { amber as kf, blueGrey as Mf, brown as Bf, cyan as Lf, deepOrange as Df, deepPurple as Af, indigo as Ff, lightGreen as jf, lime as _f, pink as zf, teal as Vf, yellow as Uf } from "./colors.js";
const VI = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  amber: kf,
  blue: $f,
  blueGrey: Mf,
  brown: Bf,
  common: Sf,
  cyan: Lf,
  deepOrange: Df,
  deepPurple: Af,
  green: Rf,
  grey: wf,
  indigo: Ff,
  lightBlue: Ef,
  lightGreen: jf,
  lime: _f,
  orange: Pf,
  pink: zf,
  purple: Nf,
  red: If,
  teal: Vf,
  yellow: Uf
}, Symbol.toStringTag, { value: "Module" }));
function pc({
  styles: e,
  themeId: o,
  defaultTheme: n = {}
}) {
  const r = ac(n), s = typeof e == "function" ? e(o && r[o] || r) : e;
  return /* @__PURE__ */ x(tf, {
    styles: s
  });
}
process.env.NODE_ENV !== "production" && (pc.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  defaultTheme: t.object,
  /**
   * @ignore
   */
  styles: t.oneOfType([t.array, t.func, t.number, t.object, t.string, t.bool]),
  /**
   * @ignore
   */
  themeId: t.string
});
const Wf = ["ownerState"], Hf = ["variants"], qf = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
function Gf(e) {
  return Object.keys(e).length === 0;
}
function Kf(e) {
  return typeof e == "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  e.charCodeAt(0) > 96;
}
function Is(e) {
  return e !== "ownerState" && e !== "theme" && e !== "sx" && e !== "as";
}
const Yf = cs(), ci = (e) => e && e.charAt(0).toLowerCase() + e.slice(1);
function Sr({
  defaultTheme: e,
  theme: o,
  themeId: n
}) {
  return Gf(o) ? e : o[n] || o;
}
function Xf(e) {
  return e ? (o, n) => n[e] : null;
}
function Wr(e, o) {
  let {
    ownerState: n
  } = o, r = z(o, Wf);
  const s = typeof e == "function" ? e(u({
    ownerState: n
  }, r)) : e;
  if (Array.isArray(s))
    return s.flatMap((a) => Wr(a, u({
      ownerState: n
    }, r)));
  if (s && typeof s == "object" && Array.isArray(s.variants)) {
    const {
      variants: a = []
    } = s;
    let l = z(s, Hf);
    return a.forEach((c) => {
      let d = !0;
      typeof c.props == "function" ? d = c.props(u({
        ownerState: n
      }, r, n)) : Object.keys(c.props).forEach((p) => {
        (n == null ? void 0 : n[p]) !== c.props[p] && r[p] !== c.props[p] && (d = !1);
      }), d && (Array.isArray(l) || (l = [l]), l.push(typeof c.style == "function" ? c.style(u({
        ownerState: n
      }, r, n)) : c.style));
    }), l;
  }
  return s;
}
function Qf(e = {}) {
  const {
    themeId: o,
    defaultTheme: n = Yf,
    rootShouldForwardProp: r = Is,
    slotShouldForwardProp: s = Is
  } = e, a = (i) => rf(u({}, i, {
    theme: Sr(u({}, i, {
      defaultTheme: n,
      themeId: o
    }))
  }));
  return a.__mui_systemSx = !0, (i, l = {}) => {
    of(i, (S) => S.filter((R) => !(R != null && R.__mui_systemSx)));
    const {
      name: c,
      slot: d,
      skipVariantsResolver: p,
      skipSx: m,
      // TODO v6: remove `lowercaseFirstLetter()` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      overridesResolver: b = Xf(ci(d))
    } = l, h = z(l, qf), v = p !== void 0 ? p : (
      // TODO v6: remove `Root` in the next major release
      // For more details: https://github.com/mui/material-ui/pull/37908
      d && d !== "Root" && d !== "root" || !1
    ), C = m || !1;
    let g;
    process.env.NODE_ENV !== "production" && c && (g = `${c}-${ci(d || "Root")}`);
    let y = Is;
    d === "Root" || d === "root" ? y = r : d ? y = s : Kf(i) && (y = void 0);
    const $ = nf(i, u({
      shouldForwardProp: y,
      label: g
    }, h)), T = (S) => typeof S == "function" && S.__emotion_real !== S || sf(S) ? (R) => Wr(S, u({}, R, {
      theme: Sr({
        theme: R.theme,
        defaultTheme: n,
        themeId: o
      })
    })) : S, O = (S, ...R) => {
      let w = T(S);
      const E = R ? R.map(T) : [];
      c && b && E.push((I) => {
        const F = Sr(u({}, I, {
          defaultTheme: n,
          themeId: o
        }));
        if (!F.components || !F.components[c] || !F.components[c].styleOverrides)
          return null;
        const A = F.components[c].styleOverrides, B = {};
        return Object.entries(A).forEach(([j, V]) => {
          B[j] = Wr(V, u({}, I, {
            theme: F
          }));
        }), b(I, B);
      }), c && !v && E.push((I) => {
        var F;
        const A = Sr(u({}, I, {
          defaultTheme: n,
          themeId: o
        })), B = A == null || (F = A.components) == null || (F = F[c]) == null ? void 0 : F.variants;
        return Wr({
          variants: B
        }, u({}, I, {
          theme: A
        }));
      }), C || E.push(a);
      const N = E.length - R.length;
      if (Array.isArray(S) && N > 0) {
        const I = new Array(N).fill("");
        w = [...S, ...I], w.raw = [...S.raw, ...I];
      }
      const M = $(w, ...E);
      if (process.env.NODE_ENV !== "production") {
        let I;
        c && (I = `${c}${k(d || "")}`), I === void 0 && (I = `Styled(${cc(i)})`), M.displayName = I;
      }
      return i.muiName && (M.muiName = i.muiName), M;
    };
    return $.withConfig && (O.withConfig = $.withConfig), O;
  };
}
const Zf = Qf(), ba = Zf, Jf = typeof window < "u" ? f.useLayoutEffect : f.useEffect, bt = Jf;
function em(e, o, n, r, s) {
  const [a, i] = f.useState(() => s && n ? n(e).matches : r ? r(e).matches : o);
  return bt(() => {
    let l = !0;
    if (!n)
      return;
    const c = n(e), d = () => {
      l && i(c.matches);
    };
    return d(), c.addListener(d), () => {
      l = !1, c.removeListener(d);
    };
  }, [e, n]), a;
}
const fc = f["useSyncExternalStore"];
function tm(e, o, n, r, s) {
  const a = f.useCallback(() => o, [o]), i = f.useMemo(() => {
    if (s && n)
      return () => n(e).matches;
    if (r !== null) {
      const {
        matches: p
      } = r(e);
      return () => p;
    }
    return a;
  }, [a, e, r, s, n]), [l, c] = f.useMemo(() => {
    if (n === null)
      return [a, () => () => {
      }];
    const p = n(e);
    return [() => p.matches, (m) => (p.addListener(m), () => {
      p.removeListener(m);
    })];
  }, [a, n, e]);
  return fc(c, l, i);
}
function om(e, o = {}) {
  const n = af(), r = typeof window < "u" && typeof window.matchMedia < "u", {
    defaultMatches: s = !1,
    matchMedia: a = r ? window.matchMedia : null,
    ssrMatchMedia: i = null,
    noSsr: l = !1
  } = uc({
    name: "MuiUseMediaQuery",
    props: o,
    theme: n
  });
  process.env.NODE_ENV !== "production" && typeof e == "function" && n === null && console.error(["MUI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join(`
`));
  let c = typeof e == "function" ? e(n) : e;
  c = c.replace(/^@media( ?)/m, "");
  const p = (fc !== void 0 ? tm : em)(c, s, a, i, l);
  return process.env.NODE_ENV !== "production" && f.useDebugValue({
    query: c,
    match: p
  }), p;
}
function ut(e, o) {
  return process.env.NODE_ENV === "production" ? () => null : function(...r) {
    return e(...r) || o(...r);
  };
}
function nm(e) {
  const {
    prototype: o = {}
  } = e;
  return !!o.isReactComponent;
}
function mc(e, o, n, r, s) {
  const a = e[o], i = s || o;
  if (a == null || // When server-side rendering React doesn't warn either.
  // This is not an accurate check for SSR.
  // This is only in place for Emotion compat.
  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
  typeof window > "u")
    return null;
  let l;
  const c = a.type;
  return typeof c == "function" && !nm(c) && (l = "Did you accidentally use a plain function component for an element instead?"), l !== void 0 ? new Error(`Invalid ${r} \`${i}\` supplied to \`${n}\`. Expected an element that can hold a ref. ${l} For more information see https://mui.com/r/caveat-with-refs-guide`) : null;
}
const bc = ut(t.element, mc);
bc.isRequired = ut(t.element.isRequired, mc);
const _o = bc;
function rm(e) {
  const {
    prototype: o = {}
  } = e;
  return !!o.isReactComponent;
}
function sm(e, o, n, r, s) {
  const a = e[o], i = s || o;
  if (a == null || // When server-side rendering React doesn't warn either.
  // This is not an accurate check for SSR.
  // This is only in place for emotion compat.
  // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
  typeof window > "u")
    return null;
  let l;
  return typeof a == "function" && !rm(a) && (l = "Did you accidentally provide a plain function component instead?"), l !== void 0 ? new Error(`Invalid ${r} \`${i}\` supplied to \`${n}\`. Expected an element type that can hold a ref. ${l} For more information see https://mui.com/r/caveat-with-refs-guide`) : null;
}
const jo = ut(t.elementType, sm);
function fo(e, o, n, r, s) {
  if (process.env.NODE_ENV === "production")
    return null;
  const a = e[o], i = s || o;
  return a == null ? null : a && a.nodeType !== 1 ? new Error(`Invalid ${r} \`${i}\` supplied to \`${n}\`. Expected an HTMLElement.`) : null;
}
const am = t.oneOfType([t.func, t.object]), yt = am;
function Zs(...e) {
  return e.reduce((o, n) => n == null ? o : function(...s) {
    o.apply(this, s), n.apply(this, s);
  }, () => {
  });
}
function fr(e, o = 166) {
  let n;
  function r(...s) {
    const a = () => {
      e.apply(this, s);
    };
    clearTimeout(n), n = setTimeout(a, o);
  }
  return r.clear = () => {
    clearTimeout(n);
  }, r;
}
function UI(e, o) {
  return process.env.NODE_ENV === "production" ? () => null : (n, r, s, a, i) => {
    const l = s || "<<anonymous>>", c = i || r;
    return typeof n[r] < "u" ? new Error(`The ${a} \`${c}\` of \`${l}\` is deprecated. ${o}`) : null;
  };
}
function Co(e, o) {
  var n, r;
  return /* @__PURE__ */ f.isValidElement(e) && o.indexOf(
    // For server components `muiName` is avaialble in element.type._payload.value.muiName
    // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
    // eslint-disable-next-line no-underscore-dangle
    (n = e.type.muiName) != null ? n : (r = e.type) == null || (r = r._payload) == null || (r = r.value) == null ? void 0 : r.muiName
  ) !== -1;
}
function Xe(e) {
  return e && e.ownerDocument || document;
}
function Rt(e) {
  return Xe(e).defaultView || window;
}
function im(e, o) {
  if (process.env.NODE_ENV === "production")
    return () => null;
  const n = o ? u({}, o.propTypes) : null;
  return (s) => (a, i, l, c, d, ...p) => {
    const m = d || i, b = n == null ? void 0 : n[m];
    if (b) {
      const h = b(a, i, l, c, d, ...p);
      if (h)
        return h;
    }
    return typeof a[i] < "u" && !a[s] ? new Error(`The prop \`${m}\` of \`${e}\` can only be used together with the \`${s}\` prop.`) : null;
  };
}
function Kr(e, o) {
  typeof e == "function" ? e(o) : e && (e.current = o);
}
let ui = 0;
function lm(e) {
  const [o, n] = f.useState(e), r = e || o;
  return f.useEffect(() => {
    o == null && (ui += 1, n(`mui-${ui}`));
  }, [o]), r;
}
const di = f["useId".toString()];
function mo(e) {
  if (di !== void 0) {
    const o = di();
    return e ?? o;
  }
  return lm(e);
}
function ga(e, o, n, r, s) {
  if (process.env.NODE_ENV === "production")
    return null;
  const a = s || o;
  return typeof e[o] < "u" ? new Error(`The prop \`${a}\` is not supported. Please remove it.`) : null;
}
function Dt({
  controlled: e,
  default: o,
  name: n,
  state: r = "value"
}) {
  const {
    current: s
  } = f.useRef(e !== void 0), [a, i] = f.useState(o), l = s ? e : a;
  if (process.env.NODE_ENV !== "production") {
    f.useEffect(() => {
      s !== (e !== void 0) && console.error([`MUI: A component is changing the ${s ? "" : "un"}controlled ${r} state of ${n} to be ${s ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${n} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join(`
`));
    }, [r, n, e]);
    const {
      current: d
    } = f.useRef(o);
    f.useEffect(() => {
      !s && d !== o && console.error([`MUI: A component is changing the default ${r} state of an uncontrolled ${n} after being initialized. To suppress this warning opt to use a controlled ${n}.`].join(`
`));
    }, [JSON.stringify(o)]);
  }
  const c = f.useCallback((d) => {
    s || i(d);
  }, []);
  return [l, c];
}
function nt(e) {
  const o = f.useRef(e);
  return bt(() => {
    o.current = e;
  }), f.useRef((...n) => (
    // @ts-expect-error hide `this`
    (0, o.current)(...n)
  )).current;
}
function Ve(...e) {
  return f.useMemo(() => e.every((o) => o == null) ? null : (o) => {
    e.forEach((n) => {
      Kr(n, o);
    });
  }, e);
}
const pi = {};
function cm(e, o) {
  const n = f.useRef(pi);
  return n.current === pi && (n.current = e(o)), n;
}
const um = [];
function dm(e) {
  f.useEffect(e, um);
}
class mr {
  constructor() {
    this.currentId = 0, this.clear = () => {
      this.currentId !== 0 && (clearTimeout(this.currentId), this.currentId = 0);
    }, this.disposeEffect = () => this.clear;
  }
  static create() {
    return new mr();
  }
  /**
   * Executes `fn` after `delay`, clearing any previously scheduled call.
   */
  start(o, n) {
    this.clear(), this.currentId = setTimeout(() => {
      this.currentId = 0, n();
    }, o);
  }
}
function yo() {
  const e = cm(mr.create).current;
  return dm(e.disposeEffect), e;
}
let bs = !0, Js = !1;
const pm = new mr(), fm = {
  text: !0,
  search: !0,
  url: !0,
  tel: !0,
  email: !0,
  password: !0,
  number: !0,
  date: !0,
  month: !0,
  week: !0,
  time: !0,
  datetime: !0,
  "datetime-local": !0
};
function mm(e) {
  const {
    type: o,
    tagName: n
  } = e;
  return !!(n === "INPUT" && fm[o] && !e.readOnly || n === "TEXTAREA" && !e.readOnly || e.isContentEditable);
}
function bm(e) {
  e.metaKey || e.altKey || e.ctrlKey || (bs = !0);
}
function ks() {
  bs = !1;
}
function gm() {
  this.visibilityState === "hidden" && Js && (bs = !0);
}
function hm(e) {
  e.addEventListener("keydown", bm, !0), e.addEventListener("mousedown", ks, !0), e.addEventListener("pointerdown", ks, !0), e.addEventListener("touchstart", ks, !0), e.addEventListener("visibilitychange", gm, !0);
}
function vm(e) {
  const {
    target: o
  } = e;
  try {
    return o.matches(":focus-visible");
  } catch {
  }
  return bs || mm(o);
}
function br() {
  const e = f.useCallback((s) => {
    s != null && hm(s.ownerDocument);
  }, []), o = f.useRef(!1);
  function n() {
    return o.current ? (Js = !0, pm.start(100, () => {
      Js = !1;
    }), o.current = !1, !0) : !1;
  }
  function r(s) {
    return vm(s) ? (o.current = !0, !0) : !1;
  }
  return {
    isFocusVisibleRef: o,
    onFocus: r,
    onBlur: n,
    ref: e
  };
}
function gc(e) {
  const o = e.documentElement.clientWidth;
  return Math.abs(window.innerWidth - o);
}
let ln;
function hc() {
  if (ln)
    return ln;
  const e = document.createElement("div"), o = document.createElement("div");
  return o.style.width = "10px", o.style.height = "1px", e.appendChild(o), e.dir = "rtl", e.style.fontSize = "14px", e.style.width = "4px", e.style.height = "1px", e.style.position = "absolute", e.style.top = "-1000px", e.style.overflow = "scroll", document.body.appendChild(e), ln = "reverse", e.scrollLeft > 0 ? ln = "default" : (e.scrollLeft = 1, e.scrollLeft === 0 && (ln = "negative")), document.body.removeChild(e), ln;
}
function ym(e, o) {
  const n = e.scrollLeft;
  if (o !== "rtl")
    return n;
  switch (hc()) {
    case "negative":
      return e.scrollWidth - e.clientWidth + n;
    case "reverse":
      return e.scrollWidth - e.clientWidth - n;
    default:
      return n;
  }
}
const Cm = (e) => {
  const o = f.useRef({});
  return f.useEffect(() => {
    o.current = e;
  }), o.current;
}, ha = Cm;
function vc(e) {
  return f.Children.toArray(e).filter((o) => /* @__PURE__ */ f.isValidElement(o));
}
const xm = {
  border: 0,
  clip: "rect(0 0 0 0)",
  height: "1px",
  margin: -1,
  overflow: "hidden",
  padding: 0,
  position: "absolute",
  whiteSpace: "nowrap",
  width: "1px"
}, yc = xm;
function Tm(e) {
  const o = typeof e;
  switch (o) {
    case "number":
      return Number.isNaN(e) ? "NaN" : Number.isFinite(e) ? e !== Math.floor(e) ? "float" : "number" : "Infinity";
    case "object":
      return e === null ? "null" : e.constructor.name;
    default:
      return o;
  }
}
function Om(e) {
  return typeof e == "number" && isFinite(e) && Math.floor(e) === e;
}
const $m = Number.isInteger || Om;
function Cc(e, o, n, r) {
  const s = e[o];
  if (s == null || !$m(s)) {
    const a = Tm(s);
    return new RangeError(`Invalid ${r} \`${o}\` of type \`${a}\` supplied to \`${n}\`, expected \`integer\`.`);
  }
  return null;
}
function xc(e, o, ...n) {
  return e[o] === void 0 ? null : Cc(e, o, ...n);
}
function ea() {
  return null;
}
xc.isRequired = Cc;
ea.isRequired = ea;
const lt = process.env.NODE_ENV === "production" ? ea : xc;
function te(e, o, n = void 0) {
  const r = {};
  return Object.keys(e).forEach(
    // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
    // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
    (s) => {
      r[s] = e[s].reduce((a, i) => {
        if (i) {
          const l = o(i);
          l !== "" && a.push(l), n && n[i] && a.push(n[i]);
        }
        return a;
      }, []).join(" ");
    }
  ), r;
}
const Sm = ["className", "component", "disableGutters", "fixed", "maxWidth", "classes"], Rm = cs(), wm = ba("div", {
  name: "MuiContainer",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`maxWidth${k(String(n.maxWidth))}`], n.fixed && o.fixed, n.disableGutters && o.disableGutters];
  }
}), Em = (e) => ms({
  props: e,
  name: "MuiContainer",
  defaultTheme: Rm
}), Pm = (e, o) => {
  const n = (c) => ee(o, c), {
    classes: r,
    fixed: s,
    disableGutters: a,
    maxWidth: i
  } = e, l = {
    root: ["root", i && `maxWidth${k(String(i))}`, s && "fixed", a && "disableGutters"]
  };
  return te(l, n, r);
};
function Nm(e = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent: o = wm,
    useThemeProps: n = Em,
    componentName: r = "MuiContainer"
  } = e, s = o(({
    theme: i,
    ownerState: l
  }) => u({
    width: "100%",
    marginLeft: "auto",
    boxSizing: "border-box",
    marginRight: "auto",
    display: "block"
  }, !l.disableGutters && {
    paddingLeft: i.spacing(2),
    paddingRight: i.spacing(2),
    // @ts-ignore module augmentation fails if custom breakpoints are used
    [i.breakpoints.up("sm")]: {
      paddingLeft: i.spacing(3),
      paddingRight: i.spacing(3)
    }
  }), ({
    theme: i,
    ownerState: l
  }) => l.fixed && Object.keys(i.breakpoints.values).reduce((c, d) => {
    const p = d, m = i.breakpoints.values[p];
    return m !== 0 && (c[i.breakpoints.up(p)] = {
      maxWidth: `${m}${i.breakpoints.unit}`
    }), c;
  }, {}), ({
    theme: i,
    ownerState: l
  }) => u({}, l.maxWidth === "xs" && {
    // @ts-ignore module augmentation fails if custom breakpoints are used
    [i.breakpoints.up("xs")]: {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      maxWidth: Math.max(i.breakpoints.values.xs, 444)
    }
  }, l.maxWidth && // @ts-ignore module augmentation fails if custom breakpoints are used
  l.maxWidth !== "xs" && {
    // @ts-ignore module augmentation fails if custom breakpoints are used
    [i.breakpoints.up(l.maxWidth)]: {
      // @ts-ignore module augmentation fails if custom breakpoints are used
      maxWidth: `${i.breakpoints.values[l.maxWidth]}${i.breakpoints.unit}`
    }
  })), a = /* @__PURE__ */ f.forwardRef(function(l, c) {
    const d = n(l), {
      className: p,
      component: m = "div",
      disableGutters: b = !1,
      fixed: h = !1,
      maxWidth: v = "lg"
    } = d, C = z(d, Sm), g = u({}, d, {
      component: m,
      disableGutters: b,
      fixed: h,
      maxWidth: v
    }), y = Pm(g, r);
    return (
      // @ts-ignore theme is injected by the styled util
      /* @__PURE__ */ x(s, u({
        as: m,
        ownerState: g,
        className: D(y.root, p),
        ref: c
      }, C))
    );
  });
  return process.env.NODE_ENV !== "production" && (a.propTypes = {
    children: t.node,
    classes: t.object,
    className: t.string,
    component: t.elementType,
    disableGutters: t.bool,
    fixed: t.bool,
    maxWidth: t.oneOfType([t.oneOf(["xs", "sm", "md", "lg", "xl", !1]), t.string]),
    sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
  }), a;
}
const Im = (e, o) => e.filter((n) => o.includes(n)), In = (e, o, n) => {
  const r = e.keys[0];
  Array.isArray(o) ? o.forEach((s, a) => {
    n((i, l) => {
      a <= e.keys.length - 1 && (a === 0 ? Object.assign(i, l) : i[e.up(e.keys[a])] = l);
    }, s);
  }) : o && typeof o == "object" ? (Object.keys(o).length > e.keys.length ? e.keys : Im(e.keys, Object.keys(o))).forEach((a) => {
    if (e.keys.indexOf(a) !== -1) {
      const i = o[a];
      i !== void 0 && n((l, c) => {
        r === a ? Object.assign(l, c) : l[e.up(a)] = c;
      }, i);
    }
  }) : (typeof o == "number" || typeof o == "string") && n((s, a) => {
    Object.assign(s, a);
  }, o);
};
function xo(e) {
  return e ? `Level${e}` : "";
}
function gr(e) {
  return e.unstable_level > 0 && e.container;
}
function Tc(e) {
  return function(n) {
    return `var(--Grid-${n}Spacing${xo(e.unstable_level)})`;
  };
}
function va(e) {
  return function(n) {
    return e.unstable_level === 0 ? `var(--Grid-${n}Spacing)` : `var(--Grid-${n}Spacing${xo(e.unstable_level - 1)})`;
  };
}
function ya(e) {
  return e.unstable_level === 0 ? "var(--Grid-columns)" : `var(--Grid-columns${xo(e.unstable_level - 1)})`;
}
const km = ({
  theme: e,
  ownerState: o
}) => {
  const n = Tc(o), r = {};
  return In(e.breakpoints, o.gridSize, (s, a) => {
    let i = {};
    a === !0 && (i = {
      flexBasis: 0,
      flexGrow: 1,
      maxWidth: "100%"
    }), a === "auto" && (i = {
      flexBasis: "auto",
      flexGrow: 0,
      flexShrink: 0,
      maxWidth: "none",
      width: "auto"
    }), typeof a == "number" && (i = {
      flexGrow: 0,
      flexBasis: "auto",
      width: `calc(100% * ${a} / ${ya(o)}${gr(o) ? ` + ${n("column")}` : ""})`
    }), s(r, i);
  }), r;
}, Mm = ({
  theme: e,
  ownerState: o
}) => {
  const n = {};
  return In(e.breakpoints, o.gridOffset, (r, s) => {
    let a = {};
    s === "auto" && (a = {
      marginLeft: "auto"
    }), typeof s == "number" && (a = {
      marginLeft: s === 0 ? "0px" : `calc(100% * ${s} / ${ya(o)})`
    }), r(n, a);
  }), n;
}, Bm = ({
  theme: e,
  ownerState: o
}) => {
  if (!o.container)
    return {};
  const n = gr(o) ? {
    [`--Grid-columns${xo(o.unstable_level)}`]: ya(o)
  } : {
    "--Grid-columns": 12
  };
  return In(e.breakpoints, o.columns, (r, s) => {
    r(n, {
      [`--Grid-columns${xo(o.unstable_level)}`]: s
    });
  }), n;
}, Lm = ({
  theme: e,
  ownerState: o
}) => {
  if (!o.container)
    return {};
  const n = va(o), r = gr(o) ? {
    // Set the default spacing as its parent spacing.
    // It will be overridden if spacing props are provided
    [`--Grid-rowSpacing${xo(o.unstable_level)}`]: n("row")
  } : {};
  return In(e.breakpoints, o.rowSpacing, (s, a) => {
    var i;
    s(r, {
      [`--Grid-rowSpacing${xo(o.unstable_level)}`]: typeof a == "string" ? a : (i = e.spacing) == null ? void 0 : i.call(e, a)
    });
  }), r;
}, Dm = ({
  theme: e,
  ownerState: o
}) => {
  if (!o.container)
    return {};
  const n = va(o), r = gr(o) ? {
    // Set the default spacing as its parent spacing.
    // It will be overridden if spacing props are provided
    [`--Grid-columnSpacing${xo(o.unstable_level)}`]: n("column")
  } : {};
  return In(e.breakpoints, o.columnSpacing, (s, a) => {
    var i;
    s(r, {
      [`--Grid-columnSpacing${xo(o.unstable_level)}`]: typeof a == "string" ? a : (i = e.spacing) == null ? void 0 : i.call(e, a)
    });
  }), r;
}, Am = ({
  theme: e,
  ownerState: o
}) => {
  if (!o.container)
    return {};
  const n = {};
  return In(e.breakpoints, o.direction, (r, s) => {
    r(n, {
      flexDirection: s
    });
  }), n;
}, Fm = ({
  ownerState: e
}) => {
  const o = Tc(e), n = va(e);
  return u({
    minWidth: 0,
    boxSizing: "border-box"
  }, e.container && u({
    display: "flex",
    flexWrap: "wrap"
  }, e.wrap && e.wrap !== "wrap" && {
    flexWrap: e.wrap
  }, {
    margin: `calc(${o("row")} / -2) calc(${o("column")} / -2)`
  }, e.disableEqualOverflow && {
    margin: `calc(${o("row")} * -1) 0px 0px calc(${o("column")} * -1)`
  }), (!e.container || gr(e)) && u({
    padding: `calc(${n("row")} / 2) calc(${n("column")} / 2)`
  }, (e.disableEqualOverflow || e.parentDisableEqualOverflow) && {
    padding: `${n("row")} 0px 0px ${n("column")}`
  }));
}, jm = (e) => {
  const o = [];
  return Object.entries(e).forEach(([n, r]) => {
    r !== !1 && r !== void 0 && o.push(`grid-${n}-${String(r)}`);
  }), o;
}, _m = (e, o = "xs") => {
  function n(r) {
    return r === void 0 ? !1 : typeof r == "string" && !Number.isNaN(Number(r)) || typeof r == "number" && r > 0;
  }
  if (n(e))
    return [`spacing-${o}-${String(e)}`];
  if (typeof e == "object" && !Array.isArray(e)) {
    const r = [];
    return Object.entries(e).forEach(([s, a]) => {
      n(a) && r.push(`spacing-${s}-${String(a)}`);
    }), r;
  }
  return [];
}, zm = (e) => e === void 0 ? [] : typeof e == "object" ? Object.entries(e).map(([o, n]) => `direction-${o}-${n}`) : [`direction-xs-${String(e)}`], Vm = ["className", "children", "columns", "container", "component", "direction", "wrap", "spacing", "rowSpacing", "columnSpacing", "disableEqualOverflow", "unstable_level"], Um = cs(), Wm = ba("div", {
  name: "MuiGrid",
  slot: "Root",
  overridesResolver: (e, o) => o.root
});
function Hm(e) {
  return ms({
    props: e,
    name: "MuiGrid",
    defaultTheme: Um
  });
}
function qm(e = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent: o = Wm,
    useThemeProps: n = Hm,
    componentName: r = "MuiGrid"
  } = e, s = /* @__PURE__ */ f.createContext(void 0);
  process.env.NODE_ENV !== "production" && (s.displayName = "GridOverflowContext");
  const a = (c, d) => {
    const {
      container: p,
      direction: m,
      spacing: b,
      wrap: h,
      gridSize: v
    } = c, C = {
      root: ["root", p && "container", h !== "wrap" && `wrap-xs-${String(h)}`, ...zm(m), ...jm(v), ...p ? _m(b, d.breakpoints.keys[0]) : []]
    };
    return te(C, (g) => ee(r, g), {});
  }, i = o(Bm, Dm, Lm, km, Am, Fm, Mm), l = /* @__PURE__ */ f.forwardRef(function(d, p) {
    var m, b, h, v, C, g, y, $;
    const T = ac(), O = n(d), S = us(O), R = f.useContext(s), {
      className: w,
      children: E,
      columns: N = 12,
      container: M = !1,
      component: I = "div",
      direction: F = "row",
      wrap: A = "wrap",
      spacing: B = 0,
      rowSpacing: j = B,
      columnSpacing: V = B,
      disableEqualOverflow: U,
      unstable_level: _ = 0
    } = S, W = z(S, Vm);
    let de = U;
    _ && U !== void 0 && (de = d.disableEqualOverflow);
    const Te = {}, $e = {}, ie = {};
    Object.entries(W).forEach(([fe, me]) => {
      T.breakpoints.values[fe] !== void 0 ? Te[fe] = me : T.breakpoints.values[fe.replace("Offset", "")] !== void 0 ? $e[fe.replace("Offset", "")] = me : ie[fe] = me;
    });
    const se = (m = d.columns) != null ? m : _ ? void 0 : N, ue = (b = d.spacing) != null ? b : _ ? void 0 : B, Z = (h = (v = d.rowSpacing) != null ? v : d.spacing) != null ? h : _ ? void 0 : j, he = (C = (g = d.columnSpacing) != null ? g : d.spacing) != null ? C : _ ? void 0 : V, q = u({}, S, {
      level: _,
      columns: se,
      container: M,
      direction: F,
      wrap: A,
      spacing: ue,
      rowSpacing: Z,
      columnSpacing: he,
      gridSize: Te,
      gridOffset: $e,
      disableEqualOverflow: (y = ($ = de) != null ? $ : R) != null ? y : !1,
      // use context value if exists.
      parentDisableEqualOverflow: R
      // for nested grid
    }), le = a(q, T);
    let Oe = /* @__PURE__ */ x(i, u({
      ref: p,
      as: I,
      ownerState: q,
      className: D(le.root, w)
    }, ie, {
      children: f.Children.map(E, (fe) => {
        if (/* @__PURE__ */ f.isValidElement(fe) && Co(fe, ["Grid"])) {
          var me;
          return /* @__PURE__ */ f.cloneElement(fe, {
            unstable_level: (me = fe.props.unstable_level) != null ? me : _ + 1
          });
        }
        return fe;
      })
    }));
    return de !== void 0 && de !== (R ?? !1) && (Oe = /* @__PURE__ */ x(s.Provider, {
      value: de,
      children: Oe
    })), Oe;
  });
  return process.env.NODE_ENV !== "production" && (l.propTypes = {
    children: t.node,
    className: t.string,
    columns: t.oneOfType([t.arrayOf(t.number), t.number, t.object]),
    columnSpacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
    component: t.elementType,
    container: t.bool,
    direction: t.oneOfType([t.oneOf(["column-reverse", "column", "row-reverse", "row"]), t.arrayOf(t.oneOf(["column-reverse", "column", "row-reverse", "row"])), t.object]),
    disableEqualOverflow: t.bool,
    lg: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
    lgOffset: t.oneOfType([t.oneOf(["auto"]), t.number]),
    md: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
    mdOffset: t.oneOfType([t.oneOf(["auto"]), t.number]),
    rowSpacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
    sm: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
    smOffset: t.oneOfType([t.oneOf(["auto"]), t.number]),
    spacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
    sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
    wrap: t.oneOf(["nowrap", "wrap-reverse", "wrap"]),
    xl: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
    xlOffset: t.oneOfType([t.oneOf(["auto"]), t.number]),
    xs: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
    xsOffset: t.oneOfType([t.oneOf(["auto"]), t.number])
  }), l.muiName = "Grid", l;
}
const Gm = ["component", "direction", "spacing", "divider", "children", "className", "useFlexGap"], Km = cs(), Ym = ba("div", {
  name: "MuiStack",
  slot: "Root",
  overridesResolver: (e, o) => o.root
});
function Xm(e) {
  return ms({
    props: e,
    name: "MuiStack",
    defaultTheme: Km
  });
}
function Qm(e, o) {
  const n = f.Children.toArray(e).filter(Boolean);
  return n.reduce((r, s, a) => (r.push(s), a < n.length - 1 && r.push(/* @__PURE__ */ f.cloneElement(o, {
    key: `separator-${a}`
  })), r), []);
}
const Zm = (e) => ({
  row: "Left",
  "row-reverse": "Right",
  column: "Top",
  "column-reverse": "Bottom"
})[e], Jm = ({
  ownerState: e,
  theme: o
}) => {
  let n = u({
    display: "flex",
    flexDirection: "column"
  }, er({
    theme: o
  }, on({
    values: e.direction,
    breakpoints: o.breakpoints.values
  }), (r) => ({
    flexDirection: r
  })));
  if (e.spacing) {
    const r = lf(o), s = Object.keys(o.breakpoints.values).reduce((c, d) => ((typeof e.spacing == "object" && e.spacing[d] != null || typeof e.direction == "object" && e.direction[d] != null) && (c[d] = !0), c), {}), a = on({
      values: e.direction,
      base: s
    }), i = on({
      values: e.spacing,
      base: s
    });
    typeof a == "object" && Object.keys(a).forEach((c, d, p) => {
      if (!a[c]) {
        const b = d > 0 ? a[p[d - 1]] : "column";
        a[c] = b;
      }
    }), n = ds(n, er({
      theme: o
    }, i, (c, d) => e.useFlexGap ? {
      gap: ri(r, c)
    } : {
      // The useFlexGap={false} implement relies on each child to give up control of the margin.
      // We need to reset the margin to avoid double spacing.
      "& > :not(style):not(style)": {
        margin: 0
      },
      "& > :not(style) ~ :not(style)": {
        [`margin${Zm(d ? a[d] : e.direction)}`]: ri(r, c)
      }
    }));
  }
  return n = cf(o.breakpoints, n), n;
};
function eb(e = {}) {
  const {
    // This will allow adding custom styled fn (for example for custom sx style function)
    createStyledComponent: o = Ym,
    useThemeProps: n = Xm,
    componentName: r = "MuiStack"
  } = e, s = () => te({
    root: ["root"]
  }, (c) => ee(r, c), {}), a = o(Jm), i = /* @__PURE__ */ f.forwardRef(function(c, d) {
    const p = n(c), m = us(p), {
      component: b = "div",
      direction: h = "column",
      spacing: v = 0,
      divider: C,
      children: g,
      className: y,
      useFlexGap: $ = !1
    } = m, T = z(m, Gm), O = {
      direction: h,
      spacing: v,
      useFlexGap: $
    }, S = s();
    return /* @__PURE__ */ x(a, u({
      as: b,
      ownerState: O,
      ref: d,
      className: D(S.root, y)
    }, T, {
      children: C ? Qm(g, C) : g
    }));
  });
  return process.env.NODE_ENV !== "production" && (i.propTypes = {
    children: t.node,
    direction: t.oneOfType([t.oneOf(["column-reverse", "column", "row-reverse", "row"]), t.arrayOf(t.oneOf(["column-reverse", "column", "row-reverse", "row"])), t.object]),
    divider: t.node,
    spacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
    sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
  }), i;
}
function tb(e) {
  return ee("MuiSvgIcon", e);
}
const ob = ne("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]), WI = ob, nb = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"], rb = (e) => {
  const {
    color: o,
    fontSize: n,
    classes: r
  } = e, s = {
    root: ["root", o !== "inherit" && `color${k(o)}`, `fontSize${k(n)}`]
  };
  return te(s, tb, r);
}, sb = P("svg", {
  name: "MuiSvgIcon",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.color !== "inherit" && o[`color${k(n.color)}`], o[`fontSize${k(n.fontSize)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => {
  var n, r, s, a, i, l, c, d, p, m, b, h, v;
  return {
    userSelect: "none",
    width: "1em",
    height: "1em",
    display: "inline-block",
    // the <svg> will define the property that has `currentColor`
    // e.g. heroicons uses fill="none" and stroke="currentColor"
    fill: o.hasSvgAsChild ? void 0 : "currentColor",
    flexShrink: 0,
    transition: (n = e.transitions) == null || (r = n.create) == null ? void 0 : r.call(n, "fill", {
      duration: (s = e.transitions) == null || (s = s.duration) == null ? void 0 : s.shorter
    }),
    fontSize: {
      inherit: "inherit",
      small: ((a = e.typography) == null || (i = a.pxToRem) == null ? void 0 : i.call(a, 20)) || "1.25rem",
      medium: ((l = e.typography) == null || (c = l.pxToRem) == null ? void 0 : c.call(l, 24)) || "1.5rem",
      large: ((d = e.typography) == null || (p = d.pxToRem) == null ? void 0 : p.call(d, 35)) || "2.1875rem"
    }[o.fontSize],
    // TODO v5 deprecate, v6 remove for sx
    color: (m = (b = (e.vars || e).palette) == null || (b = b[o.color]) == null ? void 0 : b.main) != null ? m : {
      action: (h = (e.vars || e).palette) == null || (h = h.action) == null ? void 0 : h.active,
      disabled: (v = (e.vars || e).palette) == null || (v = v.action) == null ? void 0 : v.disabled,
      inherit: void 0
    }[o.color]
  };
}), Ca = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiSvgIcon"
  }), {
    children: s,
    className: a,
    color: i = "inherit",
    component: l = "svg",
    fontSize: c = "medium",
    htmlColor: d,
    inheritViewBox: p = !1,
    titleAccess: m,
    viewBox: b = "0 0 24 24"
  } = r, h = z(r, nb), v = /* @__PURE__ */ f.isValidElement(s) && s.type === "svg", C = u({}, r, {
    color: i,
    component: l,
    fontSize: c,
    instanceFontSize: o.fontSize,
    inheritViewBox: p,
    viewBox: b,
    hasSvgAsChild: v
  }), g = {};
  p || (g.viewBox = b);
  const y = rb(C);
  return /* @__PURE__ */ Ce(sb, u({
    as: l,
    className: D(y.root, a),
    focusable: "false",
    color: d,
    "aria-hidden": m ? void 0 : !0,
    role: m ? "img" : void 0,
    ref: n
  }, g, h, v && s.props, {
    ownerState: C,
    children: [v ? s.props.children : s, m ? /* @__PURE__ */ x("title", {
      children: m
    }) : null]
  }));
});
process.env.NODE_ENV !== "production" && (Ca.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Node passed into the SVG element.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
   * @default 'inherit'
   */
  color: t.oneOfType([t.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   * @default 'medium'
   */
  fontSize: t.oneOfType([t.oneOf(["inherit", "large", "medium", "small"]), t.string]),
  /**
   * Applies a color attribute to the SVG element.
   */
  htmlColor: t.string,
  /**
   * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
   * prop will be ignored.
   * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
   * `component`'s viewBox to the root node.
   * @default false
   */
  inheritViewBox: t.bool,
  /**
   * The shape-rendering attribute. The behavior of the different options is described on the
   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
   * If you are having issues with blurry icons you should investigate this prop.
   */
  shapeRendering: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Provides a human-readable title for the element that contains it.
   * https://www.w3.org/TR/SVG-access/#Equivalent
   */
  titleAccess: t.string,
  /**
   * Allows you to redefine what the coordinates without units mean inside an SVG element.
   * For example, if the SVG element is 500 (width) by 200 (height),
   * and you pass viewBox="0 0 50 20",
   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
   * to bottom right (50,20) and each unit will be worth 10px.
   * @default '0 0 24 24'
   */
  viewBox: t.string
});
Ca.muiName = "SvgIcon";
const ta = Ca;
function Je(e, o) {
  function n(r, s) {
    return /* @__PURE__ */ x(ta, u({
      "data-testid": `${o}Icon`,
      ref: s
    }, r, {
      children: e
    }));
  }
  return process.env.NODE_ENV !== "production" && (n.displayName = `${o}Icon`), n.muiName = ta.muiName, /* @__PURE__ */ f.memo(/* @__PURE__ */ f.forwardRef(n));
}
const HI = {
  configure: (e) => {
    process.env.NODE_ENV !== "production" && console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.", "", "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", "", "The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401", "", "The updated documentation: https://mui.com/guides/classname-generator/"].join(`
`)), uf.configure(e);
  }
};
var oa = { exports: {} }, Ge = {};
/**
 * @license React
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var fi;
function ab() {
  if (fi)
    return Ge;
  fi = 1;
  var e = Symbol.for("react.element"), o = Symbol.for("react.portal"), n = Symbol.for("react.fragment"), r = Symbol.for("react.strict_mode"), s = Symbol.for("react.profiler"), a = Symbol.for("react.provider"), i = Symbol.for("react.context"), l = Symbol.for("react.server_context"), c = Symbol.for("react.forward_ref"), d = Symbol.for("react.suspense"), p = Symbol.for("react.suspense_list"), m = Symbol.for("react.memo"), b = Symbol.for("react.lazy"), h = Symbol.for("react.offscreen"), v;
  v = Symbol.for("react.module.reference");
  function C(g) {
    if (typeof g == "object" && g !== null) {
      var y = g.$$typeof;
      switch (y) {
        case e:
          switch (g = g.type, g) {
            case n:
            case s:
            case r:
            case d:
            case p:
              return g;
            default:
              switch (g = g && g.$$typeof, g) {
                case l:
                case i:
                case c:
                case b:
                case m:
                case a:
                  return g;
                default:
                  return y;
              }
          }
        case o:
          return y;
      }
    }
  }
  return Ge.ContextConsumer = i, Ge.ContextProvider = a, Ge.Element = e, Ge.ForwardRef = c, Ge.Fragment = n, Ge.Lazy = b, Ge.Memo = m, Ge.Portal = o, Ge.Profiler = s, Ge.StrictMode = r, Ge.Suspense = d, Ge.SuspenseList = p, Ge.isAsyncMode = function() {
    return !1;
  }, Ge.isConcurrentMode = function() {
    return !1;
  }, Ge.isContextConsumer = function(g) {
    return C(g) === i;
  }, Ge.isContextProvider = function(g) {
    return C(g) === a;
  }, Ge.isElement = function(g) {
    return typeof g == "object" && g !== null && g.$$typeof === e;
  }, Ge.isForwardRef = function(g) {
    return C(g) === c;
  }, Ge.isFragment = function(g) {
    return C(g) === n;
  }, Ge.isLazy = function(g) {
    return C(g) === b;
  }, Ge.isMemo = function(g) {
    return C(g) === m;
  }, Ge.isPortal = function(g) {
    return C(g) === o;
  }, Ge.isProfiler = function(g) {
    return C(g) === s;
  }, Ge.isStrictMode = function(g) {
    return C(g) === r;
  }, Ge.isSuspense = function(g) {
    return C(g) === d;
  }, Ge.isSuspenseList = function(g) {
    return C(g) === p;
  }, Ge.isValidElementType = function(g) {
    return typeof g == "string" || typeof g == "function" || g === n || g === s || g === r || g === d || g === p || g === h || typeof g == "object" && g !== null && (g.$$typeof === b || g.$$typeof === m || g.$$typeof === a || g.$$typeof === i || g.$$typeof === c || g.$$typeof === v || g.getModuleId !== void 0);
  }, Ge.typeOf = C, Ge;
}
var Ke = {};
/**
 * @license React
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var mi;
function ib() {
  return mi || (mi = 1, process.env.NODE_ENV !== "production" && function() {
    var e = Symbol.for("react.element"), o = Symbol.for("react.portal"), n = Symbol.for("react.fragment"), r = Symbol.for("react.strict_mode"), s = Symbol.for("react.profiler"), a = Symbol.for("react.provider"), i = Symbol.for("react.context"), l = Symbol.for("react.server_context"), c = Symbol.for("react.forward_ref"), d = Symbol.for("react.suspense"), p = Symbol.for("react.suspense_list"), m = Symbol.for("react.memo"), b = Symbol.for("react.lazy"), h = Symbol.for("react.offscreen"), v = !1, C = !1, g = !1, y = !1, $ = !1, T;
    T = Symbol.for("react.module.reference");
    function O(Y) {
      return !!(typeof Y == "string" || typeof Y == "function" || Y === n || Y === s || $ || Y === r || Y === d || Y === p || y || Y === h || v || C || g || typeof Y == "object" && Y !== null && (Y.$$typeof === b || Y.$$typeof === m || Y.$$typeof === a || Y.$$typeof === i || Y.$$typeof === c || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      Y.$$typeof === T || Y.getModuleId !== void 0));
    }
    function S(Y) {
      if (typeof Y == "object" && Y !== null) {
        var re = Y.$$typeof;
        switch (re) {
          case e:
            var X = Y.type;
            switch (X) {
              case n:
              case s:
              case r:
              case d:
              case p:
                return X;
              default:
                var Ee = X && X.$$typeof;
                switch (Ee) {
                  case l:
                  case i:
                  case c:
                  case b:
                  case m:
                  case a:
                    return Ee;
                  default:
                    return re;
                }
            }
          case o:
            return re;
        }
      }
    }
    var R = i, w = a, E = e, N = c, M = n, I = b, F = m, A = o, B = s, j = r, V = d, U = p, _ = !1, W = !1;
    function de(Y) {
      return _ || (_ = !0, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.")), !1;
    }
    function Te(Y) {
      return W || (W = !0, console.warn("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.")), !1;
    }
    function $e(Y) {
      return S(Y) === i;
    }
    function ie(Y) {
      return S(Y) === a;
    }
    function se(Y) {
      return typeof Y == "object" && Y !== null && Y.$$typeof === e;
    }
    function ue(Y) {
      return S(Y) === c;
    }
    function Z(Y) {
      return S(Y) === n;
    }
    function he(Y) {
      return S(Y) === b;
    }
    function q(Y) {
      return S(Y) === m;
    }
    function le(Y) {
      return S(Y) === o;
    }
    function Oe(Y) {
      return S(Y) === s;
    }
    function fe(Y) {
      return S(Y) === r;
    }
    function me(Y) {
      return S(Y) === d;
    }
    function ve(Y) {
      return S(Y) === p;
    }
    Ke.ContextConsumer = R, Ke.ContextProvider = w, Ke.Element = E, Ke.ForwardRef = N, Ke.Fragment = M, Ke.Lazy = I, Ke.Memo = F, Ke.Portal = A, Ke.Profiler = B, Ke.StrictMode = j, Ke.Suspense = V, Ke.SuspenseList = U, Ke.isAsyncMode = de, Ke.isConcurrentMode = Te, Ke.isContextConsumer = $e, Ke.isContextProvider = ie, Ke.isElement = se, Ke.isForwardRef = ue, Ke.isFragment = Z, Ke.isLazy = he, Ke.isMemo = q, Ke.isPortal = le, Ke.isProfiler = Oe, Ke.isStrictMode = fe, Ke.isSuspense = me, Ke.isSuspenseList = ve, Ke.isValidElementType = O, Ke.typeOf = S;
  }()), Ke;
}
process.env.NODE_ENV === "production" ? oa.exports = ab() : oa.exports = ib();
var to = oa.exports;
function na(e, o) {
  return na = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(r, s) {
    return r.__proto__ = s, r;
  }, na(e, o);
}
function Oc(e, o) {
  e.prototype = Object.create(o.prototype), e.prototype.constructor = e, na(e, o);
}
const bi = {
  disabled: !1
};
var lb = process.env.NODE_ENV !== "production" ? t.oneOfType([t.number, t.shape({
  enter: t.number,
  exit: t.number,
  appear: t.number
}).isRequired]) : null;
process.env.NODE_ENV !== "production" && t.oneOfType([t.string, t.shape({
  enter: t.string,
  exit: t.string,
  active: t.string
}), t.shape({
  enter: t.string,
  enterDone: t.string,
  enterActive: t.string,
  exit: t.string,
  exitDone: t.string,
  exitActive: t.string
})]);
const Yr = uo.createContext(null);
var cb = function(o) {
  return o.scrollTop;
}, Hn = "unmounted", qo = "exited", Go = "entering", un = "entered", ra = "exiting", Oo = /* @__PURE__ */ function(e) {
  Oc(o, e);
  function o(r, s) {
    var a;
    a = e.call(this, r, s) || this;
    var i = s, l = i && !i.isMounting ? r.enter : r.appear, c;
    return a.appearStatus = null, r.in ? l ? (c = qo, a.appearStatus = Go) : c = un : r.unmountOnExit || r.mountOnEnter ? c = Hn : c = qo, a.state = {
      status: c
    }, a.nextCallback = null, a;
  }
  o.getDerivedStateFromProps = function(s, a) {
    var i = s.in;
    return i && a.status === Hn ? {
      status: qo
    } : null;
  };
  var n = o.prototype;
  return n.componentDidMount = function() {
    this.updateStatus(!0, this.appearStatus);
  }, n.componentDidUpdate = function(s) {
    var a = null;
    if (s !== this.props) {
      var i = this.state.status;
      this.props.in ? i !== Go && i !== un && (a = Go) : (i === Go || i === un) && (a = ra);
    }
    this.updateStatus(!1, a);
  }, n.componentWillUnmount = function() {
    this.cancelNextCallback();
  }, n.getTimeouts = function() {
    var s = this.props.timeout, a, i, l;
    return a = i = l = s, s != null && typeof s != "number" && (a = s.exit, i = s.enter, l = s.appear !== void 0 ? s.appear : i), {
      exit: a,
      enter: i,
      appear: l
    };
  }, n.updateStatus = function(s, a) {
    if (s === void 0 && (s = !1), a !== null)
      if (this.cancelNextCallback(), a === Go) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var i = this.props.nodeRef ? this.props.nodeRef.current : $r.findDOMNode(this);
          i && cb(i);
        }
        this.performEnter(s);
      } else
        this.performExit();
    else
      this.props.unmountOnExit && this.state.status === qo && this.setState({
        status: Hn
      });
  }, n.performEnter = function(s) {
    var a = this, i = this.props.enter, l = this.context ? this.context.isMounting : s, c = this.props.nodeRef ? [l] : [$r.findDOMNode(this), l], d = c[0], p = c[1], m = this.getTimeouts(), b = l ? m.appear : m.enter;
    if (!s && !i || bi.disabled) {
      this.safeSetState({
        status: un
      }, function() {
        a.props.onEntered(d);
      });
      return;
    }
    this.props.onEnter(d, p), this.safeSetState({
      status: Go
    }, function() {
      a.props.onEntering(d, p), a.onTransitionEnd(b, function() {
        a.safeSetState({
          status: un
        }, function() {
          a.props.onEntered(d, p);
        });
      });
    });
  }, n.performExit = function() {
    var s = this, a = this.props.exit, i = this.getTimeouts(), l = this.props.nodeRef ? void 0 : $r.findDOMNode(this);
    if (!a || bi.disabled) {
      this.safeSetState({
        status: qo
      }, function() {
        s.props.onExited(l);
      });
      return;
    }
    this.props.onExit(l), this.safeSetState({
      status: ra
    }, function() {
      s.props.onExiting(l), s.onTransitionEnd(i.exit, function() {
        s.safeSetState({
          status: qo
        }, function() {
          s.props.onExited(l);
        });
      });
    });
  }, n.cancelNextCallback = function() {
    this.nextCallback !== null && (this.nextCallback.cancel(), this.nextCallback = null);
  }, n.safeSetState = function(s, a) {
    a = this.setNextCallback(a), this.setState(s, a);
  }, n.setNextCallback = function(s) {
    var a = this, i = !0;
    return this.nextCallback = function(l) {
      i && (i = !1, a.nextCallback = null, s(l));
    }, this.nextCallback.cancel = function() {
      i = !1;
    }, this.nextCallback;
  }, n.onTransitionEnd = function(s, a) {
    this.setNextCallback(a);
    var i = this.props.nodeRef ? this.props.nodeRef.current : $r.findDOMNode(this), l = s == null && !this.props.addEndListener;
    if (!i || l) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var c = this.props.nodeRef ? [this.nextCallback] : [i, this.nextCallback], d = c[0], p = c[1];
      this.props.addEndListener(d, p);
    }
    s != null && setTimeout(this.nextCallback, s);
  }, n.render = function() {
    var s = this.state.status;
    if (s === Hn)
      return null;
    var a = this.props, i = a.children;
    a.in, a.mountOnEnter, a.unmountOnExit, a.appear, a.enter, a.exit, a.timeout, a.addEndListener, a.onEnter, a.onEntering, a.onEntered, a.onExit, a.onExiting, a.onExited, a.nodeRef;
    var l = z(a, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      /* @__PURE__ */ uo.createElement(Yr.Provider, {
        value: null
      }, typeof i == "function" ? i(s, l) : uo.cloneElement(uo.Children.only(i), l))
    );
  }, o;
}(uo.Component);
Oo.contextType = Yr;
Oo.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: t.shape({
    current: typeof Element > "u" ? t.any : function(e, o, n, r, s, a) {
      var i = e[o];
      return t.instanceOf(i && "ownerDocument" in i ? i.ownerDocument.defaultView.Element : Element)(e, o, n, r, s, a);
    }
  }),
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: t.oneOfType([t.func.isRequired, t.element.isRequired]).isRequired,
  /**
   * Show the component; triggers the enter or exit states
   */
  in: t.bool,
  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: t.bool,
  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: t.bool,
  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: t.bool,
  /**
   * Enable or disable enter transitions.
   */
  enter: t.bool,
  /**
   * Enable or disable exit transitions.
   */
  exit: t.bool,
  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function(o) {
    var n = lb;
    o.addEndListener || (n = n.isRequired);
    for (var r = arguments.length, s = new Array(r > 1 ? r - 1 : 0), a = 1; a < r; a++)
      s[a - 1] = arguments[a];
    return n.apply(void 0, [o].concat(s));
  },
  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: t.func,
  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: t.func,
  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: t.func,
  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: t.func,
  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: t.func,
  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: t.func,
  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: t.func
} : {};
function cn() {
}
Oo.defaultProps = {
  in: !1,
  mountOnEnter: !1,
  unmountOnExit: !1,
  appear: !1,
  enter: !0,
  exit: !0,
  onEnter: cn,
  onEntering: cn,
  onEntered: cn,
  onExit: cn,
  onExiting: cn,
  onExited: cn
};
Oo.UNMOUNTED = Hn;
Oo.EXITED = qo;
Oo.ENTERING = Go;
Oo.ENTERED = un;
Oo.EXITING = ra;
const hr = Oo;
function ub(e) {
  if (e === void 0)
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}
function xa(e, o) {
  var n = function(a) {
    return o && Vr(a) ? o(a) : a;
  }, r = /* @__PURE__ */ Object.create(null);
  return e && hf.map(e, function(s) {
    return s;
  }).forEach(function(s) {
    r[s.key] = n(s);
  }), r;
}
function db(e, o) {
  e = e || {}, o = o || {};
  function n(p) {
    return p in o ? o[p] : e[p];
  }
  var r = /* @__PURE__ */ Object.create(null), s = [];
  for (var a in e)
    a in o ? s.length && (r[a] = s, s = []) : s.push(a);
  var i, l = {};
  for (var c in o) {
    if (r[c])
      for (i = 0; i < r[c].length; i++) {
        var d = r[c][i];
        l[r[c][i]] = n(d);
      }
    l[c] = n(c);
  }
  for (i = 0; i < s.length; i++)
    l[s[i]] = n(s[i]);
  return l;
}
function Xo(e, o, n) {
  return n[o] != null ? n[o] : e.props[o];
}
function pb(e, o) {
  return xa(e.children, function(n) {
    return Ur(n, {
      onExited: o.bind(null, n),
      in: !0,
      appear: Xo(n, "appear", e),
      enter: Xo(n, "enter", e),
      exit: Xo(n, "exit", e)
    });
  });
}
function fb(e, o, n) {
  var r = xa(e.children), s = db(o, r);
  return Object.keys(s).forEach(function(a) {
    var i = s[a];
    if (Vr(i)) {
      var l = a in o, c = a in r, d = o[a], p = Vr(d) && !d.props.in;
      c && (!l || p) ? s[a] = Ur(i, {
        onExited: n.bind(null, i),
        in: !0,
        exit: Xo(i, "exit", e),
        enter: Xo(i, "enter", e)
      }) : !c && l && !p ? s[a] = Ur(i, {
        in: !1
      }) : c && l && Vr(d) && (s[a] = Ur(i, {
        onExited: n.bind(null, i),
        in: d.props.in,
        exit: Xo(i, "exit", e),
        enter: Xo(i, "enter", e)
      }));
    }
  }), s;
}
var mb = Object.values || function(e) {
  return Object.keys(e).map(function(o) {
    return e[o];
  });
}, bb = {
  component: "div",
  childFactory: function(o) {
    return o;
  }
}, Ta = /* @__PURE__ */ function(e) {
  Oc(o, e);
  function o(r, s) {
    var a;
    a = e.call(this, r, s) || this;
    var i = a.handleExited.bind(ub(a));
    return a.state = {
      contextValue: {
        isMounting: !0
      },
      handleExited: i,
      firstRender: !0
    }, a;
  }
  var n = o.prototype;
  return n.componentDidMount = function() {
    this.mounted = !0, this.setState({
      contextValue: {
        isMounting: !1
      }
    });
  }, n.componentWillUnmount = function() {
    this.mounted = !1;
  }, o.getDerivedStateFromProps = function(s, a) {
    var i = a.children, l = a.handleExited, c = a.firstRender;
    return {
      children: c ? pb(s, l) : fb(s, i, l),
      firstRender: !1
    };
  }, n.handleExited = function(s, a) {
    var i = xa(this.props.children);
    s.key in i || (s.props.onExited && s.props.onExited(a), this.mounted && this.setState(function(l) {
      var c = u({}, l.children);
      return delete c[s.key], {
        children: c
      };
    }));
  }, n.render = function() {
    var s = this.props, a = s.component, i = s.childFactory, l = z(s, ["component", "childFactory"]), c = this.state.contextValue, d = mb(this.state.children).map(i);
    return delete l.appear, delete l.enter, delete l.exit, a === null ? /* @__PURE__ */ uo.createElement(Yr.Provider, {
      value: c
    }, d) : /* @__PURE__ */ uo.createElement(Yr.Provider, {
      value: c
    }, /* @__PURE__ */ uo.createElement(a, l, d));
  }, o;
}(uo.Component);
Ta.propTypes = process.env.NODE_ENV !== "production" ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: t.any,
  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: t.node,
  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: t.bool,
  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: t.bool,
  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: t.bool,
  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: t.func
} : {};
Ta.defaultProps = bb;
const gb = Ta, gs = (e) => e.scrollTop;
function eo(e, o) {
  var n, r;
  const {
    timeout: s,
    easing: a,
    style: i = {}
  } = e;
  return {
    duration: (n = i.transitionDuration) != null ? n : typeof s == "number" ? s : s[o.mode] || 0,
    easing: (r = i.transitionTimingFunction) != null ? r : typeof a == "object" ? a[o.mode] : a,
    delay: i.transitionDelay
  };
}
function hb(e) {
  return ee("MuiCollapse", e);
}
const vb = ne("MuiCollapse", ["root", "horizontal", "vertical", "entered", "hidden", "wrapper", "wrapperInner"]), qI = vb, yb = ["addEndListener", "children", "className", "collapsedSize", "component", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "orientation", "style", "timeout", "TransitionComponent"], Cb = (e) => {
  const {
    orientation: o,
    classes: n
  } = e, r = {
    root: ["root", `${o}`],
    entered: ["entered"],
    hidden: ["hidden"],
    wrapper: ["wrapper", `${o}`],
    wrapperInner: ["wrapperInner", `${o}`]
  };
  return te(r, hb, n);
}, xb = P("div", {
  name: "MuiCollapse",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.orientation], n.state === "entered" && o.entered, n.state === "exited" && !n.in && n.collapsedSize === "0px" && o.hidden];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  height: 0,
  overflow: "hidden",
  transition: e.transitions.create("height")
}, o.orientation === "horizontal" && {
  height: "auto",
  width: 0,
  transition: e.transitions.create("width")
}, o.state === "entered" && u({
  height: "auto",
  overflow: "visible"
}, o.orientation === "horizontal" && {
  width: "auto"
}), o.state === "exited" && !o.in && o.collapsedSize === "0px" && {
  visibility: "hidden"
})), Tb = P("div", {
  name: "MuiCollapse",
  slot: "Wrapper",
  overridesResolver: (e, o) => o.wrapper
})(({
  ownerState: e
}) => u({
  // Hack to get children with a negative margin to not falsify the height computation.
  display: "flex",
  width: "100%"
}, e.orientation === "horizontal" && {
  width: "auto",
  height: "100%"
})), Ob = P("div", {
  name: "MuiCollapse",
  slot: "WrapperInner",
  overridesResolver: (e, o) => o.wrapperInner
})(({
  ownerState: e
}) => u({
  width: "100%"
}, e.orientation === "horizontal" && {
  width: "auto",
  height: "100%"
})), Oa = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiCollapse"
  }), {
    addEndListener: s,
    children: a,
    className: i,
    collapsedSize: l = "0px",
    component: c,
    easing: d,
    in: p,
    onEnter: m,
    onEntered: b,
    onEntering: h,
    onExit: v,
    onExited: C,
    onExiting: g,
    orientation: y = "vertical",
    style: $,
    timeout: T = df.standard,
    // eslint-disable-next-line react/prop-types
    TransitionComponent: O = hr
  } = r, S = z(r, yb), R = u({}, r, {
    orientation: y,
    collapsedSize: l
  }), w = Cb(R), E = rt(), N = yo(), M = f.useRef(null), I = f.useRef(), F = typeof l == "number" ? `${l}px` : l, A = y === "horizontal", B = A ? "width" : "height", j = f.useRef(null), V = Ve(n, j), U = (Z) => (he) => {
    if (Z) {
      const q = j.current;
      he === void 0 ? Z(q) : Z(q, he);
    }
  }, _ = () => M.current ? M.current[A ? "clientWidth" : "clientHeight"] : 0, W = U((Z, he) => {
    M.current && A && (M.current.style.position = "absolute"), Z.style[B] = F, m && m(Z, he);
  }), de = U((Z, he) => {
    const q = _();
    M.current && A && (M.current.style.position = "");
    const {
      duration: le,
      easing: Oe
    } = eo({
      style: $,
      timeout: T,
      easing: d
    }, {
      mode: "enter"
    });
    if (T === "auto") {
      const fe = E.transitions.getAutoHeightDuration(q);
      Z.style.transitionDuration = `${fe}ms`, I.current = fe;
    } else
      Z.style.transitionDuration = typeof le == "string" ? le : `${le}ms`;
    Z.style[B] = `${q}px`, Z.style.transitionTimingFunction = Oe, h && h(Z, he);
  }), Te = U((Z, he) => {
    Z.style[B] = "auto", b && b(Z, he);
  }), $e = U((Z) => {
    Z.style[B] = `${_()}px`, v && v(Z);
  }), ie = U(C), se = U((Z) => {
    const he = _(), {
      duration: q,
      easing: le
    } = eo({
      style: $,
      timeout: T,
      easing: d
    }, {
      mode: "exit"
    });
    if (T === "auto") {
      const Oe = E.transitions.getAutoHeightDuration(he);
      Z.style.transitionDuration = `${Oe}ms`, I.current = Oe;
    } else
      Z.style.transitionDuration = typeof q == "string" ? q : `${q}ms`;
    Z.style[B] = F, Z.style.transitionTimingFunction = le, g && g(Z);
  });
  return /* @__PURE__ */ x(O, u({
    in: p,
    onEnter: W,
    onEntered: Te,
    onEntering: de,
    onExit: $e,
    onExited: ie,
    onExiting: se,
    addEndListener: (Z) => {
      T === "auto" && N.start(I.current || 0, Z), s && s(j.current, Z);
    },
    nodeRef: j,
    timeout: T === "auto" ? null : T
  }, S, {
    children: (Z, he) => /* @__PURE__ */ x(xb, u({
      as: c,
      className: D(w.root, i, {
        entered: w.entered,
        exited: !p && F === "0px" && w.hidden
      }[Z]),
      style: u({
        [A ? "minWidth" : "minHeight"]: F
      }, $),
      ref: V
    }, he, {
      // `ownerState` is set after `childProps` to override any existing `ownerState` property in `childProps`
      // that might have been forwarded from the Transition component.
      ownerState: u({}, R, {
        state: Z
      }),
      children: /* @__PURE__ */ x(Tb, {
        ownerState: u({}, R, {
          state: Z
        }),
        className: w.wrapper,
        ref: M,
        children: /* @__PURE__ */ x(Ob, {
          ownerState: u({}, R, {
            state: Z
          }),
          className: w.wrapperInner,
          children: a
        })
      })
    }))
  }));
});
process.env.NODE_ENV !== "production" && (Oa.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: t.func,
  /**
   * The content node to be collapsed.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The width (horizontal) or height (vertical) of the container when collapsed.
   * @default '0px'
   */
  collapsedSize: t.oneOfType([t.number, t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: jo,
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: t.oneOfType([t.shape({
    enter: t.string,
    exit: t.string
  }), t.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: t.bool,
  /**
   * @ignore
   */
  onEnter: t.func,
  /**
   * @ignore
   */
  onEntered: t.func,
  /**
   * @ignore
   */
  onEntering: t.func,
  /**
   * @ignore
   */
  onExit: t.func,
  /**
   * @ignore
   */
  onExited: t.func,
  /**
   * @ignore
   */
  onExiting: t.func,
  /**
   * The transition orientation.
   * @default 'vertical'
   */
  orientation: t.oneOf(["horizontal", "vertical"]),
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   *
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default duration.standard
   */
  timeout: t.oneOfType([t.oneOf(["auto"]), t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })])
});
Oa.muiSupportAuto = !0;
const $a = Oa;
function $b(e) {
  return ee("MuiPaper", e);
}
const Sb = ne("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]), GI = Sb, Rb = ["className", "component", "elevation", "square", "variant"], wb = (e) => {
  const {
    square: o,
    elevation: n,
    variant: r,
    classes: s
  } = e, a = {
    root: ["root", r, !o && "rounded", r === "elevation" && `elevation${n}`]
  };
  return te(a, $b, s);
}, Eb = P("div", {
  name: "MuiPaper",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], !n.square && o.rounded, n.variant === "elevation" && o[`elevation${n.elevation}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => {
  var n;
  return u({
    backgroundColor: (e.vars || e).palette.background.paper,
    color: (e.vars || e).palette.text.primary,
    transition: e.transitions.create("box-shadow")
  }, !o.square && {
    borderRadius: e.shape.borderRadius
  }, o.variant === "outlined" && {
    border: `1px solid ${(e.vars || e).palette.divider}`
  }, o.variant === "elevation" && u({
    boxShadow: (e.vars || e).shadows[o.elevation]
  }, !e.vars && e.palette.mode === "dark" && {
    backgroundImage: `linear-gradient(${Pe("#fff", ai(o.elevation))}, ${Pe("#fff", ai(o.elevation))})`
  }, e.vars && {
    backgroundImage: (n = e.vars.overlays) == null ? void 0 : n[o.elevation]
  }));
}), $c = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiPaper"
  }), {
    className: s,
    component: a = "div",
    elevation: i = 1,
    square: l = !1,
    variant: c = "elevation"
  } = r, d = z(r, Rb), p = u({}, r, {
    component: a,
    elevation: i,
    square: l,
    variant: c
  }), m = wb(p);
  return process.env.NODE_ENV !== "production" && rt().shadows[i] === void 0 && console.error([`MUI: The elevation provided <Paper elevation={${i}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${i}]\` is defined.`].join(`
`)), /* @__PURE__ */ x(Eb, u({
    as: a,
    ownerState: p,
    className: D(m.root, s),
    ref: n
  }, d));
});
process.env.NODE_ENV !== "production" && ($c.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Shadow depth, corresponds to `dp` in the spec.
   * It accepts values between 0 and 24 inclusive.
   * @default 1
   */
  elevation: ut(lt, (e) => {
    const {
      elevation: o,
      variant: n
    } = e;
    return o > 0 && n === "outlined" ? new Error(`MUI: Combining \`elevation={${o}}\` with \`variant="${n}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`) : null;
  }),
  /**
   * If `true`, rounded corners are disabled.
   * @default false
   */
  square: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'elevation'
   */
  variant: t.oneOfType([t.oneOf(["elevation", "outlined"]), t.string])
});
const Gt = $c, Sc = /* @__PURE__ */ f.createContext({});
process.env.NODE_ENV !== "production" && (Sc.displayName = "AccordionContext");
const Rc = Sc;
function Jt(e) {
  return typeof e == "string";
}
function fn(e, o, n) {
  return e === void 0 || Jt(e) ? o : u({}, o, {
    ownerState: u({}, o.ownerState, n)
  });
}
function Pb(e, o, n = (r, s) => r === s) {
  return e.length === o.length && e.every((r, s) => n(r, o[s]));
}
const Nb = {
  disableDefaultClasses: !1
}, wc = /* @__PURE__ */ f.createContext(Nb);
process.env.NODE_ENV !== "production" && (wc.displayName = "ClassNameConfiguratorContext");
function Ib(e) {
  const {
    disableDefaultClasses: o
  } = f.useContext(wc);
  return (n) => o ? "" : e(n);
}
function nn(e, o = []) {
  if (e === void 0)
    return {};
  const n = {};
  return Object.keys(e).filter((r) => r.match(/^on[A-Z]/) && typeof e[r] == "function" && !o.includes(r)).forEach((r) => {
    n[r] = e[r];
  }), n;
}
function Ec(e, o, n) {
  return typeof e == "function" ? e(o, n) : e;
}
function gi(e) {
  if (e === void 0)
    return {};
  const o = {};
  return Object.keys(e).filter((n) => !(n.match(/^on[A-Z]/) && typeof e[n] == "function")).forEach((n) => {
    o[n] = e[n];
  }), o;
}
function Pc(e) {
  const {
    getSlotProps: o,
    additionalProps: n,
    externalSlotProps: r,
    externalForwardedProps: s,
    className: a
  } = e;
  if (!o) {
    const h = D(n == null ? void 0 : n.className, a, s == null ? void 0 : s.className, r == null ? void 0 : r.className), v = u({}, n == null ? void 0 : n.style, s == null ? void 0 : s.style, r == null ? void 0 : r.style), C = u({}, n, s, r);
    return h.length > 0 && (C.className = h), Object.keys(v).length > 0 && (C.style = v), {
      props: C,
      internalRef: void 0
    };
  }
  const i = nn(u({}, s, r)), l = gi(r), c = gi(s), d = o(i), p = D(d == null ? void 0 : d.className, n == null ? void 0 : n.className, a, s == null ? void 0 : s.className, r == null ? void 0 : r.className), m = u({}, d == null ? void 0 : d.style, n == null ? void 0 : n.style, s == null ? void 0 : s.style, r == null ? void 0 : r.style), b = u({}, d, n, c, l);
  return p.length > 0 && (b.className = p), Object.keys(m).length > 0 && (b.style = m), {
    props: b,
    internalRef: d.ref
  };
}
const kb = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
function at(e) {
  var o;
  const {
    elementType: n,
    externalSlotProps: r,
    ownerState: s,
    skipResolvingSlotProps: a = !1
  } = e, i = z(e, kb), l = a ? {} : Ec(r, s), {
    props: c,
    internalRef: d
  } = Pc(u({}, i, {
    externalSlotProps: l
  })), p = Ve(d, l == null ? void 0 : l.ref, (o = e.additionalProps) == null ? void 0 : o.ref);
  return fn(n, u({}, c, {
    ref: p
  }), s);
}
const Mb = ["className", "elementType", "ownerState", "externalForwardedProps", "getSlotOwnerState", "internalForwardedProps"], Bb = ["component", "slots", "slotProps"], Lb = ["component"];
function Xr(e, o) {
  const {
    className: n,
    elementType: r,
    ownerState: s,
    externalForwardedProps: a,
    getSlotOwnerState: i,
    internalForwardedProps: l
  } = o, c = z(o, Mb), {
    component: d,
    slots: p = {
      [e]: void 0
    },
    slotProps: m = {
      [e]: void 0
    }
  } = a, b = z(a, Bb), h = p[e] || r, v = Ec(m[e], s), C = Pc(u({
    className: n
  }, c, {
    externalForwardedProps: e === "root" ? b : void 0,
    externalSlotProps: v
  })), {
    props: {
      component: g
    },
    internalRef: y
  } = C, $ = z(C.props, Lb), T = Ve(y, v == null ? void 0 : v.ref, o.ref), O = i ? i($) : {}, S = u({}, s, O), R = e === "root" ? g || d : g, w = fn(h, u({}, e === "root" && !d && !p[e] && l, e !== "root" && !p[e] && l, $, R && {
    as: R
  }, {
    ref: T
  }), S);
  return Object.keys(O).forEach((E) => {
    delete w[E];
  }), [h, w];
}
function Db(e) {
  return ee("MuiAccordion", e);
}
const Ab = ne("MuiAccordion", ["root", "rounded", "expanded", "disabled", "gutters", "region"]), Rr = Ab, Fb = ["children", "className", "defaultExpanded", "disabled", "disableGutters", "expanded", "onChange", "square", "slots", "slotProps", "TransitionComponent", "TransitionProps"], jb = (e) => {
  const {
    classes: o,
    square: n,
    expanded: r,
    disabled: s,
    disableGutters: a
  } = e;
  return te({
    root: ["root", !n && "rounded", r && "expanded", s && "disabled", !a && "gutters"],
    region: ["region"]
  }, Db, o);
}, _b = P(Gt, {
  name: "MuiAccordion",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${Rr.region}`]: o.region
    }, o.root, !n.square && o.rounded, !n.disableGutters && o.gutters];
  }
})(({
  theme: e
}) => {
  const o = {
    duration: e.transitions.duration.shortest
  };
  return {
    position: "relative",
    transition: e.transitions.create(["margin"], o),
    overflowAnchor: "none",
    // Keep the same scrolling position
    "&::before": {
      position: "absolute",
      left: 0,
      top: -1,
      right: 0,
      height: 1,
      content: '""',
      opacity: 1,
      backgroundColor: (e.vars || e).palette.divider,
      transition: e.transitions.create(["opacity", "background-color"], o)
    },
    "&:first-of-type": {
      "&::before": {
        display: "none"
      }
    },
    [`&.${Rr.expanded}`]: {
      "&::before": {
        opacity: 0
      },
      "&:first-of-type": {
        marginTop: 0
      },
      "&:last-of-type": {
        marginBottom: 0
      },
      "& + &": {
        "&::before": {
          display: "none"
        }
      }
    },
    [`&.${Rr.disabled}`]: {
      backgroundColor: (e.vars || e).palette.action.disabledBackground
    }
  };
}, ({
  theme: e,
  ownerState: o
}) => u({}, !o.square && {
  borderRadius: 0,
  "&:first-of-type": {
    borderTopLeftRadius: (e.vars || e).shape.borderRadius,
    borderTopRightRadius: (e.vars || e).shape.borderRadius
  },
  "&:last-of-type": {
    borderBottomLeftRadius: (e.vars || e).shape.borderRadius,
    borderBottomRightRadius: (e.vars || e).shape.borderRadius,
    // Fix a rendering issue on Edge
    "@supports (-ms-ime-align: auto)": {
      borderBottomLeftRadius: 0,
      borderBottomRightRadius: 0
    }
  }
}, !o.disableGutters && {
  [`&.${Rr.expanded}`]: {
    margin: "16px 0"
  }
})), Nc = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiAccordion"
  }), {
    children: s,
    className: a,
    defaultExpanded: i = !1,
    disabled: l = !1,
    disableGutters: c = !1,
    expanded: d,
    onChange: p,
    square: m = !1,
    slots: b = {},
    slotProps: h = {},
    TransitionComponent: v,
    TransitionProps: C
  } = r, g = z(r, Fb), [y, $] = Dt({
    controlled: d,
    default: i,
    name: "Accordion",
    state: "expanded"
  }), T = f.useCallback((A) => {
    $(!y), p && p(A, !y);
  }, [y, p, $]), [O, ...S] = f.Children.toArray(s), R = f.useMemo(() => ({
    expanded: y,
    disabled: l,
    disableGutters: c,
    toggle: T
  }), [y, l, c, T]), w = u({}, r, {
    square: m,
    disabled: l,
    disableGutters: c,
    expanded: y
  }), E = jb(w), N = u({
    transition: v
  }, b), M = u({
    transition: C
  }, h), [I, F] = Xr("transition", {
    elementType: $a,
    externalForwardedProps: {
      slots: N,
      slotProps: M
    },
    ownerState: w
  });
  return /* @__PURE__ */ Ce(_b, u({
    className: D(E.root, a),
    ref: n,
    ownerState: w,
    square: m
  }, g, {
    children: [/* @__PURE__ */ x(Rc.Provider, {
      value: R,
      children: O
    }), /* @__PURE__ */ x(I, u({
      in: y,
      timeout: "auto"
    }, F, {
      children: /* @__PURE__ */ x("div", {
        "aria-labelledby": O.props.id,
        id: O.props["aria-controls"],
        role: "region",
        className: E.region,
        children: S
      })
    }))]
  }));
});
process.env.NODE_ENV !== "production" && (Nc.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: ut(t.node.isRequired, (e) => {
    const o = f.Children.toArray(e.children)[0];
    return to.isFragment(o) ? new Error("MUI: The Accordion doesn't accept a Fragment as a child. Consider providing an array instead.") : /* @__PURE__ */ f.isValidElement(o) ? null : new Error("MUI: Expected the first child of Accordion to be a valid element.");
  }),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, expands the accordion by default.
   * @default false
   */
  defaultExpanded: t.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, it removes the margin between two expanded accordion items and the increase of height.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * If `true`, expands the accordion, otherwise collapse it.
   * Setting this prop enables control over the accordion.
   */
  expanded: t.bool,
  /**
   * Callback fired when the expand/collapse state is changed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {boolean} expanded The `expanded` state of the accordion.
   */
  onChange: t.func,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    transition: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    transition: t.elementType
  }),
  /**
   * If `true`, rounded corners are disabled.
   * @default false
   */
  square: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @deprecated Use `slots.transition` instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   */
  TransitionComponent: t.elementType,
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @deprecated Use `slotProps.transition` instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   */
  TransitionProps: t.object
});
const KI = Nc;
function zb(e) {
  return ee("MuiAccordionActions", e);
}
const Vb = ne("MuiAccordionActions", ["root", "spacing"]), YI = Vb, Ub = ["className", "disableSpacing"], Wb = (e) => {
  const {
    classes: o,
    disableSpacing: n
  } = e;
  return te({
    root: ["root", !n && "spacing"]
  }, zb, o);
}, Hb = P("div", {
  name: "MuiAccordionActions",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, !n.disableSpacing && o.spacing];
  }
})(({
  ownerState: e
}) => u({
  display: "flex",
  alignItems: "center",
  padding: 8,
  justifyContent: "flex-end"
}, !e.disableSpacing && {
  "& > :not(style) ~ :not(style)": {
    marginLeft: 8
  }
})), Ic = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiAccordionActions"
  }), {
    className: s,
    disableSpacing: a = !1
  } = r, i = z(r, Ub), l = u({}, r, {
    disableSpacing: a
  }), c = Wb(l);
  return /* @__PURE__ */ x(Hb, u({
    className: D(c.root, s),
    ref: n,
    ownerState: l
  }, i));
});
process.env.NODE_ENV !== "production" && (Ic.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the actions do not have additional margin.
   * @default false
   */
  disableSpacing: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const XI = Ic;
function qb(e) {
  return ee("MuiAccordionDetails", e);
}
const Gb = ne("MuiAccordionDetails", ["root"]), QI = Gb, Kb = ["className"], Yb = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"]
  }, qb, o);
}, Xb = P("div", {
  name: "MuiAccordionDetails",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(({
  theme: e
}) => ({
  padding: e.spacing(1, 2, 2)
})), kc = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiAccordionDetails"
  }), {
    className: s
  } = r, a = z(r, Kb), i = r, l = Yb(i);
  return /* @__PURE__ */ x(Xb, u({
    className: D(l.root, s),
    ref: n,
    ownerState: i
  }, a));
});
process.env.NODE_ENV !== "production" && (kc.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const ZI = kc;
function Mc(e) {
  const {
    className: o,
    classes: n,
    pulsate: r = !1,
    rippleX: s,
    rippleY: a,
    rippleSize: i,
    in: l,
    onExited: c,
    timeout: d
  } = e, [p, m] = f.useState(!1), b = D(o, n.ripple, n.rippleVisible, r && n.ripplePulsate), h = {
    width: i,
    height: i,
    top: -(i / 2) + a,
    left: -(i / 2) + s
  }, v = D(n.child, p && n.childLeaving, r && n.childPulsate);
  return !l && !p && m(!0), f.useEffect(() => {
    if (!l && c != null) {
      const C = setTimeout(c, d);
      return () => {
        clearTimeout(C);
      };
    }
  }, [c, l, d]), /* @__PURE__ */ x("span", {
    className: b,
    style: h,
    children: /* @__PURE__ */ x("span", {
      className: v
    })
  });
}
process.env.NODE_ENV !== "production" && (Mc.propTypes = {
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object.isRequired,
  className: t.string,
  /**
   * @ignore - injected from TransitionGroup
   */
  in: t.bool,
  /**
   * @ignore - injected from TransitionGroup
   */
  onExited: t.func,
  /**
   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
   */
  pulsate: t.bool,
  /**
   * Diameter of the ripple.
   */
  rippleSize: t.number,
  /**
   * Horizontal position of the ripple center.
   */
  rippleX: t.number,
  /**
   * Vertical position of the ripple center.
   */
  rippleY: t.number,
  /**
   * exit delay
   */
  timeout: t.number.isRequired
});
function JI(e) {
  return ee("MuiTouchRipple", e);
}
const Qb = ne("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]), Vt = Qb, Zb = ["center", "classes", "className"];
let hs = (e) => e, hi, vi, yi, Ci;
const sa = 550, Jb = 80, eg = go(hi || (hi = hs`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)), tg = go(vi || (vi = hs`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)), og = go(yi || (yi = hs`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)), ng = P("span", {
  name: "MuiTouchRipple",
  slot: "Root"
})({
  overflow: "hidden",
  pointerEvents: "none",
  position: "absolute",
  zIndex: 0,
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  borderRadius: "inherit"
}), rg = P(Mc, {
  name: "MuiTouchRipple",
  slot: "Ripple"
})(Ci || (Ci = hs`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), Vt.rippleVisible, eg, sa, ({
  theme: e
}) => e.transitions.easing.easeInOut, Vt.ripplePulsate, ({
  theme: e
}) => e.transitions.duration.shorter, Vt.child, Vt.childLeaving, tg, sa, ({
  theme: e
}) => e.transitions.easing.easeInOut, Vt.childPulsate, og, ({
  theme: e
}) => e.transitions.easing.easeInOut), Bc = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiTouchRipple"
  }), {
    center: s = !1,
    classes: a = {},
    className: i
  } = r, l = z(r, Zb), [c, d] = f.useState([]), p = f.useRef(0), m = f.useRef(null);
  f.useEffect(() => {
    m.current && (m.current(), m.current = null);
  }, [c]);
  const b = f.useRef(!1), h = yo(), v = f.useRef(null), C = f.useRef(null), g = f.useCallback((O) => {
    const {
      pulsate: S,
      rippleX: R,
      rippleY: w,
      rippleSize: E,
      cb: N
    } = O;
    d((M) => [...M, /* @__PURE__ */ x(rg, {
      classes: {
        ripple: D(a.ripple, Vt.ripple),
        rippleVisible: D(a.rippleVisible, Vt.rippleVisible),
        ripplePulsate: D(a.ripplePulsate, Vt.ripplePulsate),
        child: D(a.child, Vt.child),
        childLeaving: D(a.childLeaving, Vt.childLeaving),
        childPulsate: D(a.childPulsate, Vt.childPulsate)
      },
      timeout: sa,
      pulsate: S,
      rippleX: R,
      rippleY: w,
      rippleSize: E
    }, p.current)]), p.current += 1, m.current = N;
  }, [a]), y = f.useCallback((O = {}, S = {}, R = () => {
  }) => {
    const {
      pulsate: w = !1,
      center: E = s || S.pulsate,
      fakeElement: N = !1
      // For test purposes
    } = S;
    if ((O == null ? void 0 : O.type) === "mousedown" && b.current) {
      b.current = !1;
      return;
    }
    (O == null ? void 0 : O.type) === "touchstart" && (b.current = !0);
    const M = N ? null : C.current, I = M ? M.getBoundingClientRect() : {
      width: 0,
      height: 0,
      left: 0,
      top: 0
    };
    let F, A, B;
    if (E || O === void 0 || O.clientX === 0 && O.clientY === 0 || !O.clientX && !O.touches)
      F = Math.round(I.width / 2), A = Math.round(I.height / 2);
    else {
      const {
        clientX: j,
        clientY: V
      } = O.touches && O.touches.length > 0 ? O.touches[0] : O;
      F = Math.round(j - I.left), A = Math.round(V - I.top);
    }
    if (E)
      B = Math.sqrt((2 * I.width ** 2 + I.height ** 2) / 3), B % 2 === 0 && (B += 1);
    else {
      const j = Math.max(Math.abs((M ? M.clientWidth : 0) - F), F) * 2 + 2, V = Math.max(Math.abs((M ? M.clientHeight : 0) - A), A) * 2 + 2;
      B = Math.sqrt(j ** 2 + V ** 2);
    }
    O != null && O.touches ? v.current === null && (v.current = () => {
      g({
        pulsate: w,
        rippleX: F,
        rippleY: A,
        rippleSize: B,
        cb: R
      });
    }, h.start(Jb, () => {
      v.current && (v.current(), v.current = null);
    })) : g({
      pulsate: w,
      rippleX: F,
      rippleY: A,
      rippleSize: B,
      cb: R
    });
  }, [s, g, h]), $ = f.useCallback(() => {
    y({}, {
      pulsate: !0
    });
  }, [y]), T = f.useCallback((O, S) => {
    if (h.clear(), (O == null ? void 0 : O.type) === "touchend" && v.current) {
      v.current(), v.current = null, h.start(0, () => {
        T(O, S);
      });
      return;
    }
    v.current = null, d((R) => R.length > 0 ? R.slice(1) : R), m.current = S;
  }, [h]);
  return f.useImperativeHandle(n, () => ({
    pulsate: $,
    start: y,
    stop: T
  }), [$, y, T]), /* @__PURE__ */ x(ng, u({
    className: D(Vt.root, a.root, i),
    ref: C
  }, l, {
    children: /* @__PURE__ */ x(gb, {
      component: null,
      exit: !0,
      children: c
    })
  }));
});
process.env.NODE_ENV !== "production" && (Bc.propTypes = {
  /**
   * If `true`, the ripple starts at the center of the component
   * rather than at the point of interaction.
   */
  center: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string
});
const sg = Bc;
function ag(e) {
  return ee("MuiButtonBase", e);
}
const ig = ne("MuiButtonBase", ["root", "disabled", "focusVisible"]), lg = ig, cg = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"], ug = (e) => {
  const {
    disabled: o,
    focusVisible: n,
    focusVisibleClassName: r,
    classes: s
  } = e, i = te({
    root: ["root", o && "disabled", n && "focusVisible"]
  }, ag, s);
  return n && r && (i.root += ` ${r}`), i;
}, dg = P("button", {
  name: "MuiButtonBase",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  display: "inline-flex",
  alignItems: "center",
  justifyContent: "center",
  position: "relative",
  boxSizing: "border-box",
  WebkitTapHighlightColor: "transparent",
  backgroundColor: "transparent",
  // Reset default value
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0,
  border: 0,
  margin: 0,
  // Remove the margin in Safari
  borderRadius: 0,
  padding: 0,
  // Remove the padding in Firefox
  cursor: "pointer",
  userSelect: "none",
  verticalAlign: "middle",
  MozAppearance: "none",
  // Reset
  WebkitAppearance: "none",
  // Reset
  textDecoration: "none",
  // So we take precedent over the style of a native <a /> element.
  color: "inherit",
  "&::-moz-focus-inner": {
    borderStyle: "none"
    // Remove Firefox dotted outline.
  },
  [`&.${lg.disabled}`]: {
    pointerEvents: "none",
    // Disable link interactions
    cursor: "default"
  },
  "@media print": {
    colorAdjust: "exact"
  }
}), Lc = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiButtonBase"
  }), {
    action: s,
    centerRipple: a = !1,
    children: i,
    className: l,
    component: c = "button",
    disabled: d = !1,
    disableRipple: p = !1,
    disableTouchRipple: m = !1,
    focusRipple: b = !1,
    LinkComponent: h = "a",
    onBlur: v,
    onClick: C,
    onContextMenu: g,
    onDragLeave: y,
    onFocus: $,
    onFocusVisible: T,
    onKeyDown: O,
    onKeyUp: S,
    onMouseDown: R,
    onMouseLeave: w,
    onMouseUp: E,
    onTouchEnd: N,
    onTouchMove: M,
    onTouchStart: I,
    tabIndex: F = 0,
    TouchRippleProps: A,
    touchRippleRef: B,
    type: j
  } = r, V = z(r, cg), U = f.useRef(null), _ = f.useRef(null), W = Ve(_, B), {
    isFocusVisibleRef: de,
    onFocus: Te,
    onBlur: $e,
    ref: ie
  } = br(), [se, ue] = f.useState(!1);
  d && se && ue(!1), f.useImperativeHandle(s, () => ({
    focusVisible: () => {
      ue(!0), U.current.focus();
    }
  }), []);
  const [Z, he] = f.useState(!1);
  f.useEffect(() => {
    he(!0);
  }, []);
  const q = Z && !p && !d;
  f.useEffect(() => {
    se && b && !p && Z && _.current.pulsate();
  }, [p, b, se, Z]);
  function le(H, pe, Ne = m) {
    return nt((Le) => (pe && pe(Le), !Ne && _.current && _.current[H](Le), !0));
  }
  const Oe = le("start", R), fe = le("stop", g), me = le("stop", y), ve = le("stop", E), Y = le("stop", (H) => {
    se && H.preventDefault(), w && w(H);
  }), re = le("start", I), X = le("stop", N), Ee = le("stop", M), be = le("stop", (H) => {
    $e(H), de.current === !1 && ue(!1), v && v(H);
  }, !1), De = nt((H) => {
    U.current || (U.current = H.currentTarget), Te(H), de.current === !0 && (ue(!0), T && T(H)), $ && $(H);
  }), Ie = () => {
    const H = U.current;
    return c && c !== "button" && !(H.tagName === "A" && H.href);
  }, Se = f.useRef(!1), Me = nt((H) => {
    b && !Se.current && se && _.current && H.key === " " && (Se.current = !0, _.current.stop(H, () => {
      _.current.start(H);
    })), H.target === H.currentTarget && Ie() && H.key === " " && H.preventDefault(), O && O(H), H.target === H.currentTarget && Ie() && H.key === "Enter" && !d && (H.preventDefault(), C && C(H));
  }), Fe = nt((H) => {
    b && H.key === " " && _.current && se && !H.defaultPrevented && (Se.current = !1, _.current.stop(H, () => {
      _.current.pulsate(H);
    })), S && S(H), C && H.target === H.currentTarget && Ie() && H.key === " " && !H.defaultPrevented && C(H);
  });
  let Ae = c;
  Ae === "button" && (V.href || V.to) && (Ae = h);
  const Ye = {};
  Ae === "button" ? (Ye.type = j === void 0 ? "button" : j, Ye.disabled = d) : (!V.href && !V.to && (Ye.role = "button"), d && (Ye["aria-disabled"] = d));
  const et = Ve(n, ie, U);
  process.env.NODE_ENV !== "production" && f.useEffect(() => {
    q && !_.current && console.error(["MUI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join(`
`));
  }, [q]);
  const tt = u({}, r, {
    centerRipple: a,
    component: c,
    disabled: d,
    disableRipple: p,
    disableTouchRipple: m,
    focusRipple: b,
    tabIndex: F,
    focusVisible: se
  }), G = ug(tt);
  return /* @__PURE__ */ Ce(dg, u({
    as: Ae,
    className: D(G.root, l),
    ownerState: tt,
    onBlur: be,
    onClick: C,
    onContextMenu: fe,
    onFocus: De,
    onKeyDown: Me,
    onKeyUp: Fe,
    onMouseDown: Oe,
    onMouseLeave: Y,
    onMouseUp: ve,
    onDragLeave: me,
    onTouchEnd: X,
    onTouchMove: Ee,
    onTouchStart: re,
    ref: et,
    tabIndex: d ? -1 : F,
    type: j
  }, Ye, V, {
    children: [i, q ? (
      /* TouchRipple is only needed client-side, x2 boost on the server. */
      /* @__PURE__ */ x(sg, u({
        ref: W,
        center: a
      }, A))
    ) : null]
  }));
});
process.env.NODE_ENV !== "production" && (Lc.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions.
   * It currently only supports `focusVisible()` action.
   */
  action: yt,
  /**
   * If `true`, the ripples are centered.
   * They won't start at the cursor interaction position.
   * @default false
   */
  centerRipple: t.bool,
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: jo,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * If `true`, the touch ripple effect is disabled.
   * @default false
   */
  disableTouchRipple: t.bool,
  /**
   * If `true`, the base button will have a keyboard focus ripple.
   * @default false
   */
  focusRipple: t.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: t.string,
  /**
   * @ignore
   */
  href: t.any,
  /**
   * The component used to render a link when the `href` prop is provided.
   * @default 'a'
   */
  LinkComponent: t.elementType,
  /**
   * @ignore
   */
  onBlur: t.func,
  /**
   * @ignore
   */
  onClick: t.func,
  /**
   * @ignore
   */
  onContextMenu: t.func,
  /**
   * @ignore
   */
  onDragLeave: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * Callback fired when the component is focused with a keyboard.
   * We trigger a `onFocus` callback too.
   */
  onFocusVisible: t.func,
  /**
   * @ignore
   */
  onKeyDown: t.func,
  /**
   * @ignore
   */
  onKeyUp: t.func,
  /**
   * @ignore
   */
  onMouseDown: t.func,
  /**
   * @ignore
   */
  onMouseLeave: t.func,
  /**
   * @ignore
   */
  onMouseUp: t.func,
  /**
   * @ignore
   */
  onTouchEnd: t.func,
  /**
   * @ignore
   */
  onTouchMove: t.func,
  /**
   * @ignore
   */
  onTouchStart: t.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * @default 0
   */
  tabIndex: t.number,
  /**
   * Props applied to the `TouchRipple` element.
   */
  TouchRippleProps: t.object,
  /**
   * A ref that points to the `TouchRipple` element.
   */
  touchRippleRef: t.oneOfType([t.func, t.shape({
    current: t.shape({
      pulsate: t.func.isRequired,
      start: t.func.isRequired,
      stop: t.func.isRequired
    })
  })]),
  /**
   * @ignore
   */
  type: t.oneOfType([t.oneOf(["button", "reset", "submit"]), t.string])
});
const pt = Lc;
function pg(e) {
  return ee("MuiAccordionSummary", e);
}
const fg = ne("MuiAccordionSummary", ["root", "expanded", "focusVisible", "disabled", "gutters", "contentGutters", "content", "expandIconWrapper"]), mn = fg, mg = ["children", "className", "expandIcon", "focusVisibleClassName", "onClick"], bg = (e) => {
  const {
    classes: o,
    expanded: n,
    disabled: r,
    disableGutters: s
  } = e;
  return te({
    root: ["root", n && "expanded", r && "disabled", !s && "gutters"],
    focusVisible: ["focusVisible"],
    content: ["content", n && "expanded", !s && "contentGutters"],
    expandIconWrapper: ["expandIconWrapper", n && "expanded"]
  }, pg, o);
}, gg = P(pt, {
  name: "MuiAccordionSummary",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(({
  theme: e,
  ownerState: o
}) => {
  const n = {
    duration: e.transitions.duration.shortest
  };
  return u({
    display: "flex",
    minHeight: 48,
    padding: e.spacing(0, 2),
    transition: e.transitions.create(["min-height", "background-color"], n),
    [`&.${mn.focusVisible}`]: {
      backgroundColor: (e.vars || e).palette.action.focus
    },
    [`&.${mn.disabled}`]: {
      opacity: (e.vars || e).palette.action.disabledOpacity
    },
    [`&:hover:not(.${mn.disabled})`]: {
      cursor: "pointer"
    }
  }, !o.disableGutters && {
    [`&.${mn.expanded}`]: {
      minHeight: 64
    }
  });
}), hg = P("div", {
  name: "MuiAccordionSummary",
  slot: "Content",
  overridesResolver: (e, o) => o.content
})(({
  theme: e,
  ownerState: o
}) => u({
  display: "flex",
  flexGrow: 1,
  margin: "12px 0"
}, !o.disableGutters && {
  transition: e.transitions.create(["margin"], {
    duration: e.transitions.duration.shortest
  }),
  [`&.${mn.expanded}`]: {
    margin: "20px 0"
  }
})), vg = P("div", {
  name: "MuiAccordionSummary",
  slot: "ExpandIconWrapper",
  overridesResolver: (e, o) => o.expandIconWrapper
})(({
  theme: e
}) => ({
  display: "flex",
  color: (e.vars || e).palette.action.active,
  transform: "rotate(0deg)",
  transition: e.transitions.create("transform", {
    duration: e.transitions.duration.shortest
  }),
  [`&.${mn.expanded}`]: {
    transform: "rotate(180deg)"
  }
})), Dc = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiAccordionSummary"
  }), {
    children: s,
    className: a,
    expandIcon: i,
    focusVisibleClassName: l,
    onClick: c
  } = r, d = z(r, mg), {
    disabled: p = !1,
    disableGutters: m,
    expanded: b,
    toggle: h
  } = f.useContext(Rc), v = (y) => {
    h && h(y), c && c(y);
  }, C = u({}, r, {
    expanded: b,
    disabled: p,
    disableGutters: m
  }), g = bg(C);
  return /* @__PURE__ */ Ce(gg, u({
    focusRipple: !1,
    disableRipple: !0,
    disabled: p,
    component: "div",
    "aria-expanded": b,
    className: D(g.root, a),
    focusVisibleClassName: D(g.focusVisible, l),
    onClick: v,
    ref: n,
    ownerState: C
  }, d, {
    children: [/* @__PURE__ */ x(hg, {
      className: g.content,
      ownerState: C,
      children: s
    }), i && /* @__PURE__ */ x(vg, {
      className: g.expandIconWrapper,
      ownerState: C,
      children: i
    })]
  }));
});
process.env.NODE_ENV !== "production" && (Dc.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The icon to display as the expand indicator.
   */
  expandIcon: t.node,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: t.string,
  /**
   * @ignore
   */
  onClick: t.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const ek = Dc;
function yg(e) {
  const {
    badgeContent: o,
    invisible: n = !1,
    max: r = 99,
    showZero: s = !1
  } = e, a = ha({
    badgeContent: o,
    max: r
  });
  let i = n;
  n === !1 && o === 0 && !s && (i = !0);
  const {
    badgeContent: l,
    max: c = r
  } = i ? a : e, d = l && Number(l) > c ? `${c}+` : l;
  return {
    badgeContent: l,
    invisible: i,
    max: c,
    displayValue: d
  };
}
const Ac = "base";
function Cg(e) {
  return `${Ac}--${e}`;
}
function xg(e, o) {
  return `${Ac}-${e}-${o}`;
}
function Fc(e, o) {
  const n = pf[o];
  return n ? Cg(n) : xg(e, o);
}
function Tg(e, o) {
  const n = {};
  return o.forEach((r) => {
    n[r] = Fc(e, r);
  }), n;
}
function xi(e) {
  return e.substring(2).toLowerCase();
}
function Og(e, o) {
  return o.documentElement.clientWidth < e.clientX || o.documentElement.clientHeight < e.clientY;
}
function Qr(e) {
  const {
    children: o,
    disableReactTree: n = !1,
    mouseEvent: r = "onClick",
    onClickAway: s,
    touchEvent: a = "onTouchEnd"
  } = e, i = f.useRef(!1), l = f.useRef(null), c = f.useRef(!1), d = f.useRef(!1);
  f.useEffect(() => (setTimeout(() => {
    c.current = !0;
  }, 0), () => {
    c.current = !1;
  }), []);
  const p = Ve(
    // @ts-expect-error TODO upstream fix
    o.ref,
    l
  ), m = nt((v) => {
    const C = d.current;
    d.current = !1;
    const g = Xe(l.current);
    if (!c.current || !l.current || "clientX" in v && Og(v, g))
      return;
    if (i.current) {
      i.current = !1;
      return;
    }
    let y;
    v.composedPath ? y = v.composedPath().indexOf(l.current) > -1 : y = !g.documentElement.contains(
      // @ts-expect-error returns `false` as intended when not dispatched from a Node
      v.target
    ) || l.current.contains(
      // @ts-expect-error returns `false` as intended when not dispatched from a Node
      v.target
    ), !y && (n || !C) && s(v);
  }), b = (v) => (C) => {
    d.current = !0;
    const g = o.props[v];
    g && g(C);
  }, h = {
    ref: p
  };
  return a !== !1 && (h[a] = b(a)), f.useEffect(() => {
    if (a !== !1) {
      const v = xi(a), C = Xe(l.current), g = () => {
        i.current = !0;
      };
      return C.addEventListener(v, m), C.addEventListener("touchmove", g), () => {
        C.removeEventListener(v, m), C.removeEventListener("touchmove", g);
      };
    }
  }, [m, a]), r !== !1 && (h[r] = b(r)), f.useEffect(() => {
    if (r !== !1) {
      const v = xi(r), C = Xe(l.current);
      return C.addEventListener(v, m), () => {
        C.removeEventListener(v, m);
      };
    }
  }, [m, r]), /* @__PURE__ */ x(f.Fragment, {
    children: /* @__PURE__ */ f.cloneElement(o, h)
  });
}
process.env.NODE_ENV !== "production" && (Qr.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The wrapped element.
   */
  children: _o.isRequired,
  /**
   * If `true`, the React tree is ignored and only the DOM tree is considered.
   * This prop changes how portaled elements are handled.
   * @default false
   */
  disableReactTree: t.bool,
  /**
   * The mouse event to listen to. You can disable the listener by providing `false`.
   * @default 'onClick'
   */
  mouseEvent: t.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", !1]),
  /**
   * Callback fired when a "click away" event is detected.
   */
  onClickAway: t.func.isRequired,
  /**
   * The touch event to listen to. You can disable the listener by providing `false`.
   * @default 'onTouchEnd'
   */
  touchEvent: t.oneOf(["onTouchEnd", "onTouchStart", !1])
});
process.env.NODE_ENV !== "production" && (Qr["propTypes"] = dr(Qr.propTypes));
const $g = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
function Sg(e) {
  const o = parseInt(e.getAttribute("tabindex") || "", 10);
  return Number.isNaN(o) ? e.contentEditable === "true" || (e.nodeName === "AUDIO" || e.nodeName === "VIDEO" || e.nodeName === "DETAILS") && e.getAttribute("tabindex") === null ? 0 : e.tabIndex : o;
}
function Rg(e) {
  if (e.tagName !== "INPUT" || e.type !== "radio" || !e.name)
    return !1;
  const o = (r) => e.ownerDocument.querySelector(`input[type="radio"]${r}`);
  let n = o(`[name="${e.name}"]:checked`);
  return n || (n = o(`[name="${e.name}"]`)), n !== e;
}
function wg(e) {
  return !(e.disabled || e.tagName === "INPUT" && e.type === "hidden" || Rg(e));
}
function Eg(e) {
  const o = [], n = [];
  return Array.from(e.querySelectorAll($g)).forEach((r, s) => {
    const a = Sg(r);
    a === -1 || !wg(r) || (a === 0 ? o.push(r) : n.push({
      documentOrder: s,
      tabIndex: a,
      node: r
    }));
  }), n.sort((r, s) => r.tabIndex === s.tabIndex ? r.documentOrder - s.documentOrder : r.tabIndex - s.tabIndex).map((r) => r.node).concat(o);
}
function Pg() {
  return !0;
}
function Zr(e) {
  const {
    children: o,
    disableAutoFocus: n = !1,
    disableEnforceFocus: r = !1,
    disableRestoreFocus: s = !1,
    getTabbable: a = Eg,
    isEnabled: i = Pg,
    open: l
  } = e, c = f.useRef(!1), d = f.useRef(null), p = f.useRef(null), m = f.useRef(null), b = f.useRef(null), h = f.useRef(!1), v = f.useRef(null), C = Ve(o.ref, v), g = f.useRef(null);
  f.useEffect(() => {
    !l || !v.current || (h.current = !n);
  }, [n, l]), f.useEffect(() => {
    if (!l || !v.current)
      return;
    const T = Xe(v.current);
    return v.current.contains(T.activeElement) || (v.current.hasAttribute("tabIndex") || (process.env.NODE_ENV !== "production" && console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join(`
`)), v.current.setAttribute("tabIndex", "-1")), h.current && v.current.focus()), () => {
      s || (m.current && m.current.focus && (c.current = !0, m.current.focus()), m.current = null);
    };
  }, [l]), f.useEffect(() => {
    if (!l || !v.current)
      return;
    const T = Xe(v.current), O = (w) => {
      g.current = w, !(r || !i() || w.key !== "Tab") && T.activeElement === v.current && w.shiftKey && (c.current = !0, p.current && p.current.focus());
    }, S = () => {
      const w = v.current;
      if (w === null)
        return;
      if (!T.hasFocus() || !i() || c.current) {
        c.current = !1;
        return;
      }
      if (w.contains(T.activeElement) || r && T.activeElement !== d.current && T.activeElement !== p.current)
        return;
      if (T.activeElement !== b.current)
        b.current = null;
      else if (b.current !== null)
        return;
      if (!h.current)
        return;
      let E = [];
      if ((T.activeElement === d.current || T.activeElement === p.current) && (E = a(v.current)), E.length > 0) {
        var N, M;
        const I = !!((N = g.current) != null && N.shiftKey && ((M = g.current) == null ? void 0 : M.key) === "Tab"), F = E[0], A = E[E.length - 1];
        typeof F != "string" && typeof A != "string" && (I ? A.focus() : F.focus());
      } else
        w.focus();
    };
    T.addEventListener("focusin", S), T.addEventListener("keydown", O, !0);
    const R = setInterval(() => {
      T.activeElement && T.activeElement.tagName === "BODY" && S();
    }, 50);
    return () => {
      clearInterval(R), T.removeEventListener("focusin", S), T.removeEventListener("keydown", O, !0);
    };
  }, [n, r, s, i, l, a]);
  const y = (T) => {
    m.current === null && (m.current = T.relatedTarget), h.current = !0, b.current = T.target;
    const O = o.props.onFocus;
    O && O(T);
  }, $ = (T) => {
    m.current === null && (m.current = T.relatedTarget), h.current = !0;
  };
  return /* @__PURE__ */ Ce(f.Fragment, {
    children: [/* @__PURE__ */ x("div", {
      tabIndex: l ? 0 : -1,
      onFocus: $,
      ref: d,
      "data-testid": "sentinelStart"
    }), /* @__PURE__ */ f.cloneElement(o, {
      ref: C,
      onFocus: y
    }), /* @__PURE__ */ x("div", {
      tabIndex: l ? 0 : -1,
      onFocus: $,
      ref: p,
      "data-testid": "sentinelEnd"
    })]
  });
}
process.env.NODE_ENV !== "production" && (Zr.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A single child content element.
   */
  children: _o,
  /**
   * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the focus trap less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: t.bool,
  /**
   * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
   *
   * Generally this should never be set to `true` as it makes the focus trap less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: t.bool,
  /**
   * If `true`, the focus trap will not restore focus to previously focused element once
   * focus trap is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: t.bool,
  /**
   * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
   * For instance, you can provide the "tabbable" npm dependency.
   * @param {HTMLElement} root
   */
  getTabbable: t.func,
  /**
   * This prop extends the `open` prop.
   * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
   * This prop should be memoized.
   * It can be used to support multiple focus trap mounted at the same time.
   * @default function defaultIsEnabled(): boolean {
   *   return true;
   * }
   */
  isEnabled: t.func,
  /**
   * If `true`, focus is locked.
   */
  open: t.bool.isRequired
});
process.env.NODE_ENV !== "production" && (Zr["propTypes"] = dr(Zr.propTypes));
function Ng(e) {
  return typeof e == "function" ? e() : e;
}
const tr = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const {
    children: r,
    container: s,
    disablePortal: a = !1
  } = o, [i, l] = f.useState(null), c = Ve(/* @__PURE__ */ f.isValidElement(r) ? r.ref : null, n);
  if (bt(() => {
    a || l(Ng(s) || document.body);
  }, [s, a]), bt(() => {
    if (i && !a)
      return Kr(n, i), () => {
        Kr(n, null);
      };
  }, [n, i, a]), a) {
    if (/* @__PURE__ */ f.isValidElement(r)) {
      const d = {
        ref: c
      };
      return /* @__PURE__ */ f.cloneElement(r, d);
    }
    return /* @__PURE__ */ x(f.Fragment, {
      children: r
    });
  }
  return /* @__PURE__ */ x(f.Fragment, {
    children: i && /* @__PURE__ */ Qs.createPortal(r, i)
  });
});
process.env.NODE_ENV !== "production" && (tr.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The children to render into the `container`.
   */
  children: t.node,
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: t.oneOfType([fo, t.func]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: t.bool
});
process.env.NODE_ENV !== "production" && (tr["propTypes"] = dr(tr.propTypes));
function Ig(e) {
  const o = Xe(e);
  return o.body === e ? Rt(e).innerWidth > o.documentElement.clientWidth : e.scrollHeight > e.clientHeight;
}
function Kn(e, o) {
  o ? e.setAttribute("aria-hidden", "true") : e.removeAttribute("aria-hidden");
}
function Ti(e) {
  return parseInt(Rt(e).getComputedStyle(e).paddingRight, 10) || 0;
}
function kg(e) {
  const n = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"].indexOf(e.tagName) !== -1, r = e.tagName === "INPUT" && e.getAttribute("type") === "hidden";
  return n || r;
}
function Oi(e, o, n, r, s) {
  const a = [o, n, ...r];
  [].forEach.call(e.children, (i) => {
    const l = a.indexOf(i) === -1, c = !kg(i);
    l && c && Kn(i, s);
  });
}
function Ms(e, o) {
  let n = -1;
  return e.some((r, s) => o(r) ? (n = s, !0) : !1), n;
}
function Mg(e, o) {
  const n = [], r = e.container;
  if (!o.disableScrollLock) {
    if (Ig(r)) {
      const i = gc(Xe(r));
      n.push({
        value: r.style.paddingRight,
        property: "padding-right",
        el: r
      }), r.style.paddingRight = `${Ti(r) + i}px`;
      const l = Xe(r).querySelectorAll(".mui-fixed");
      [].forEach.call(l, (c) => {
        n.push({
          value: c.style.paddingRight,
          property: "padding-right",
          el: c
        }), c.style.paddingRight = `${Ti(c) + i}px`;
      });
    }
    let a;
    if (r.parentNode instanceof DocumentFragment)
      a = Xe(r).body;
    else {
      const i = r.parentElement, l = Rt(r);
      a = (i == null ? void 0 : i.nodeName) === "HTML" && l.getComputedStyle(i).overflowY === "scroll" ? i : r;
    }
    n.push({
      value: a.style.overflow,
      property: "overflow",
      el: a
    }, {
      value: a.style.overflowX,
      property: "overflow-x",
      el: a
    }, {
      value: a.style.overflowY,
      property: "overflow-y",
      el: a
    }), a.style.overflow = "hidden";
  }
  return () => {
    n.forEach(({
      value: a,
      el: i,
      property: l
    }) => {
      a ? i.style.setProperty(l, a) : i.style.removeProperty(l);
    });
  };
}
function Bg(e) {
  const o = [];
  return [].forEach.call(e.children, (n) => {
    n.getAttribute("aria-hidden") === "true" && o.push(n);
  }), o;
}
class Lg {
  constructor() {
    this.containers = void 0, this.modals = void 0, this.modals = [], this.containers = [];
  }
  add(o, n) {
    let r = this.modals.indexOf(o);
    if (r !== -1)
      return r;
    r = this.modals.length, this.modals.push(o), o.modalRef && Kn(o.modalRef, !1);
    const s = Bg(n);
    Oi(n, o.mount, o.modalRef, s, !0);
    const a = Ms(this.containers, (i) => i.container === n);
    return a !== -1 ? (this.containers[a].modals.push(o), r) : (this.containers.push({
      modals: [o],
      container: n,
      restore: null,
      hiddenSiblings: s
    }), r);
  }
  mount(o, n) {
    const r = Ms(this.containers, (a) => a.modals.indexOf(o) !== -1), s = this.containers[r];
    s.restore || (s.restore = Mg(s, n));
  }
  remove(o, n = !0) {
    const r = this.modals.indexOf(o);
    if (r === -1)
      return r;
    const s = Ms(this.containers, (i) => i.modals.indexOf(o) !== -1), a = this.containers[s];
    if (a.modals.splice(a.modals.indexOf(o), 1), this.modals.splice(r, 1), a.modals.length === 0)
      a.restore && a.restore(), o.modalRef && Kn(o.modalRef, n), Oi(a.container, o.mount, o.modalRef, a.hiddenSiblings, !1), this.containers.splice(s, 1);
    else {
      const i = a.modals[a.modals.length - 1];
      i.modalRef && Kn(i.modalRef, !1);
    }
    return r;
  }
  isTopModal(o) {
    return this.modals.length > 0 && this.modals[this.modals.length - 1] === o;
  }
}
function Dg(e) {
  return typeof e == "function" ? e() : e;
}
function Ag(e) {
  return e ? e.props.hasOwnProperty("in") : !1;
}
const Fg = new Lg();
function jg(e) {
  const {
    container: o,
    disableEscapeKeyDown: n = !1,
    disableScrollLock: r = !1,
    // @ts-ignore internal logic - Base UI supports the manager as a prop too
    manager: s = Fg,
    closeAfterTransition: a = !1,
    onTransitionEnter: i,
    onTransitionExited: l,
    children: c,
    onClose: d,
    open: p,
    rootRef: m
  } = e, b = f.useRef({}), h = f.useRef(null), v = f.useRef(null), C = Ve(v, m), [g, y] = f.useState(!p), $ = Ag(c);
  let T = !0;
  (e["aria-hidden"] === "false" || e["aria-hidden"] === !1) && (T = !1);
  const O = () => Xe(h.current), S = () => (b.current.modalRef = v.current, b.current.mount = h.current, b.current), R = () => {
    s.mount(S(), {
      disableScrollLock: r
    }), v.current && (v.current.scrollTop = 0);
  }, w = nt(() => {
    const V = Dg(o) || O().body;
    s.add(S(), V), v.current && R();
  }), E = f.useCallback(() => s.isTopModal(S()), [s]), N = nt((V) => {
    h.current = V, V && (p && E() ? R() : v.current && Kn(v.current, T));
  }), M = f.useCallback(() => {
    s.remove(S(), T);
  }, [T, s]);
  f.useEffect(() => () => {
    M();
  }, [M]), f.useEffect(() => {
    p ? w() : (!$ || !a) && M();
  }, [p, M, $, a, w]);
  const I = (V) => (U) => {
    var _;
    (_ = V.onKeyDown) == null || _.call(V, U), !(U.key !== "Escape" || U.which === 229 || // Wait until IME is settled.
    !E()) && (n || (U.stopPropagation(), d && d(U, "escapeKeyDown")));
  }, F = (V) => (U) => {
    var _;
    (_ = V.onClick) == null || _.call(V, U), U.target === U.currentTarget && d && d(U, "backdropClick");
  };
  return {
    getRootProps: (V = {}) => {
      const U = nn(e);
      delete U.onTransitionEnter, delete U.onTransitionExited;
      const _ = u({}, U, V);
      return u({
        role: "presentation"
      }, _, {
        onKeyDown: I(_),
        ref: C
      });
    },
    getBackdropProps: (V = {}) => {
      const U = V;
      return u({
        "aria-hidden": !0
      }, U, {
        onClick: F(U),
        open: p
      });
    },
    getTransitionProps: () => {
      const V = () => {
        y(!1), i && i();
      }, U = () => {
        y(!0), l && l(), a && M();
      };
      return {
        onEnter: Zs(V, c == null ? void 0 : c.props.onEnter),
        onExited: Zs(U, c == null ? void 0 : c.props.onExited)
      };
    },
    rootRef: C,
    portalRef: N,
    isTopModal: E,
    exited: g,
    hasTransition: $
  };
}
function Jr(e) {
  const {
    children: o,
    defer: n = !1,
    fallback: r = null
  } = e, [s, a] = f.useState(!1);
  return bt(() => {
    n || a(!0);
  }, [n]), f.useEffect(() => {
    n && a(!0);
  }, [n]), /* @__PURE__ */ x(f.Fragment, {
    children: s ? o : r
  });
}
process.env.NODE_ENV !== "production" && (Jr.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * You can wrap a node.
   */
  children: t.node,
  /**
   * If `true`, the component will not only prevent server-side rendering.
   * It will also defer the rendering of the children into a different screen frame.
   * @default false
   */
  defer: t.bool,
  /**
   * The fallback content to display.
   * @default null
   */
  fallback: t.node
});
process.env.NODE_ENV !== "production" && (Jr["propTypes"] = dr(Jr.propTypes));
var Pt = "top", Ht = "bottom", qt = "right", Nt = "left", Sa = "auto", vr = [Pt, Ht, qt, Nt], wn = "start", or = "end", _g = "clippingParents", jc = "viewport", Bn = "popper", zg = "reference", $i = /* @__PURE__ */ vr.reduce(function(e, o) {
  return e.concat([o + "-" + wn, o + "-" + or]);
}, []), _c = /* @__PURE__ */ [].concat(vr, [Sa]).reduce(function(e, o) {
  return e.concat([o, o + "-" + wn, o + "-" + or]);
}, []), Vg = "beforeRead", Ug = "read", Wg = "afterRead", Hg = "beforeMain", qg = "main", Gg = "afterMain", Kg = "beforeWrite", Yg = "write", Xg = "afterWrite", Qg = [Vg, Ug, Wg, Hg, qg, Gg, Kg, Yg, Xg];
function bo(e) {
  return e ? (e.nodeName || "").toLowerCase() : null;
}
function At(e) {
  if (e == null)
    return window;
  if (e.toString() !== "[object Window]") {
    var o = e.ownerDocument;
    return o && o.defaultView || window;
  }
  return e;
}
function an(e) {
  var o = At(e).Element;
  return e instanceof o || e instanceof Element;
}
function Ut(e) {
  var o = At(e).HTMLElement;
  return e instanceof o || e instanceof HTMLElement;
}
function Ra(e) {
  if (typeof ShadowRoot > "u")
    return !1;
  var o = At(e).ShadowRoot;
  return e instanceof o || e instanceof ShadowRoot;
}
function Zg(e) {
  var o = e.state;
  Object.keys(o.elements).forEach(function(n) {
    var r = o.styles[n] || {}, s = o.attributes[n] || {}, a = o.elements[n];
    !Ut(a) || !bo(a) || (Object.assign(a.style, r), Object.keys(s).forEach(function(i) {
      var l = s[i];
      l === !1 ? a.removeAttribute(i) : a.setAttribute(i, l === !0 ? "" : l);
    }));
  });
}
function Jg(e) {
  var o = e.state, n = {
    popper: {
      position: o.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  return Object.assign(o.elements.popper.style, n.popper), o.styles = n, o.elements.arrow && Object.assign(o.elements.arrow.style, n.arrow), function() {
    Object.keys(o.elements).forEach(function(r) {
      var s = o.elements[r], a = o.attributes[r] || {}, i = Object.keys(o.styles.hasOwnProperty(r) ? o.styles[r] : n[r]), l = i.reduce(function(c, d) {
        return c[d] = "", c;
      }, {});
      !Ut(s) || !bo(s) || (Object.assign(s.style, l), Object.keys(a).forEach(function(c) {
        s.removeAttribute(c);
      }));
    });
  };
}
const eh = {
  name: "applyStyles",
  enabled: !0,
  phase: "write",
  fn: Zg,
  effect: Jg,
  requires: ["computeStyles"]
};
function po(e) {
  return e.split("-")[0];
}
var rn = Math.max, es = Math.min, En = Math.round;
function aa() {
  var e = navigator.userAgentData;
  return e != null && e.brands && Array.isArray(e.brands) ? e.brands.map(function(o) {
    return o.brand + "/" + o.version;
  }).join(" ") : navigator.userAgent;
}
function zc() {
  return !/^((?!chrome|android).)*safari/i.test(aa());
}
function Pn(e, o, n) {
  o === void 0 && (o = !1), n === void 0 && (n = !1);
  var r = e.getBoundingClientRect(), s = 1, a = 1;
  o && Ut(e) && (s = e.offsetWidth > 0 && En(r.width) / e.offsetWidth || 1, a = e.offsetHeight > 0 && En(r.height) / e.offsetHeight || 1);
  var i = an(e) ? At(e) : window, l = i.visualViewport, c = !zc() && n, d = (r.left + (c && l ? l.offsetLeft : 0)) / s, p = (r.top + (c && l ? l.offsetTop : 0)) / a, m = r.width / s, b = r.height / a;
  return {
    width: m,
    height: b,
    top: p,
    right: d + m,
    bottom: p + b,
    left: d,
    x: d,
    y: p
  };
}
function wa(e) {
  var o = Pn(e), n = e.offsetWidth, r = e.offsetHeight;
  return Math.abs(o.width - n) <= 1 && (n = o.width), Math.abs(o.height - r) <= 1 && (r = o.height), {
    x: e.offsetLeft,
    y: e.offsetTop,
    width: n,
    height: r
  };
}
function Vc(e, o) {
  var n = o.getRootNode && o.getRootNode();
  if (e.contains(o))
    return !0;
  if (n && Ra(n)) {
    var r = o;
    do {
      if (r && e.isSameNode(r))
        return !0;
      r = r.parentNode || r.host;
    } while (r);
  }
  return !1;
}
function To(e) {
  return At(e).getComputedStyle(e);
}
function th(e) {
  return ["table", "td", "th"].indexOf(bo(e)) >= 0;
}
function zo(e) {
  return ((an(e) ? e.ownerDocument : (
    // $FlowFixMe[prop-missing]
    e.document
  )) || window.document).documentElement;
}
function vs(e) {
  return bo(e) === "html" ? e : (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    e.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    e.parentNode || // DOM Element detected
    (Ra(e) ? e.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    zo(e)
  );
}
function Si(e) {
  return !Ut(e) || // https://github.com/popperjs/popper-core/issues/837
  To(e).position === "fixed" ? null : e.offsetParent;
}
function oh(e) {
  var o = /firefox/i.test(aa()), n = /Trident/i.test(aa());
  if (n && Ut(e)) {
    var r = To(e);
    if (r.position === "fixed")
      return null;
  }
  var s = vs(e);
  for (Ra(s) && (s = s.host); Ut(s) && ["html", "body"].indexOf(bo(s)) < 0; ) {
    var a = To(s);
    if (a.transform !== "none" || a.perspective !== "none" || a.contain === "paint" || ["transform", "perspective"].indexOf(a.willChange) !== -1 || o && a.willChange === "filter" || o && a.filter && a.filter !== "none")
      return s;
    s = s.parentNode;
  }
  return null;
}
function yr(e) {
  for (var o = At(e), n = Si(e); n && th(n) && To(n).position === "static"; )
    n = Si(n);
  return n && (bo(n) === "html" || bo(n) === "body" && To(n).position === "static") ? o : n || oh(e) || o;
}
function Ea(e) {
  return ["top", "bottom"].indexOf(e) >= 0 ? "x" : "y";
}
function Yn(e, o, n) {
  return rn(e, es(o, n));
}
function nh(e, o, n) {
  var r = Yn(e, o, n);
  return r > n ? n : r;
}
function Uc() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
function Wc(e) {
  return Object.assign({}, Uc(), e);
}
function Hc(e, o) {
  return o.reduce(function(n, r) {
    return n[r] = e, n;
  }, {});
}
var rh = function(o, n) {
  return o = typeof o == "function" ? o(Object.assign({}, n.rects, {
    placement: n.placement
  })) : o, Wc(typeof o != "number" ? o : Hc(o, vr));
};
function sh(e) {
  var o, n = e.state, r = e.name, s = e.options, a = n.elements.arrow, i = n.modifiersData.popperOffsets, l = po(n.placement), c = Ea(l), d = [Nt, qt].indexOf(l) >= 0, p = d ? "height" : "width";
  if (!(!a || !i)) {
    var m = rh(s.padding, n), b = wa(a), h = c === "y" ? Pt : Nt, v = c === "y" ? Ht : qt, C = n.rects.reference[p] + n.rects.reference[c] - i[c] - n.rects.popper[p], g = i[c] - n.rects.reference[c], y = yr(a), $ = y ? c === "y" ? y.clientHeight || 0 : y.clientWidth || 0 : 0, T = C / 2 - g / 2, O = m[h], S = $ - b[p] - m[v], R = $ / 2 - b[p] / 2 + T, w = Yn(O, R, S), E = c;
    n.modifiersData[r] = (o = {}, o[E] = w, o.centerOffset = w - R, o);
  }
}
function ah(e) {
  var o = e.state, n = e.options, r = n.element, s = r === void 0 ? "[data-popper-arrow]" : r;
  s != null && (typeof s == "string" && (s = o.elements.popper.querySelector(s), !s) || Vc(o.elements.popper, s) && (o.elements.arrow = s));
}
const ih = {
  name: "arrow",
  enabled: !0,
  phase: "main",
  fn: sh,
  effect: ah,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};
function Nn(e) {
  return e.split("-")[1];
}
var lh = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function ch(e, o) {
  var n = e.x, r = e.y, s = o.devicePixelRatio || 1;
  return {
    x: En(n * s) / s || 0,
    y: En(r * s) / s || 0
  };
}
function Ri(e) {
  var o, n = e.popper, r = e.popperRect, s = e.placement, a = e.variation, i = e.offsets, l = e.position, c = e.gpuAcceleration, d = e.adaptive, p = e.roundOffsets, m = e.isFixed, b = i.x, h = b === void 0 ? 0 : b, v = i.y, C = v === void 0 ? 0 : v, g = typeof p == "function" ? p({
    x: h,
    y: C
  }) : {
    x: h,
    y: C
  };
  h = g.x, C = g.y;
  var y = i.hasOwnProperty("x"), $ = i.hasOwnProperty("y"), T = Nt, O = Pt, S = window;
  if (d) {
    var R = yr(n), w = "clientHeight", E = "clientWidth";
    if (R === At(n) && (R = zo(n), To(R).position !== "static" && l === "absolute" && (w = "scrollHeight", E = "scrollWidth")), R = R, s === Pt || (s === Nt || s === qt) && a === or) {
      O = Ht;
      var N = m && R === S && S.visualViewport ? S.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        R[w]
      );
      C -= N - r.height, C *= c ? 1 : -1;
    }
    if (s === Nt || (s === Pt || s === Ht) && a === or) {
      T = qt;
      var M = m && R === S && S.visualViewport ? S.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        R[E]
      );
      h -= M - r.width, h *= c ? 1 : -1;
    }
  }
  var I = Object.assign({
    position: l
  }, d && lh), F = p === !0 ? ch({
    x: h,
    y: C
  }, At(n)) : {
    x: h,
    y: C
  };
  if (h = F.x, C = F.y, c) {
    var A;
    return Object.assign({}, I, (A = {}, A[O] = $ ? "0" : "", A[T] = y ? "0" : "", A.transform = (S.devicePixelRatio || 1) <= 1 ? "translate(" + h + "px, " + C + "px)" : "translate3d(" + h + "px, " + C + "px, 0)", A));
  }
  return Object.assign({}, I, (o = {}, o[O] = $ ? C + "px" : "", o[T] = y ? h + "px" : "", o.transform = "", o));
}
function uh(e) {
  var o = e.state, n = e.options, r = n.gpuAcceleration, s = r === void 0 ? !0 : r, a = n.adaptive, i = a === void 0 ? !0 : a, l = n.roundOffsets, c = l === void 0 ? !0 : l, d = {
    placement: po(o.placement),
    variation: Nn(o.placement),
    popper: o.elements.popper,
    popperRect: o.rects.popper,
    gpuAcceleration: s,
    isFixed: o.options.strategy === "fixed"
  };
  o.modifiersData.popperOffsets != null && (o.styles.popper = Object.assign({}, o.styles.popper, Ri(Object.assign({}, d, {
    offsets: o.modifiersData.popperOffsets,
    position: o.options.strategy,
    adaptive: i,
    roundOffsets: c
  })))), o.modifiersData.arrow != null && (o.styles.arrow = Object.assign({}, o.styles.arrow, Ri(Object.assign({}, d, {
    offsets: o.modifiersData.arrow,
    position: "absolute",
    adaptive: !1,
    roundOffsets: c
  })))), o.attributes.popper = Object.assign({}, o.attributes.popper, {
    "data-popper-placement": o.placement
  });
}
const dh = {
  name: "computeStyles",
  enabled: !0,
  phase: "beforeWrite",
  fn: uh,
  data: {}
};
var wr = {
  passive: !0
};
function ph(e) {
  var o = e.state, n = e.instance, r = e.options, s = r.scroll, a = s === void 0 ? !0 : s, i = r.resize, l = i === void 0 ? !0 : i, c = At(o.elements.popper), d = [].concat(o.scrollParents.reference, o.scrollParents.popper);
  return a && d.forEach(function(p) {
    p.addEventListener("scroll", n.update, wr);
  }), l && c.addEventListener("resize", n.update, wr), function() {
    a && d.forEach(function(p) {
      p.removeEventListener("scroll", n.update, wr);
    }), l && c.removeEventListener("resize", n.update, wr);
  };
}
const fh = {
  name: "eventListeners",
  enabled: !0,
  phase: "write",
  fn: function() {
  },
  effect: ph,
  data: {}
};
var mh = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function Hr(e) {
  return e.replace(/left|right|bottom|top/g, function(o) {
    return mh[o];
  });
}
var bh = {
  start: "end",
  end: "start"
};
function wi(e) {
  return e.replace(/start|end/g, function(o) {
    return bh[o];
  });
}
function Pa(e) {
  var o = At(e), n = o.pageXOffset, r = o.pageYOffset;
  return {
    scrollLeft: n,
    scrollTop: r
  };
}
function Na(e) {
  return Pn(zo(e)).left + Pa(e).scrollLeft;
}
function gh(e, o) {
  var n = At(e), r = zo(e), s = n.visualViewport, a = r.clientWidth, i = r.clientHeight, l = 0, c = 0;
  if (s) {
    a = s.width, i = s.height;
    var d = zc();
    (d || !d && o === "fixed") && (l = s.offsetLeft, c = s.offsetTop);
  }
  return {
    width: a,
    height: i,
    x: l + Na(e),
    y: c
  };
}
function hh(e) {
  var o, n = zo(e), r = Pa(e), s = (o = e.ownerDocument) == null ? void 0 : o.body, a = rn(n.scrollWidth, n.clientWidth, s ? s.scrollWidth : 0, s ? s.clientWidth : 0), i = rn(n.scrollHeight, n.clientHeight, s ? s.scrollHeight : 0, s ? s.clientHeight : 0), l = -r.scrollLeft + Na(e), c = -r.scrollTop;
  return To(s || n).direction === "rtl" && (l += rn(n.clientWidth, s ? s.clientWidth : 0) - a), {
    width: a,
    height: i,
    x: l,
    y: c
  };
}
function Ia(e) {
  var o = To(e), n = o.overflow, r = o.overflowX, s = o.overflowY;
  return /auto|scroll|overlay|hidden/.test(n + s + r);
}
function qc(e) {
  return ["html", "body", "#document"].indexOf(bo(e)) >= 0 ? e.ownerDocument.body : Ut(e) && Ia(e) ? e : qc(vs(e));
}
function Xn(e, o) {
  var n;
  o === void 0 && (o = []);
  var r = qc(e), s = r === ((n = e.ownerDocument) == null ? void 0 : n.body), a = At(r), i = s ? [a].concat(a.visualViewport || [], Ia(r) ? r : []) : r, l = o.concat(i);
  return s ? l : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    l.concat(Xn(vs(i)))
  );
}
function ia(e) {
  return Object.assign({}, e, {
    left: e.x,
    top: e.y,
    right: e.x + e.width,
    bottom: e.y + e.height
  });
}
function vh(e, o) {
  var n = Pn(e, !1, o === "fixed");
  return n.top = n.top + e.clientTop, n.left = n.left + e.clientLeft, n.bottom = n.top + e.clientHeight, n.right = n.left + e.clientWidth, n.width = e.clientWidth, n.height = e.clientHeight, n.x = n.left, n.y = n.top, n;
}
function Ei(e, o, n) {
  return o === jc ? ia(gh(e, n)) : an(o) ? vh(o, n) : ia(hh(zo(e)));
}
function yh(e) {
  var o = Xn(vs(e)), n = ["absolute", "fixed"].indexOf(To(e).position) >= 0, r = n && Ut(e) ? yr(e) : e;
  return an(r) ? o.filter(function(s) {
    return an(s) && Vc(s, r) && bo(s) !== "body";
  }) : [];
}
function Ch(e, o, n, r) {
  var s = o === "clippingParents" ? yh(e) : [].concat(o), a = [].concat(s, [n]), i = a[0], l = a.reduce(function(c, d) {
    var p = Ei(e, d, r);
    return c.top = rn(p.top, c.top), c.right = es(p.right, c.right), c.bottom = es(p.bottom, c.bottom), c.left = rn(p.left, c.left), c;
  }, Ei(e, i, r));
  return l.width = l.right - l.left, l.height = l.bottom - l.top, l.x = l.left, l.y = l.top, l;
}
function Gc(e) {
  var o = e.reference, n = e.element, r = e.placement, s = r ? po(r) : null, a = r ? Nn(r) : null, i = o.x + o.width / 2 - n.width / 2, l = o.y + o.height / 2 - n.height / 2, c;
  switch (s) {
    case Pt:
      c = {
        x: i,
        y: o.y - n.height
      };
      break;
    case Ht:
      c = {
        x: i,
        y: o.y + o.height
      };
      break;
    case qt:
      c = {
        x: o.x + o.width,
        y: l
      };
      break;
    case Nt:
      c = {
        x: o.x - n.width,
        y: l
      };
      break;
    default:
      c = {
        x: o.x,
        y: o.y
      };
  }
  var d = s ? Ea(s) : null;
  if (d != null) {
    var p = d === "y" ? "height" : "width";
    switch (a) {
      case wn:
        c[d] = c[d] - (o[p] / 2 - n[p] / 2);
        break;
      case or:
        c[d] = c[d] + (o[p] / 2 - n[p] / 2);
        break;
    }
  }
  return c;
}
function nr(e, o) {
  o === void 0 && (o = {});
  var n = o, r = n.placement, s = r === void 0 ? e.placement : r, a = n.strategy, i = a === void 0 ? e.strategy : a, l = n.boundary, c = l === void 0 ? _g : l, d = n.rootBoundary, p = d === void 0 ? jc : d, m = n.elementContext, b = m === void 0 ? Bn : m, h = n.altBoundary, v = h === void 0 ? !1 : h, C = n.padding, g = C === void 0 ? 0 : C, y = Wc(typeof g != "number" ? g : Hc(g, vr)), $ = b === Bn ? zg : Bn, T = e.rects.popper, O = e.elements[v ? $ : b], S = Ch(an(O) ? O : O.contextElement || zo(e.elements.popper), c, p, i), R = Pn(e.elements.reference), w = Gc({
    reference: R,
    element: T,
    strategy: "absolute",
    placement: s
  }), E = ia(Object.assign({}, T, w)), N = b === Bn ? E : R, M = {
    top: S.top - N.top + y.top,
    bottom: N.bottom - S.bottom + y.bottom,
    left: S.left - N.left + y.left,
    right: N.right - S.right + y.right
  }, I = e.modifiersData.offset;
  if (b === Bn && I) {
    var F = I[s];
    Object.keys(M).forEach(function(A) {
      var B = [qt, Ht].indexOf(A) >= 0 ? 1 : -1, j = [Pt, Ht].indexOf(A) >= 0 ? "y" : "x";
      M[A] += F[j] * B;
    });
  }
  return M;
}
function xh(e, o) {
  o === void 0 && (o = {});
  var n = o, r = n.placement, s = n.boundary, a = n.rootBoundary, i = n.padding, l = n.flipVariations, c = n.allowedAutoPlacements, d = c === void 0 ? _c : c, p = Nn(r), m = p ? l ? $i : $i.filter(function(v) {
    return Nn(v) === p;
  }) : vr, b = m.filter(function(v) {
    return d.indexOf(v) >= 0;
  });
  b.length === 0 && (b = m);
  var h = b.reduce(function(v, C) {
    return v[C] = nr(e, {
      placement: C,
      boundary: s,
      rootBoundary: a,
      padding: i
    })[po(C)], v;
  }, {});
  return Object.keys(h).sort(function(v, C) {
    return h[v] - h[C];
  });
}
function Th(e) {
  if (po(e) === Sa)
    return [];
  var o = Hr(e);
  return [wi(e), o, wi(o)];
}
function Oh(e) {
  var o = e.state, n = e.options, r = e.name;
  if (!o.modifiersData[r]._skip) {
    for (var s = n.mainAxis, a = s === void 0 ? !0 : s, i = n.altAxis, l = i === void 0 ? !0 : i, c = n.fallbackPlacements, d = n.padding, p = n.boundary, m = n.rootBoundary, b = n.altBoundary, h = n.flipVariations, v = h === void 0 ? !0 : h, C = n.allowedAutoPlacements, g = o.options.placement, y = po(g), $ = y === g, T = c || ($ || !v ? [Hr(g)] : Th(g)), O = [g].concat(T).reduce(function(se, ue) {
      return se.concat(po(ue) === Sa ? xh(o, {
        placement: ue,
        boundary: p,
        rootBoundary: m,
        padding: d,
        flipVariations: v,
        allowedAutoPlacements: C
      }) : ue);
    }, []), S = o.rects.reference, R = o.rects.popper, w = /* @__PURE__ */ new Map(), E = !0, N = O[0], M = 0; M < O.length; M++) {
      var I = O[M], F = po(I), A = Nn(I) === wn, B = [Pt, Ht].indexOf(F) >= 0, j = B ? "width" : "height", V = nr(o, {
        placement: I,
        boundary: p,
        rootBoundary: m,
        altBoundary: b,
        padding: d
      }), U = B ? A ? qt : Nt : A ? Ht : Pt;
      S[j] > R[j] && (U = Hr(U));
      var _ = Hr(U), W = [];
      if (a && W.push(V[F] <= 0), l && W.push(V[U] <= 0, V[_] <= 0), W.every(function(se) {
        return se;
      })) {
        N = I, E = !1;
        break;
      }
      w.set(I, W);
    }
    if (E)
      for (var de = v ? 3 : 1, Te = function(ue) {
        var Z = O.find(function(he) {
          var q = w.get(he);
          if (q)
            return q.slice(0, ue).every(function(le) {
              return le;
            });
        });
        if (Z)
          return N = Z, "break";
      }, $e = de; $e > 0; $e--) {
        var ie = Te($e);
        if (ie === "break")
          break;
      }
    o.placement !== N && (o.modifiersData[r]._skip = !0, o.placement = N, o.reset = !0);
  }
}
const $h = {
  name: "flip",
  enabled: !0,
  phase: "main",
  fn: Oh,
  requiresIfExists: ["offset"],
  data: {
    _skip: !1
  }
};
function Pi(e, o, n) {
  return n === void 0 && (n = {
    x: 0,
    y: 0
  }), {
    top: e.top - o.height - n.y,
    right: e.right - o.width + n.x,
    bottom: e.bottom - o.height + n.y,
    left: e.left - o.width - n.x
  };
}
function Ni(e) {
  return [Pt, qt, Ht, Nt].some(function(o) {
    return e[o] >= 0;
  });
}
function Sh(e) {
  var o = e.state, n = e.name, r = o.rects.reference, s = o.rects.popper, a = o.modifiersData.preventOverflow, i = nr(o, {
    elementContext: "reference"
  }), l = nr(o, {
    altBoundary: !0
  }), c = Pi(i, r), d = Pi(l, s, a), p = Ni(c), m = Ni(d);
  o.modifiersData[n] = {
    referenceClippingOffsets: c,
    popperEscapeOffsets: d,
    isReferenceHidden: p,
    hasPopperEscaped: m
  }, o.attributes.popper = Object.assign({}, o.attributes.popper, {
    "data-popper-reference-hidden": p,
    "data-popper-escaped": m
  });
}
const Rh = {
  name: "hide",
  enabled: !0,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: Sh
};
function wh(e, o, n) {
  var r = po(e), s = [Nt, Pt].indexOf(r) >= 0 ? -1 : 1, a = typeof n == "function" ? n(Object.assign({}, o, {
    placement: e
  })) : n, i = a[0], l = a[1];
  return i = i || 0, l = (l || 0) * s, [Nt, qt].indexOf(r) >= 0 ? {
    x: l,
    y: i
  } : {
    x: i,
    y: l
  };
}
function Eh(e) {
  var o = e.state, n = e.options, r = e.name, s = n.offset, a = s === void 0 ? [0, 0] : s, i = _c.reduce(function(p, m) {
    return p[m] = wh(m, o.rects, a), p;
  }, {}), l = i[o.placement], c = l.x, d = l.y;
  o.modifiersData.popperOffsets != null && (o.modifiersData.popperOffsets.x += c, o.modifiersData.popperOffsets.y += d), o.modifiersData[r] = i;
}
const Ph = {
  name: "offset",
  enabled: !0,
  phase: "main",
  requires: ["popperOffsets"],
  fn: Eh
};
function Nh(e) {
  var o = e.state, n = e.name;
  o.modifiersData[n] = Gc({
    reference: o.rects.reference,
    element: o.rects.popper,
    strategy: "absolute",
    placement: o.placement
  });
}
const Ih = {
  name: "popperOffsets",
  enabled: !0,
  phase: "read",
  fn: Nh,
  data: {}
};
function kh(e) {
  return e === "x" ? "y" : "x";
}
function Mh(e) {
  var o = e.state, n = e.options, r = e.name, s = n.mainAxis, a = s === void 0 ? !0 : s, i = n.altAxis, l = i === void 0 ? !1 : i, c = n.boundary, d = n.rootBoundary, p = n.altBoundary, m = n.padding, b = n.tether, h = b === void 0 ? !0 : b, v = n.tetherOffset, C = v === void 0 ? 0 : v, g = nr(o, {
    boundary: c,
    rootBoundary: d,
    padding: m,
    altBoundary: p
  }), y = po(o.placement), $ = Nn(o.placement), T = !$, O = Ea(y), S = kh(O), R = o.modifiersData.popperOffsets, w = o.rects.reference, E = o.rects.popper, N = typeof C == "function" ? C(Object.assign({}, o.rects, {
    placement: o.placement
  })) : C, M = typeof N == "number" ? {
    mainAxis: N,
    altAxis: N
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, N), I = o.modifiersData.offset ? o.modifiersData.offset[o.placement] : null, F = {
    x: 0,
    y: 0
  };
  if (R) {
    if (a) {
      var A, B = O === "y" ? Pt : Nt, j = O === "y" ? Ht : qt, V = O === "y" ? "height" : "width", U = R[O], _ = U + g[B], W = U - g[j], de = h ? -E[V] / 2 : 0, Te = $ === wn ? w[V] : E[V], $e = $ === wn ? -E[V] : -w[V], ie = o.elements.arrow, se = h && ie ? wa(ie) : {
        width: 0,
        height: 0
      }, ue = o.modifiersData["arrow#persistent"] ? o.modifiersData["arrow#persistent"].padding : Uc(), Z = ue[B], he = ue[j], q = Yn(0, w[V], se[V]), le = T ? w[V] / 2 - de - q - Z - M.mainAxis : Te - q - Z - M.mainAxis, Oe = T ? -w[V] / 2 + de + q + he + M.mainAxis : $e + q + he + M.mainAxis, fe = o.elements.arrow && yr(o.elements.arrow), me = fe ? O === "y" ? fe.clientTop || 0 : fe.clientLeft || 0 : 0, ve = (A = I == null ? void 0 : I[O]) != null ? A : 0, Y = U + le - ve - me, re = U + Oe - ve, X = Yn(h ? es(_, Y) : _, U, h ? rn(W, re) : W);
      R[O] = X, F[O] = X - U;
    }
    if (l) {
      var Ee, be = O === "x" ? Pt : Nt, De = O === "x" ? Ht : qt, Ie = R[S], Se = S === "y" ? "height" : "width", Me = Ie + g[be], Fe = Ie - g[De], Ae = [Pt, Nt].indexOf(y) !== -1, Ye = (Ee = I == null ? void 0 : I[S]) != null ? Ee : 0, et = Ae ? Me : Ie - w[Se] - E[Se] - Ye + M.altAxis, tt = Ae ? Ie + w[Se] + E[Se] - Ye - M.altAxis : Fe, G = h && Ae ? nh(et, Ie, tt) : Yn(h ? et : Me, Ie, h ? tt : Fe);
      R[S] = G, F[S] = G - Ie;
    }
    o.modifiersData[r] = F;
  }
}
const Bh = {
  name: "preventOverflow",
  enabled: !0,
  phase: "main",
  fn: Mh,
  requiresIfExists: ["offset"]
};
function Lh(e) {
  return {
    scrollLeft: e.scrollLeft,
    scrollTop: e.scrollTop
  };
}
function Dh(e) {
  return e === At(e) || !Ut(e) ? Pa(e) : Lh(e);
}
function Ah(e) {
  var o = e.getBoundingClientRect(), n = En(o.width) / e.offsetWidth || 1, r = En(o.height) / e.offsetHeight || 1;
  return n !== 1 || r !== 1;
}
function Fh(e, o, n) {
  n === void 0 && (n = !1);
  var r = Ut(o), s = Ut(o) && Ah(o), a = zo(o), i = Pn(e, s, n), l = {
    scrollLeft: 0,
    scrollTop: 0
  }, c = {
    x: 0,
    y: 0
  };
  return (r || !r && !n) && ((bo(o) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
  Ia(a)) && (l = Dh(o)), Ut(o) ? (c = Pn(o, !0), c.x += o.clientLeft, c.y += o.clientTop) : a && (c.x = Na(a))), {
    x: i.left + l.scrollLeft - c.x,
    y: i.top + l.scrollTop - c.y,
    width: i.width,
    height: i.height
  };
}
function jh(e) {
  var o = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Set(), r = [];
  e.forEach(function(a) {
    o.set(a.name, a);
  });
  function s(a) {
    n.add(a.name);
    var i = [].concat(a.requires || [], a.requiresIfExists || []);
    i.forEach(function(l) {
      if (!n.has(l)) {
        var c = o.get(l);
        c && s(c);
      }
    }), r.push(a);
  }
  return e.forEach(function(a) {
    n.has(a.name) || s(a);
  }), r;
}
function _h(e) {
  var o = jh(e);
  return Qg.reduce(function(n, r) {
    return n.concat(o.filter(function(s) {
      return s.phase === r;
    }));
  }, []);
}
function zh(e) {
  var o;
  return function() {
    return o || (o = new Promise(function(n) {
      Promise.resolve().then(function() {
        o = void 0, n(e());
      });
    })), o;
  };
}
function Vh(e) {
  var o = e.reduce(function(n, r) {
    var s = n[r.name];
    return n[r.name] = s ? Object.assign({}, s, r, {
      options: Object.assign({}, s.options, r.options),
      data: Object.assign({}, s.data, r.data)
    }) : r, n;
  }, {});
  return Object.keys(o).map(function(n) {
    return o[n];
  });
}
var Ii = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function ki() {
  for (var e = arguments.length, o = new Array(e), n = 0; n < e; n++)
    o[n] = arguments[n];
  return !o.some(function(r) {
    return !(r && typeof r.getBoundingClientRect == "function");
  });
}
function Uh(e) {
  e === void 0 && (e = {});
  var o = e, n = o.defaultModifiers, r = n === void 0 ? [] : n, s = o.defaultOptions, a = s === void 0 ? Ii : s;
  return function(l, c, d) {
    d === void 0 && (d = a);
    var p = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, Ii, a),
      modifiersData: {},
      elements: {
        reference: l,
        popper: c
      },
      attributes: {},
      styles: {}
    }, m = [], b = !1, h = {
      state: p,
      setOptions: function(y) {
        var $ = typeof y == "function" ? y(p.options) : y;
        C(), p.options = Object.assign({}, a, p.options, $), p.scrollParents = {
          reference: an(l) ? Xn(l) : l.contextElement ? Xn(l.contextElement) : [],
          popper: Xn(c)
        };
        var T = _h(Vh([].concat(r, p.options.modifiers)));
        return p.orderedModifiers = T.filter(function(O) {
          return O.enabled;
        }), v(), h.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function() {
        if (!b) {
          var y = p.elements, $ = y.reference, T = y.popper;
          if (ki($, T)) {
            p.rects = {
              reference: Fh($, yr(T), p.options.strategy === "fixed"),
              popper: wa(T)
            }, p.reset = !1, p.placement = p.options.placement, p.orderedModifiers.forEach(function(M) {
              return p.modifiersData[M.name] = Object.assign({}, M.data);
            });
            for (var O = 0; O < p.orderedModifiers.length; O++) {
              if (p.reset === !0) {
                p.reset = !1, O = -1;
                continue;
              }
              var S = p.orderedModifiers[O], R = S.fn, w = S.options, E = w === void 0 ? {} : w, N = S.name;
              typeof R == "function" && (p = R({
                state: p,
                options: E,
                name: N,
                instance: h
              }) || p);
            }
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: zh(function() {
        return new Promise(function(g) {
          h.forceUpdate(), g(p);
        });
      }),
      destroy: function() {
        C(), b = !0;
      }
    };
    if (!ki(l, c))
      return h;
    h.setOptions(d).then(function(g) {
      !b && d.onFirstUpdate && d.onFirstUpdate(g);
    });
    function v() {
      p.orderedModifiers.forEach(function(g) {
        var y = g.name, $ = g.options, T = $ === void 0 ? {} : $, O = g.effect;
        if (typeof O == "function") {
          var S = O({
            state: p,
            name: y,
            instance: h,
            options: T
          }), R = function() {
          };
          m.push(S || R);
        }
      });
    }
    function C() {
      m.forEach(function(g) {
        return g();
      }), m = [];
    }
    return h;
  };
}
var Wh = [fh, Ih, dh, eh, Ph, $h, Bh, ih, Rh], Hh = /* @__PURE__ */ Uh({
  defaultModifiers: Wh
});
const Kc = "Popper";
function qh(e) {
  return Fc(Kc, e);
}
Tg(Kc, ["root"]);
const Gh = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps", "ownerState"], Kh = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition", "slotProps", "slots"];
function Yh(e, o) {
  if (o === "ltr")
    return e;
  switch (e) {
    case "bottom-end":
      return "bottom-start";
    case "bottom-start":
      return "bottom-end";
    case "top-end":
      return "top-start";
    case "top-start":
      return "top-end";
    default:
      return e;
  }
}
function ts(e) {
  return typeof e == "function" ? e() : e;
}
function ys(e) {
  return e.nodeType !== void 0;
}
function Xh(e) {
  return !ys(e);
}
const Qh = () => te({
  root: ["root"]
}, Ib(qh)), Zh = {}, Jh = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r;
  const {
    anchorEl: s,
    children: a,
    direction: i,
    disablePortal: l,
    modifiers: c,
    open: d,
    placement: p,
    popperOptions: m,
    popperRef: b,
    slotProps: h = {},
    slots: v = {},
    TransitionProps: C
    // @ts-ignore internal logic
    // prevent from spreading to DOM, it can come from the parent component e.g. Select.
  } = o, g = z(o, Gh), y = f.useRef(null), $ = Ve(y, n), T = f.useRef(null), O = Ve(T, b), S = f.useRef(O);
  bt(() => {
    S.current = O;
  }, [O]), f.useImperativeHandle(b, () => T.current, []);
  const R = Yh(p, i), [w, E] = f.useState(R), [N, M] = f.useState(ts(s));
  f.useEffect(() => {
    T.current && T.current.forceUpdate();
  }), f.useEffect(() => {
    s && M(ts(s));
  }, [s]), bt(() => {
    if (!N || !d)
      return;
    const j = (_) => {
      E(_.placement);
    };
    if (process.env.NODE_ENV !== "production" && N && ys(N) && N.nodeType === 1) {
      const _ = N.getBoundingClientRect();
      process.env.NODE_ENV !== "test" && _.top === 0 && _.left === 0 && _.right === 0 && _.bottom === 0 && console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
    }
    let V = [{
      name: "preventOverflow",
      options: {
        altBoundary: l
      }
    }, {
      name: "flip",
      options: {
        altBoundary: l
      }
    }, {
      name: "onUpdate",
      enabled: !0,
      phase: "afterWrite",
      fn: ({
        state: _
      }) => {
        j(_);
      }
    }];
    c != null && (V = V.concat(c)), m && m.modifiers != null && (V = V.concat(m.modifiers));
    const U = Hh(N, y.current, u({
      placement: R
    }, m, {
      modifiers: V
    }));
    return S.current(U), () => {
      U.destroy(), S.current(null);
    };
  }, [N, l, c, d, m, R]);
  const I = {
    placement: w
  };
  C !== null && (I.TransitionProps = C);
  const F = Qh(), A = (r = v.root) != null ? r : "div", B = at({
    elementType: A,
    externalSlotProps: h.root,
    externalForwardedProps: g,
    additionalProps: {
      role: "tooltip",
      ref: $
    },
    ownerState: o,
    className: F.root
  });
  return /* @__PURE__ */ x(A, u({}, B, {
    children: typeof a == "function" ? a(I) : a
  }));
}), Yc = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const {
    anchorEl: r,
    children: s,
    container: a,
    direction: i = "ltr",
    disablePortal: l = !1,
    keepMounted: c = !1,
    modifiers: d,
    open: p,
    placement: m = "bottom",
    popperOptions: b = Zh,
    popperRef: h,
    style: v,
    transition: C = !1,
    slotProps: g = {},
    slots: y = {}
  } = o, $ = z(o, Kh), [T, O] = f.useState(!0), S = () => {
    O(!1);
  }, R = () => {
    O(!0);
  };
  if (!c && !p && (!C || T))
    return null;
  let w;
  if (a)
    w = a;
  else if (r) {
    const M = ts(r);
    w = M && ys(M) ? Xe(M).body : Xe(null).body;
  }
  const E = !p && c && (!C || T) ? "none" : void 0, N = C ? {
    in: p,
    onEnter: S,
    onExited: R
  } : void 0;
  return /* @__PURE__ */ x(tr, {
    disablePortal: l,
    container: w,
    children: /* @__PURE__ */ x(Jh, u({
      anchorEl: r,
      direction: i,
      disablePortal: l,
      modifiers: d,
      ref: n,
      open: C ? !T : p,
      placement: m,
      popperOptions: b,
      popperRef: h,
      slotProps: g,
      slots: y
    }, $, {
      style: u({
        // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
        position: "fixed",
        // Fix Popper.js display issue
        top: 0,
        left: 0,
        display: E
      }, v),
      TransitionProps: N,
      children: s
    }))
  });
});
process.env.NODE_ENV !== "production" && (Yc.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: ut(t.oneOfType([fo, t.object, t.func]), (e) => {
    if (e.open) {
      const o = ts(e.anchorEl);
      if (o && ys(o) && o.nodeType === 1) {
        const n = o.getBoundingClientRect();
        if (process.env.NODE_ENV !== "test" && n.top === 0 && n.left === 0 && n.right === 0 && n.bottom === 0)
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
      } else if (!o || typeof o.getBoundingClientRect != "function" || Xh(o) && o.contextElement != null && o.contextElement.nodeType !== 1)
        return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join(`
`));
    }
    return null;
  }),
  /**
   * Popper render function or node.
   */
  children: t.oneOfType([t.node, t.func]),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: t.oneOfType([fo, t.func]),
  /**
   * Direction of the text.
   * @default 'ltr'
   */
  direction: t.oneOf(["ltr", "rtl"]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: t.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: t.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: t.arrayOf(t.shape({
    data: t.object,
    effect: t.func,
    enabled: t.bool,
    fn: t.func,
    name: t.any,
    options: t.object,
    phase: t.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: t.arrayOf(t.string),
    requiresIfExists: t.arrayOf(t.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: t.bool.isRequired,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: t.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: t.shape({
    modifiers: t.array,
    onFirstUpdate: t.func,
    placement: t.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: t.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  popperRef: yt,
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: t.shape({
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    root: t.elementType
  }),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: t.bool
});
const ev = 2;
function Xc(e, o) {
  return e - o;
}
function Mi(e, o) {
  var n;
  const {
    index: r
  } = (n = e.reduce((s, a, i) => {
    const l = Math.abs(o - a);
    return s === null || l < s.distance || l === s.distance ? {
      distance: l,
      index: i
    } : s;
  }, null)) != null ? n : {};
  return r;
}
function Er(e, o) {
  if (o.current !== void 0 && e.changedTouches) {
    const n = e;
    for (let r = 0; r < n.changedTouches.length; r += 1) {
      const s = n.changedTouches[r];
      if (s.identifier === o.current)
        return {
          x: s.clientX,
          y: s.clientY
        };
    }
    return !1;
  }
  return {
    x: e.clientX,
    y: e.clientY
  };
}
function os(e, o, n) {
  return (e - o) * 100 / (n - o);
}
function tv(e, o, n) {
  return (n - o) * e + o;
}
function ov(e) {
  if (Math.abs(e) < 1) {
    const n = e.toExponential().split("e-"), r = n[0].split(".")[1];
    return (r ? r.length : 0) + parseInt(n[1], 10);
  }
  const o = e.toString().split(".")[1];
  return o ? o.length : 0;
}
function nv(e, o, n) {
  const r = Math.round((e - n) / o) * o + n;
  return Number(r.toFixed(ov(o)));
}
function Bi({
  values: e,
  newValue: o,
  index: n
}) {
  const r = e.slice();
  return r[n] = o, r.sort(Xc);
}
function Pr({
  sliderRef: e,
  activeIndex: o,
  setActive: n
}) {
  var r, s;
  const a = Xe(e.current);
  if (!((r = e.current) != null && r.contains(a.activeElement)) || Number(a == null || (s = a.activeElement) == null ? void 0 : s.getAttribute("data-index")) !== o) {
    var i;
    (i = e.current) == null || i.querySelector(`[type="range"][data-index="${o}"]`).focus();
  }
  n && n(o);
}
function Nr(e, o) {
  return typeof e == "number" && typeof o == "number" ? e === o : typeof e == "object" && typeof o == "object" ? Pb(e, o) : !1;
}
const rv = {
  horizontal: {
    offset: (e) => ({
      left: `${e}%`
    }),
    leap: (e) => ({
      width: `${e}%`
    })
  },
  "horizontal-reverse": {
    offset: (e) => ({
      right: `${e}%`
    }),
    leap: (e) => ({
      width: `${e}%`
    })
  },
  vertical: {
    offset: (e) => ({
      bottom: `${e}%`
    }),
    leap: (e) => ({
      height: `${e}%`
    })
  }
}, sv = (e) => e;
let Ir;
function Li() {
  return Ir === void 0 && (typeof CSS < "u" && typeof CSS.supports == "function" ? Ir = CSS.supports("touch-action", "none") : Ir = !0), Ir;
}
function av(e) {
  const {
    "aria-labelledby": o,
    defaultValue: n,
    disabled: r = !1,
    disableSwap: s = !1,
    isRtl: a = !1,
    marks: i = !1,
    max: l = 100,
    min: c = 0,
    name: d,
    onChange: p,
    onChangeCommitted: m,
    orientation: b = "horizontal",
    rootRef: h,
    scale: v = sv,
    step: C = 1,
    shiftStep: g = 10,
    tabIndex: y,
    value: $
  } = e, T = f.useRef(), [O, S] = f.useState(-1), [R, w] = f.useState(-1), [E, N] = f.useState(!1), M = f.useRef(0), [I, F] = Dt({
    controlled: $,
    default: n ?? c,
    name: "Slider"
  }), A = p && ((G, H, pe) => {
    const Ne = G.nativeEvent || G, Le = new Ne.constructor(Ne.type, Ne);
    Object.defineProperty(Le, "target", {
      writable: !0,
      value: {
        value: H,
        name: d
      }
    }), p(Le, H, pe);
  }), B = Array.isArray(I);
  let j = B ? I.slice().sort(Xc) : [I];
  j = j.map((G) => G == null ? c : Ko(G, c, l));
  const V = i === !0 && C !== null ? [...Array(Math.floor((l - c) / C) + 1)].map((G, H) => ({
    value: c + C * H
  })) : i || [], U = V.map((G) => G.value), {
    isFocusVisibleRef: _,
    onBlur: W,
    onFocus: de,
    ref: Te
  } = br(), [$e, ie] = f.useState(-1), se = f.useRef(), ue = Ve(Te, se), Z = Ve(h, ue), he = (G) => (H) => {
    var pe;
    const Ne = Number(H.currentTarget.getAttribute("data-index"));
    de(H), _.current === !0 && ie(Ne), w(Ne), G == null || (pe = G.onFocus) == null || pe.call(G, H);
  }, q = (G) => (H) => {
    var pe;
    W(H), _.current === !1 && ie(-1), w(-1), G == null || (pe = G.onBlur) == null || pe.call(G, H);
  }, le = (G, H) => {
    const pe = Number(G.currentTarget.getAttribute("data-index")), Ne = j[pe], Le = U.indexOf(Ne);
    let Re = H;
    if (V && C == null) {
      const ge = U[U.length - 1];
      Re > ge ? Re = ge : Re < U[0] ? Re = U[0] : Re = Re < Ne ? U[Le - 1] : U[Le + 1];
    }
    if (Re = Ko(Re, c, l), B) {
      s && (Re = Ko(Re, j[pe - 1] || -1 / 0, j[pe + 1] || 1 / 0));
      const ge = Re;
      Re = Bi({
        values: j,
        newValue: Re,
        index: pe
      });
      let Q = pe;
      s || (Q = Re.indexOf(ge)), Pr({
        sliderRef: se,
        activeIndex: Q
      });
    }
    F(Re), ie(pe), A && !Nr(Re, I) && A(G, Re, pe), m && m(G, Re);
  }, Oe = (G) => (H) => {
    var pe;
    if (C !== null) {
      const Ne = Number(H.currentTarget.getAttribute("data-index")), Le = j[Ne];
      let Re = null;
      (H.key === "ArrowLeft" || H.key === "ArrowDown") && H.shiftKey || H.key === "PageDown" ? Re = Math.max(Le - g, c) : ((H.key === "ArrowRight" || H.key === "ArrowUp") && H.shiftKey || H.key === "PageUp") && (Re = Math.min(Le + g, l)), Re !== null && (le(H, Re), H.preventDefault());
    }
    G == null || (pe = G.onKeyDown) == null || pe.call(G, H);
  };
  bt(() => {
    if (r && se.current.contains(document.activeElement)) {
      var G;
      (G = document.activeElement) == null || G.blur();
    }
  }, [r]), r && O !== -1 && S(-1), r && $e !== -1 && ie(-1);
  const fe = (G) => (H) => {
    var pe;
    (pe = G.onChange) == null || pe.call(G, H), le(H, H.target.valueAsNumber);
  }, me = f.useRef();
  let ve = b;
  a && b === "horizontal" && (ve += "-reverse");
  const Y = ({
    finger: G,
    move: H = !1
  }) => {
    const {
      current: pe
    } = se, {
      width: Ne,
      height: Le,
      bottom: Re,
      left: ge
    } = pe.getBoundingClientRect();
    let Q;
    ve.indexOf("vertical") === 0 ? Q = (Re - G.y) / Le : Q = (G.x - ge) / Ne, ve.indexOf("-reverse") !== -1 && (Q = 1 - Q);
    let ce;
    if (ce = tv(Q, c, l), C)
      ce = nv(ce, C, c);
    else {
      const ke = Mi(U, ce);
      ce = U[ke];
    }
    ce = Ko(ce, c, l);
    let xe = 0;
    if (B) {
      H ? xe = me.current : xe = Mi(j, ce), s && (ce = Ko(ce, j[xe - 1] || -1 / 0, j[xe + 1] || 1 / 0));
      const ke = ce;
      ce = Bi({
        values: j,
        newValue: ce,
        index: xe
      }), s && H || (xe = ce.indexOf(ke), me.current = xe);
    }
    return {
      newValue: ce,
      activeIndex: xe
    };
  }, re = nt((G) => {
    const H = Er(G, T);
    if (!H)
      return;
    if (M.current += 1, G.type === "mousemove" && G.buttons === 0) {
      X(G);
      return;
    }
    const {
      newValue: pe,
      activeIndex: Ne
    } = Y({
      finger: H,
      move: !0
    });
    Pr({
      sliderRef: se,
      activeIndex: Ne,
      setActive: S
    }), F(pe), !E && M.current > ev && N(!0), A && !Nr(pe, I) && A(G, pe, Ne);
  }), X = nt((G) => {
    const H = Er(G, T);
    if (N(!1), !H)
      return;
    const {
      newValue: pe
    } = Y({
      finger: H,
      move: !0
    });
    S(-1), G.type === "touchend" && w(-1), m && m(G, pe), T.current = void 0, be();
  }), Ee = nt((G) => {
    if (r)
      return;
    Li() || G.preventDefault();
    const H = G.changedTouches[0];
    H != null && (T.current = H.identifier);
    const pe = Er(G, T);
    if (pe !== !1) {
      const {
        newValue: Le,
        activeIndex: Re
      } = Y({
        finger: pe
      });
      Pr({
        sliderRef: se,
        activeIndex: Re,
        setActive: S
      }), F(Le), A && !Nr(Le, I) && A(G, Le, Re);
    }
    M.current = 0;
    const Ne = Xe(se.current);
    Ne.addEventListener("touchmove", re, {
      passive: !0
    }), Ne.addEventListener("touchend", X, {
      passive: !0
    });
  }), be = f.useCallback(() => {
    const G = Xe(se.current);
    G.removeEventListener("mousemove", re), G.removeEventListener("mouseup", X), G.removeEventListener("touchmove", re), G.removeEventListener("touchend", X);
  }, [X, re]);
  f.useEffect(() => {
    const {
      current: G
    } = se;
    return G.addEventListener("touchstart", Ee, {
      passive: Li()
    }), () => {
      G.removeEventListener("touchstart", Ee), be();
    };
  }, [be, Ee]), f.useEffect(() => {
    r && be();
  }, [r, be]);
  const De = (G) => (H) => {
    var pe;
    if ((pe = G.onMouseDown) == null || pe.call(G, H), r || H.defaultPrevented || H.button !== 0)
      return;
    H.preventDefault();
    const Ne = Er(H, T);
    if (Ne !== !1) {
      const {
        newValue: Re,
        activeIndex: ge
      } = Y({
        finger: Ne
      });
      Pr({
        sliderRef: se,
        activeIndex: ge,
        setActive: S
      }), F(Re), A && !Nr(Re, I) && A(H, Re, ge);
    }
    M.current = 0;
    const Le = Xe(se.current);
    Le.addEventListener("mousemove", re, {
      passive: !0
    }), Le.addEventListener("mouseup", X);
  }, Ie = os(B ? j[0] : c, c, l), Se = os(j[j.length - 1], c, l) - Ie, Me = (G = {}) => {
    const H = nn(G), pe = {
      onMouseDown: De(H || {})
    }, Ne = u({}, H, pe);
    return u({}, G, {
      ref: Z
    }, Ne);
  }, Fe = (G) => (H) => {
    var pe;
    (pe = G.onMouseOver) == null || pe.call(G, H);
    const Ne = Number(H.currentTarget.getAttribute("data-index"));
    w(Ne);
  }, Ae = (G) => (H) => {
    var pe;
    (pe = G.onMouseLeave) == null || pe.call(G, H), w(-1);
  };
  return {
    active: O,
    axis: ve,
    axisProps: rv,
    dragging: E,
    focusedThumbIndex: $e,
    getHiddenInputProps: (G = {}) => {
      var H;
      const pe = nn(G), Ne = {
        onChange: fe(pe || {}),
        onFocus: he(pe || {}),
        onBlur: q(pe || {}),
        onKeyDown: Oe(pe || {})
      }, Le = u({}, pe, Ne);
      return u({
        tabIndex: y,
        "aria-labelledby": o,
        "aria-orientation": b,
        "aria-valuemax": v(l),
        "aria-valuemin": v(c),
        name: d,
        type: "range",
        min: e.min,
        max: e.max,
        step: e.step === null && e.marks ? "any" : (H = e.step) != null ? H : void 0,
        disabled: r
      }, G, Le, {
        style: u({}, yc, {
          direction: a ? "rtl" : "ltr",
          // So that VoiceOver's focus indicator matches the thumb's dimensions
          width: "100%",
          height: "100%"
        })
      });
    },
    getRootProps: Me,
    getThumbProps: (G = {}) => {
      const H = nn(G), pe = {
        onMouseOver: Fe(H || {}),
        onMouseLeave: Ae(H || {})
      };
      return u({}, G, H, pe);
    },
    marks: V,
    open: R,
    range: B,
    rootRef: Z,
    trackLeap: Se,
    trackOffset: Ie,
    values: j,
    getThumbStyle: (G) => ({
      // So the non active thumb doesn't show its label on hover.
      pointerEvents: O !== -1 && O !== G ? "none" : void 0
    })
  };
}
function iv(e = {}) {
  const {
    autoHideDuration: o = null,
    disableWindowBlurListener: n = !1,
    onClose: r,
    open: s,
    resumeHideDuration: a
  } = e, i = yo();
  f.useEffect(() => {
    if (!s)
      return;
    function y($) {
      $.defaultPrevented || ($.key === "Escape" || $.key === "Esc") && (r == null || r($, "escapeKeyDown"));
    }
    return document.addEventListener("keydown", y), () => {
      document.removeEventListener("keydown", y);
    };
  }, [s, r]);
  const l = nt((y, $) => {
    r == null || r(y, $);
  }), c = nt((y) => {
    !r || y == null || i.start(y, () => {
      l(null, "timeout");
    });
  });
  f.useEffect(() => (s && c(o), i.clear), [s, o, c, i]);
  const d = (y) => {
    r == null || r(y, "clickaway");
  }, p = i.clear, m = f.useCallback(() => {
    o != null && c(a ?? o * 0.5);
  }, [o, a, c]), b = (y) => ($) => {
    const T = y.onBlur;
    T == null || T($), m();
  }, h = (y) => ($) => {
    const T = y.onFocus;
    T == null || T($), p();
  }, v = (y) => ($) => {
    const T = y.onMouseEnter;
    T == null || T($), p();
  }, C = (y) => ($) => {
    const T = y.onMouseLeave;
    T == null || T($), m();
  };
  return f.useEffect(() => {
    if (!n && s)
      return window.addEventListener("focus", m), window.addEventListener("blur", p), () => {
        window.removeEventListener("focus", m), window.removeEventListener("blur", p);
      };
  }, [n, s, m, p]), {
    getRootProps: (y = {}) => {
      const $ = u({}, nn(e), nn(y));
      return u({
        // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.
        // See https://github.com/mui/material-ui/issues/29080
        role: "presentation"
      }, y, $, {
        onBlur: b($),
        onFocus: h($),
        onMouseEnter: v($),
        onMouseLeave: C($)
      });
    },
    onClickAway: d
  };
}
const lv = ["onChange", "maxRows", "minRows", "style", "value"];
function kr(e) {
  return parseInt(e, 10) || 0;
}
const cv = {
  shadow: {
    // Visibility needed to hide the extra text area on iPads
    visibility: "hidden",
    // Remove from the content flow
    position: "absolute",
    // Ignore the scrollbar width
    overflow: "hidden",
    height: 0,
    top: 0,
    left: 0,
    // Create a new layer, increase the isolation of the computed values
    transform: "translateZ(0)"
  }
};
function uv(e) {
  return e == null || Object.keys(e).length === 0 || e.outerHeightStyle === 0 && !e.overflowing;
}
const Qc = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const {
    onChange: r,
    maxRows: s,
    minRows: a = 1,
    style: i,
    value: l
  } = o, c = z(o, lv), {
    current: d
  } = f.useRef(l != null), p = f.useRef(null), m = Ve(n, p), b = f.useRef(null), h = f.useCallback(() => {
    const g = p.current, $ = Rt(g).getComputedStyle(g);
    if ($.width === "0px")
      return {
        outerHeightStyle: 0,
        overflowing: !1
      };
    const T = b.current;
    T.style.width = $.width, T.value = g.value || o.placeholder || "x", T.value.slice(-1) === `
` && (T.value += " ");
    const O = $.boxSizing, S = kr($.paddingBottom) + kr($.paddingTop), R = kr($.borderBottomWidth) + kr($.borderTopWidth), w = T.scrollHeight;
    T.value = "x";
    const E = T.scrollHeight;
    let N = w;
    a && (N = Math.max(Number(a) * E, N)), s && (N = Math.min(Number(s) * E, N)), N = Math.max(N, E);
    const M = N + (O === "border-box" ? S + R : 0), I = Math.abs(N - w) <= 1;
    return {
      outerHeightStyle: M,
      overflowing: I
    };
  }, [s, a, o.placeholder]), v = f.useCallback(() => {
    const g = h();
    if (uv(g))
      return;
    const y = p.current;
    y.style.height = `${g.outerHeightStyle}px`, y.style.overflow = g.overflowing ? "hidden" : "";
  }, [h]);
  bt(() => {
    const g = () => {
      v();
    };
    let y;
    const $ = () => {
      cancelAnimationFrame(y), y = requestAnimationFrame(() => {
        g();
      });
    }, T = fr(g), O = p.current, S = Rt(O);
    S.addEventListener("resize", T);
    let R;
    return typeof ResizeObserver < "u" && (R = new ResizeObserver(process.env.NODE_ENV === "test" ? $ : g), R.observe(O)), () => {
      T.clear(), cancelAnimationFrame(y), S.removeEventListener("resize", T), R && R.disconnect();
    };
  }, [h, v]), bt(() => {
    v();
  });
  const C = (g) => {
    d || v(), r && r(g);
  };
  return /* @__PURE__ */ Ce(f.Fragment, {
    children: [/* @__PURE__ */ x("textarea", u({
      value: l,
      onChange: C,
      ref: m,
      rows: a
    }, c)), /* @__PURE__ */ x("textarea", {
      "aria-hidden": !0,
      className: o.className,
      readOnly: !0,
      ref: b,
      tabIndex: -1,
      style: u({}, cv.shadow, i, {
        paddingTop: 0,
        paddingBottom: 0
      })
    })]
  });
});
process.env.NODE_ENV !== "production" && (Qc.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Maximum number of rows to display.
   */
  maxRows: t.oneOfType([t.number, t.string]),
  /**
   * Minimum number of rows to display.
   * @default 1
   */
  minRows: t.oneOfType([t.number, t.string]),
  /**
   * @ignore
   */
  onChange: t.func,
  /**
   * @ignore
   */
  placeholder: t.string,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * @ignore
   */
  value: t.oneOfType([t.arrayOf(t.string), t.number, t.string])
});
function Di(e) {
  return typeof e.normalize < "u" ? e.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : e;
}
function dv(e = {}) {
  const {
    ignoreAccents: o = !0,
    ignoreCase: n = !0,
    limit: r,
    matchFrom: s = "any",
    stringify: a,
    trim: i = !1
  } = e;
  return (l, {
    inputValue: c,
    getOptionLabel: d
  }) => {
    let p = i ? c.trim() : c;
    n && (p = p.toLowerCase()), o && (p = Di(p));
    const m = p ? l.filter((b) => {
      let h = (a || d)(b);
      return n && (h = h.toLowerCase()), o && (h = Di(h)), s === "start" ? h.indexOf(p) === 0 : h.indexOf(p) > -1;
    }) : l;
    return typeof r == "number" ? m.slice(0, r) : m;
  };
}
function Bs(e, o) {
  for (let n = 0; n < e.length; n += 1)
    if (o(e[n]))
      return n;
  return -1;
}
const pv = dv(), Ai = 5, fv = (e) => {
  var o;
  return e.current !== null && ((o = e.current.parentElement) == null ? void 0 : o.contains(document.activeElement));
};
function mv(e) {
  const {
    // eslint-disable-next-line @typescript-eslint/naming-convention
    unstable_isActiveElementInListbox: o = fv,
    // eslint-disable-next-line @typescript-eslint/naming-convention
    unstable_classNamePrefix: n = "Mui",
    autoComplete: r = !1,
    autoHighlight: s = !1,
    autoSelect: a = !1,
    blurOnSelect: i = !1,
    clearOnBlur: l = !e.freeSolo,
    clearOnEscape: c = !1,
    componentName: d = "useAutocomplete",
    defaultValue: p = e.multiple ? [] : null,
    disableClearable: m = !1,
    disableCloseOnSelect: b = !1,
    disabled: h,
    disabledItemsFocusable: v = !1,
    disableListWrap: C = !1,
    filterOptions: g = pv,
    filterSelectedOptions: y = !1,
    freeSolo: $ = !1,
    getOptionDisabled: T,
    getOptionKey: O,
    getOptionLabel: S = (K) => {
      var L;
      return (L = K.label) != null ? L : K;
    },
    groupBy: R,
    handleHomeEndKeys: w = !e.freeSolo,
    id: E,
    includeInputInList: N = !1,
    inputValue: M,
    isOptionEqualToValue: I = (K, L) => K === L,
    multiple: F = !1,
    onChange: A,
    onClose: B,
    onHighlightChange: j,
    onInputChange: V,
    onOpen: U,
    open: _,
    openOnFocus: W = !1,
    options: de,
    readOnly: Te = !1,
    selectOnFocus: $e = !e.freeSolo,
    value: ie
  } = e, se = mo(E);
  let ue = S;
  ue = (K) => {
    const L = S(K);
    if (typeof L != "string") {
      if (process.env.NODE_ENV !== "production") {
        const ae = L === void 0 ? "undefined" : `${typeof L} (${L})`;
        console.error(`MUI: The \`getOptionLabel\` method of ${d} returned ${ae} instead of a string for ${JSON.stringify(K)}.`);
      }
      return String(L);
    }
    return L;
  };
  const Z = f.useRef(!1), he = f.useRef(!0), q = f.useRef(null), le = f.useRef(null), [Oe, fe] = f.useState(null), [me, ve] = f.useState(-1), Y = s ? 0 : -1, re = f.useRef(Y), [X, Ee] = Dt({
    controlled: ie,
    default: p,
    name: d
  }), [be, De] = Dt({
    controlled: M,
    default: "",
    name: d,
    state: "inputValue"
  }), [Ie, Se] = f.useState(!1), Me = f.useCallback((K, L) => {
    if (!(F ? X.length < L.length : L !== null) && !l)
      return;
    let we;
    if (F)
      we = "";
    else if (L == null)
      we = "";
    else {
      const _e = ue(L);
      we = typeof _e == "string" ? _e : "";
    }
    be !== we && (De(we), V && V(K, we, "reset"));
  }, [ue, be, F, V, De, l, X]), [Fe, Ae] = Dt({
    controlled: _,
    default: !1,
    name: d,
    state: "open"
  }), [Ye, et] = f.useState(!0), tt = !F && X != null && be === ue(X), G = Fe && !Te, H = G ? g(
    de.filter((K) => !(y && (F ? X : [X]).some((L) => L !== null && I(K, L)))),
    // we use the empty string to manipulate `filterOptions` to not filter any options
    // i.e. the filter predicate always returns true
    {
      inputValue: tt && Ye ? "" : be,
      getOptionLabel: ue
    }
  ) : [], pe = ha({
    filteredOptions: H,
    value: X,
    inputValue: be
  });
  f.useEffect(() => {
    const K = X !== pe.value;
    Ie && !K || $ && !K || Me(null, X);
  }, [X, Me, Ie, pe.value, $]);
  const Ne = Fe && H.length > 0 && !Te;
  if (process.env.NODE_ENV !== "production" && X !== null && !$ && de.length > 0) {
    const K = (F ? X : [X]).filter((L) => !de.some((ae) => I(ae, L)));
    K.length > 0 && console.warn([`MUI: The value provided to ${d} is invalid.`, `None of the options match with \`${K.length > 1 ? JSON.stringify(K) : JSON.stringify(K[0])}\`.`, "You can use the `isOptionEqualToValue` prop to customize the equality test."].join(`
`));
  }
  const Le = nt((K) => {
    K === -1 ? q.current.focus() : Oe.querySelector(`[data-tag-index="${K}"]`).focus();
  });
  f.useEffect(() => {
    F && me > X.length - 1 && (ve(-1), Le(-1));
  }, [X, F, me, Le]);
  function Re(K, L) {
    if (!le.current || K < 0 || K >= H.length)
      return -1;
    let ae = K;
    for (; ; ) {
      const we = le.current.querySelector(`[data-option-index="${ae}"]`), _e = v ? !1 : !we || we.disabled || we.getAttribute("aria-disabled") === "true";
      if (we && we.hasAttribute("tabindex") && !_e)
        return ae;
      if (L === "next" ? ae = (ae + 1) % H.length : ae = (ae - 1 + H.length) % H.length, ae === K)
        return -1;
    }
  }
  const ge = nt(({
    event: K,
    index: L,
    reason: ae = "auto"
  }) => {
    if (re.current = L, L === -1 ? q.current.removeAttribute("aria-activedescendant") : q.current.setAttribute("aria-activedescendant", `${se}-option-${L}`), j && j(K, L === -1 ? null : H[L], ae), !le.current)
      return;
    const we = le.current.querySelector(`[role="option"].${n}-focused`);
    we && (we.classList.remove(`${n}-focused`), we.classList.remove(`${n}-focusVisible`));
    let _e = le.current;
    if (le.current.getAttribute("role") !== "listbox" && (_e = le.current.parentElement.querySelector('[role="listbox"]')), !_e)
      return;
    if (L === -1) {
      _e.scrollTop = 0;
      return;
    }
    const ye = le.current.querySelector(`[data-option-index="${L}"]`);
    if (ye && (ye.classList.add(`${n}-focused`), ae === "keyboard" && ye.classList.add(`${n}-focusVisible`), _e.scrollHeight > _e.clientHeight && ae !== "mouse" && ae !== "touch")) {
      const Ue = ye, kt = _e.clientHeight + _e.scrollTop, Tr = Ue.offsetTop + Ue.offsetHeight;
      Tr > kt ? _e.scrollTop = Tr - _e.clientHeight : Ue.offsetTop - Ue.offsetHeight * (R ? 1.3 : 0) < _e.scrollTop && (_e.scrollTop = Ue.offsetTop - Ue.offsetHeight * (R ? 1.3 : 0));
    }
  }), Q = nt(({
    event: K,
    diff: L,
    direction: ae = "next",
    reason: we = "auto"
  }) => {
    if (!G)
      return;
    const ye = Re((() => {
      const Ue = H.length - 1;
      if (L === "reset")
        return Y;
      if (L === "start")
        return 0;
      if (L === "end")
        return Ue;
      const kt = re.current + L;
      return kt < 0 ? kt === -1 && N ? -1 : C && re.current !== -1 || Math.abs(L) > 1 ? 0 : Ue : kt > Ue ? kt === Ue + 1 && N ? -1 : C || Math.abs(L) > 1 ? Ue : 0 : kt;
    })(), ae);
    if (ge({
      index: ye,
      reason: we,
      event: K
    }), r && L !== "reset")
      if (ye === -1)
        q.current.value = be;
      else {
        const Ue = ue(H[ye]);
        q.current.value = Ue, Ue.toLowerCase().indexOf(be.toLowerCase()) === 0 && be.length > 0 && q.current.setSelectionRange(be.length, Ue.length);
      }
  }), ce = () => {
    const K = (L, ae) => {
      const we = L ? ue(L) : "", _e = ae ? ue(ae) : "";
      return we === _e;
    };
    if (re.current !== -1 && pe.filteredOptions && pe.filteredOptions.length !== H.length && pe.inputValue === be && (F ? X.length === pe.value.length && pe.value.every((L, ae) => ue(X[ae]) === ue(L)) : K(pe.value, X))) {
      const L = pe.filteredOptions[re.current];
      if (L && H.some((we) => ue(we) === ue(L)))
        return !0;
    }
    return !1;
  }, xe = f.useCallback(() => {
    if (!G || ce())
      return;
    const K = F ? X[0] : X;
    if (H.length === 0 || K == null) {
      Q({
        diff: "reset"
      });
      return;
    }
    if (le.current) {
      if (K != null) {
        const L = H[re.current];
        if (F && L && Bs(X, (we) => I(L, we)) !== -1)
          return;
        const ae = Bs(H, (we) => I(we, K));
        ae === -1 ? Q({
          diff: "reset"
        }) : ge({
          index: ae
        });
        return;
      }
      if (re.current >= H.length - 1) {
        ge({
          index: H.length - 1
        });
        return;
      }
      ge({
        index: re.current
      });
    }
  }, [
    // Only sync the highlighted index when the option switch between empty and not
    H.length,
    // Don't sync the highlighted index with the value when multiple
    // eslint-disable-next-line react-hooks/exhaustive-deps
    F ? !1 : X,
    y,
    Q,
    ge,
    G,
    be,
    F
  ]), ke = nt((K) => {
    Kr(le, K), K && xe();
  });
  process.env.NODE_ENV !== "production" && f.useEffect(() => {
    (!q.current || q.current.nodeName !== "INPUT") && (q.current && q.current.nodeName === "TEXTAREA" ? console.warn([`A textarea element was provided to ${d} where input was expected.`, "This is not a supported scenario but it may work under certain conditions.", "A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).", "Make sure to test keyboard navigation and add custom event handlers if necessary."].join(`
`)) : console.error([`MUI: Unable to find the input element. It was resolved to ${q.current} while an HTMLInputElement was expected.`, `Instead, ${d} expects an input element.`, "", d === "useAutocomplete" ? "Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join(`
`)));
  }, [d]), f.useEffect(() => {
    xe();
  }, [xe]);
  const je = (K) => {
    Fe || (Ae(!0), et(!0), U && U(K));
  }, qe = (K, L) => {
    Fe && (Ae(!1), B && B(K, L));
  }, Qe = (K, L, ae, we) => {
    if (F) {
      if (X.length === L.length && X.every((_e, ye) => _e === L[ye]))
        return;
    } else if (X === L)
      return;
    A && A(K, L, ae, we), Ee(L);
  }, ft = f.useRef(!1), st = (K, L, ae = "selectOption", we = "options") => {
    let _e = ae, ye = L;
    if (F) {
      if (ye = Array.isArray(X) ? X.slice() : [], process.env.NODE_ENV !== "production") {
        const kt = ye.filter((Tr) => I(L, Tr));
        kt.length > 1 && console.error([`MUI: The \`isOptionEqualToValue\` method of ${d} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${kt.length} matches.`].join(`
`));
      }
      const Ue = Bs(ye, (kt) => I(L, kt));
      Ue === -1 ? ye.push(L) : we !== "freeSolo" && (ye.splice(Ue, 1), _e = "removeOption");
    }
    Me(K, ye), Qe(K, ye, _e, {
      option: L
    }), !b && (!K || !K.ctrlKey && !K.metaKey) && qe(K, _e), (i === !0 || i === "touch" && ft.current || i === "mouse" && !ft.current) && q.current.blur();
  };
  function Tt(K, L) {
    if (K === -1)
      return -1;
    let ae = K;
    for (; ; ) {
      if (L === "next" && ae === X.length || L === "previous" && ae === -1)
        return -1;
      const we = Oe.querySelector(`[data-tag-index="${ae}"]`);
      if (!we || !we.hasAttribute("tabindex") || we.disabled || we.getAttribute("aria-disabled") === "true")
        ae += L === "next" ? 1 : -1;
      else
        return ae;
    }
  }
  const no = (K, L) => {
    if (!F)
      return;
    be === "" && qe(K, "toggleInput");
    let ae = me;
    me === -1 ? be === "" && L === "previous" && (ae = X.length - 1) : (ae += L === "next" ? 1 : -1, ae < 0 && (ae = 0), ae === X.length && (ae = -1)), ae = Tt(ae, L), ve(ae), Le(ae);
  }, ro = (K) => {
    Z.current = !0, De(""), V && V(K, "", "clear"), Qe(K, F ? [] : null, "clear");
  }, Vo = (K) => (L) => {
    if (K.onKeyDown && K.onKeyDown(L), !L.defaultMuiPrevented && (me !== -1 && ["ArrowLeft", "ArrowRight"].indexOf(L.key) === -1 && (ve(-1), Le(-1)), L.which !== 229))
      switch (L.key) {
        case "Home":
          G && w && (L.preventDefault(), Q({
            diff: "start",
            direction: "next",
            reason: "keyboard",
            event: L
          }));
          break;
        case "End":
          G && w && (L.preventDefault(), Q({
            diff: "end",
            direction: "previous",
            reason: "keyboard",
            event: L
          }));
          break;
        case "PageUp":
          L.preventDefault(), Q({
            diff: -Ai,
            direction: "previous",
            reason: "keyboard",
            event: L
          }), je(L);
          break;
        case "PageDown":
          L.preventDefault(), Q({
            diff: Ai,
            direction: "next",
            reason: "keyboard",
            event: L
          }), je(L);
          break;
        case "ArrowDown":
          L.preventDefault(), Q({
            diff: 1,
            direction: "next",
            reason: "keyboard",
            event: L
          }), je(L);
          break;
        case "ArrowUp":
          L.preventDefault(), Q({
            diff: -1,
            direction: "previous",
            reason: "keyboard",
            event: L
          }), je(L);
          break;
        case "ArrowLeft":
          no(L, "previous");
          break;
        case "ArrowRight":
          no(L, "next");
          break;
        case "Enter":
          if (re.current !== -1 && G) {
            const ae = H[re.current], we = T ? T(ae) : !1;
            if (L.preventDefault(), we)
              return;
            st(L, ae, "selectOption"), r && q.current.setSelectionRange(q.current.value.length, q.current.value.length);
          } else
            $ && be !== "" && tt === !1 && (F && L.preventDefault(), st(L, be, "createOption", "freeSolo"));
          break;
        case "Escape":
          G ? (L.preventDefault(), L.stopPropagation(), qe(L, "escape")) : c && (be !== "" || F && X.length > 0) && (L.preventDefault(), L.stopPropagation(), ro(L));
          break;
        case "Backspace":
          if (F && !Te && be === "" && X.length > 0) {
            const ae = me === -1 ? X.length - 1 : me, we = X.slice();
            we.splice(ae, 1), Qe(L, we, "removeOption", {
              option: X[ae]
            });
          }
          break;
        case "Delete":
          if (F && !Te && be === "" && X.length > 0 && me !== -1) {
            const ae = me, we = X.slice();
            we.splice(ae, 1), Qe(L, we, "removeOption", {
              option: X[ae]
            });
          }
          break;
      }
  }, So = (K) => {
    Se(!0), W && !Z.current && je(K);
  }, wt = (K) => {
    if (o(le)) {
      q.current.focus();
      return;
    }
    Se(!1), he.current = !0, Z.current = !1, a && re.current !== -1 && G ? st(K, H[re.current], "blur") : a && $ && be !== "" ? st(K, be, "blur", "freeSolo") : l && Me(K, X), qe(K, "blur");
  }, it = (K) => {
    const L = K.target.value;
    be !== L && (De(L), et(!1), V && V(K, L, "input")), L === "" ? !m && !F && Qe(K, null, "clear") : je(K);
  }, Ze = (K) => {
    const L = Number(K.currentTarget.getAttribute("data-option-index"));
    re.current !== L && ge({
      event: K,
      index: L,
      reason: "mouse"
    });
  }, gt = (K) => {
    ge({
      event: K,
      index: Number(K.currentTarget.getAttribute("data-option-index")),
      reason: "touch"
    }), ft.current = !0;
  }, ht = (K) => {
    const L = Number(K.currentTarget.getAttribute("data-option-index"));
    st(K, H[L], "selectOption"), ft.current = !1;
  }, Kt = (K) => (L) => {
    const ae = X.slice();
    ae.splice(K, 1), Qe(L, ae, "removeOption", {
      option: X[K]
    });
  }, Uo = (K) => {
    Fe ? qe(K, "toggleInput") : je(K);
  }, Yt = (K) => {
    K.currentTarget.contains(K.target) && K.target.getAttribute("id") !== se && K.preventDefault();
  }, Ft = (K) => {
    K.currentTarget.contains(K.target) && (q.current.focus(), $e && he.current && q.current.selectionEnd - q.current.selectionStart === 0 && q.current.select(), he.current = !1);
  }, so = (K) => {
    !h && (be === "" || !Fe) && Uo(K);
  };
  let Et = $ && be.length > 0;
  Et = Et || (F ? X.length > 0 : X !== null);
  let It = H;
  if (R) {
    const K = /* @__PURE__ */ new Map();
    let L = !1;
    It = H.reduce((ae, we, _e) => {
      const ye = R(we);
      return ae.length > 0 && ae[ae.length - 1].group === ye ? ae[ae.length - 1].options.push(we) : (process.env.NODE_ENV !== "production" && (K.get(ye) && !L && (console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${d} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`."), L = !0), K.set(ye, !0)), ae.push({
        key: _e,
        index: _e,
        group: ye,
        options: [we]
      })), ae;
    }, []);
  }
  return h && Ie && wt(), {
    getRootProps: (K = {}) => u({
      "aria-owns": Ne ? `${se}-listbox` : null
    }, K, {
      onKeyDown: Vo(K),
      onMouseDown: Yt,
      onClick: Ft
    }),
    getInputLabelProps: () => ({
      id: `${se}-label`,
      htmlFor: se
    }),
    getInputProps: () => ({
      id: se,
      value: be,
      onBlur: wt,
      onFocus: So,
      onChange: it,
      onMouseDown: so,
      // if open then this is handled imperatively so don't let react override
      // only have an opinion about this when closed
      "aria-activedescendant": G ? "" : null,
      "aria-autocomplete": r ? "both" : "list",
      "aria-controls": Ne ? `${se}-listbox` : void 0,
      "aria-expanded": Ne,
      // Disable browser's suggestion that might overlap with the popup.
      // Handle autocomplete but not autofill.
      autoComplete: "off",
      ref: q,
      autoCapitalize: "none",
      spellCheck: "false",
      role: "combobox",
      disabled: h
    }),
    getClearProps: () => ({
      tabIndex: -1,
      type: "button",
      onClick: ro
    }),
    getPopupIndicatorProps: () => ({
      tabIndex: -1,
      type: "button",
      onClick: Uo
    }),
    getTagProps: ({
      index: K
    }) => u({
      key: K,
      "data-tag-index": K,
      tabIndex: -1
    }, !Te && {
      onDelete: Kt(K)
    }),
    getListboxProps: () => ({
      role: "listbox",
      id: `${se}-listbox`,
      "aria-labelledby": `${se}-label`,
      ref: ke,
      onMouseDown: (K) => {
        K.preventDefault();
      }
    }),
    getOptionProps: ({
      index: K,
      option: L
    }) => {
      var ae;
      const we = (F ? X : [X]).some((ye) => ye != null && I(L, ye)), _e = T ? T(L) : !1;
      return {
        key: (ae = O == null ? void 0 : O(L)) != null ? ae : ue(L),
        tabIndex: -1,
        role: "option",
        id: `${se}-option-${K}`,
        onMouseMove: Ze,
        onClick: ht,
        onTouchStart: gt,
        "data-option-index": K,
        "aria-disabled": _e,
        "aria-selected": we
      };
    },
    id: se,
    inputValue: be,
    value: X,
    dirty: Et,
    expanded: G && Oe,
    popupOpen: G,
    focused: Ie || me !== -1,
    anchorEl: Oe,
    setAnchorEl: fe,
    focusedTag: me,
    groupedOptions: It
  };
}
function bv(e) {
  return ee("MuiAlert", e);
}
const gv = ne("MuiAlert", ["root", "action", "icon", "message", "filled", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]), Fi = gv;
function hv(e) {
  return ee("MuiIconButton", e);
}
const vv = ne("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]), yv = vv, Cv = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"], xv = (e) => {
  const {
    classes: o,
    disabled: n,
    color: r,
    edge: s,
    size: a
  } = e, i = {
    root: ["root", n && "disabled", r !== "default" && `color${k(r)}`, s && `edge${k(s)}`, `size${k(a)}`]
  };
  return te(i, hv, o);
}, Tv = P(pt, {
  name: "MuiIconButton",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.color !== "default" && o[`color${k(n.color)}`], n.edge && o[`edge${k(n.edge)}`], o[`size${k(n.size)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  textAlign: "center",
  flex: "0 0 auto",
  fontSize: e.typography.pxToRem(24),
  padding: 8,
  borderRadius: "50%",
  overflow: "visible",
  // Explicitly set the default value to solve a bug on IE11.
  color: (e.vars || e).palette.action.active,
  transition: e.transitions.create("background-color", {
    duration: e.transitions.duration.shortest
  })
}, !o.disableRipple && {
  "&:hover": {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})` : Pe(e.palette.action.active, e.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }
}, o.edge === "start" && {
  marginLeft: o.size === "small" ? -3 : -12
}, o.edge === "end" && {
  marginRight: o.size === "small" ? -3 : -12
}), ({
  theme: e,
  ownerState: o
}) => {
  var n;
  const r = (n = (e.vars || e).palette) == null ? void 0 : n[o.color];
  return u({}, o.color === "inherit" && {
    color: "inherit"
  }, o.color !== "inherit" && o.color !== "default" && u({
    color: r == null ? void 0 : r.main
  }, !o.disableRipple && {
    "&:hover": u({}, r && {
      backgroundColor: e.vars ? `rgba(${r.mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Pe(r.main, e.palette.action.hoverOpacity)
    }, {
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    })
  }), o.size === "small" && {
    padding: 5,
    fontSize: e.typography.pxToRem(18)
  }, o.size === "large" && {
    padding: 12,
    fontSize: e.typography.pxToRem(28)
  }, {
    [`&.${yv.disabled}`]: {
      backgroundColor: "transparent",
      color: (e.vars || e).palette.action.disabled
    }
  });
}), Zc = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiIconButton"
  }), {
    edge: s = !1,
    children: a,
    className: i,
    color: l = "default",
    disabled: c = !1,
    disableFocusRipple: d = !1,
    size: p = "medium"
  } = r, m = z(r, Cv), b = u({}, r, {
    edge: s,
    color: l,
    disabled: c,
    disableFocusRipple: d,
    size: p
  }), h = xv(b);
  return /* @__PURE__ */ x(Tv, u({
    className: D(h.root, i),
    centerRipple: !0,
    focusRipple: !d,
    disabled: c,
    ref: n
  }, m, {
    ownerState: b,
    children: a
  }));
});
process.env.NODE_ENV !== "production" && (Zc.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The icon to display.
   */
  children: ut(t.node, (e) => f.Children.toArray(e.children).some((n) => /* @__PURE__ */ f.isValidElement(n) && n.props.onClick) ? new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join(`
`)) : null),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: t.oneOfType([t.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */
  edge: t.oneOf(["end", "start", !1]),
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const Qo = Zc, Ov = Je(/* @__PURE__ */ x("path", {
  d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
}), "SuccessOutlined"), $v = Je(/* @__PURE__ */ x("path", {
  d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
}), "ReportProblemOutlined"), Sv = Je(/* @__PURE__ */ x("path", {
  d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}), "ErrorOutline"), Rv = Je(/* @__PURE__ */ x("path", {
  d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
}), "InfoOutlined"), Jc = Je(/* @__PURE__ */ x("path", {
  d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
}), "Close"), wv = ["action", "children", "className", "closeText", "color", "components", "componentsProps", "icon", "iconMapping", "onClose", "role", "severity", "slotProps", "slots", "variant"], Ev = (e) => {
  const {
    variant: o,
    color: n,
    severity: r,
    classes: s
  } = e, a = {
    root: ["root", `${o}${k(n || r)}`, `${o}`],
    icon: ["icon"],
    message: ["message"],
    action: ["action"]
  };
  return te(a, bv, s);
}, Pv = P(Gt, {
  name: "MuiAlert",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], o[`${n.variant}${k(n.color || n.severity)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => {
  const n = e.palette.mode === "light" ? ii : li, r = e.palette.mode === "light" ? li : ii, s = o.color || o.severity;
  return u({}, e.typography.body2, {
    backgroundColor: "transparent",
    display: "flex",
    padding: "6px 16px"
  }, s && o.variant === "standard" && {
    color: e.vars ? e.vars.palette.Alert[`${s}Color`] : n(e.palette[s].light, 0.6),
    backgroundColor: e.vars ? e.vars.palette.Alert[`${s}StandardBg`] : r(e.palette[s].light, 0.9),
    [`& .${Fi.icon}`]: e.vars ? {
      color: e.vars.palette.Alert[`${s}IconColor`]
    } : {
      color: e.palette[s].main
    }
  }, s && o.variant === "outlined" && {
    color: e.vars ? e.vars.palette.Alert[`${s}Color`] : n(e.palette[s].light, 0.6),
    border: `1px solid ${(e.vars || e).palette[s].light}`,
    [`& .${Fi.icon}`]: e.vars ? {
      color: e.vars.palette.Alert[`${s}IconColor`]
    } : {
      color: e.palette[s].main
    }
  }, s && o.variant === "filled" && u({
    fontWeight: e.typography.fontWeightMedium
  }, e.vars ? {
    color: e.vars.palette.Alert[`${s}FilledColor`],
    backgroundColor: e.vars.palette.Alert[`${s}FilledBg`]
  } : {
    backgroundColor: e.palette.mode === "dark" ? e.palette[s].dark : e.palette[s].main,
    color: e.palette.getContrastText(e.palette[s].main)
  }));
}), Nv = P("div", {
  name: "MuiAlert",
  slot: "Icon",
  overridesResolver: (e, o) => o.icon
})({
  marginRight: 12,
  padding: "7px 0",
  display: "flex",
  fontSize: 22,
  opacity: 0.9
}), Iv = P("div", {
  name: "MuiAlert",
  slot: "Message",
  overridesResolver: (e, o) => o.message
})({
  padding: "8px 0",
  minWidth: 0,
  overflow: "auto"
}), ji = P("div", {
  name: "MuiAlert",
  slot: "Action",
  overridesResolver: (e, o) => o.action
})({
  display: "flex",
  alignItems: "flex-start",
  padding: "4px 0 0 16px",
  marginLeft: "auto",
  marginRight: -8
}), _i = {
  success: /* @__PURE__ */ x(Ov, {
    fontSize: "inherit"
  }),
  warning: /* @__PURE__ */ x($v, {
    fontSize: "inherit"
  }),
  error: /* @__PURE__ */ x(Sv, {
    fontSize: "inherit"
  }),
  info: /* @__PURE__ */ x(Rv, {
    fontSize: "inherit"
  })
}, eu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiAlert"
  }), {
    action: s,
    children: a,
    className: i,
    closeText: l = "Close",
    color: c,
    components: d = {},
    componentsProps: p = {},
    icon: m,
    iconMapping: b = _i,
    onClose: h,
    role: v = "alert",
    severity: C = "success",
    slotProps: g = {},
    slots: y = {},
    variant: $ = "standard"
  } = r, T = z(r, wv), O = u({}, r, {
    color: c,
    severity: C,
    variant: $
  }), S = Ev(O), R = {
    slots: u({
      closeButton: d.CloseButton,
      closeIcon: d.CloseIcon
    }, y),
    slotProps: u({}, p, g)
  }, [w, E] = Xr("closeButton", {
    elementType: Qo,
    externalForwardedProps: R,
    ownerState: O
  }), [N, M] = Xr("closeIcon", {
    elementType: Jc,
    externalForwardedProps: R,
    ownerState: O
  });
  return /* @__PURE__ */ Ce(Pv, u({
    role: v,
    elevation: 0,
    ownerState: O,
    className: D(S.root, i),
    ref: n
  }, T, {
    children: [m !== !1 ? /* @__PURE__ */ x(Nv, {
      ownerState: O,
      className: S.icon,
      children: m || b[C] || _i[C]
    }) : null, /* @__PURE__ */ x(Iv, {
      ownerState: O,
      className: S.message,
      children: a
    }), s != null ? /* @__PURE__ */ x(ji, {
      ownerState: O,
      className: S.action,
      children: s
    }) : null, s == null && h ? /* @__PURE__ */ x(ji, {
      ownerState: O,
      className: S.action,
      children: /* @__PURE__ */ x(w, u({
        size: "small",
        "aria-label": l,
        title: l,
        color: "inherit",
        onClick: h
      }, E, {
        children: /* @__PURE__ */ x(N, u({
          fontSize: "small"
        }, M))
      }))
    }) : null]
  }));
});
process.env.NODE_ENV !== "production" && (eu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The action to display. It renders after the message, at the end of the alert.
   */
  action: t.node,
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Override the default label for the *close popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Close'
   */
  closeText: t.string,
  /**
   * The color of the component. Unless provided, the value is taken from the `severity` prop.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: t.oneOfType([t.oneOf(["error", "info", "success", "warning"]), t.string]),
  /**
   * The components used for each slot inside.
   *
   * @deprecated use the `slots` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   *
   * @default {}
   */
  components: t.shape({
    CloseButton: t.elementType,
    CloseIcon: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @deprecated use the `slotProps` prop instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   *
   * @default {}
   */
  componentsProps: t.shape({
    closeButton: t.object,
    closeIcon: t.object
  }),
  /**
   * Override the icon displayed before the children.
   * Unless provided, the icon is mapped to the value of the `severity` prop.
   * Set to `false` to remove the `icon`.
   */
  icon: t.node,
  /**
   * The component maps the `severity` prop to a range of different icons,
   * for instance success to `<SuccessOutlined>`.
   * If you wish to change this mapping, you can provide your own.
   * Alternatively, you can use the `icon` prop to override the icon displayed.
   */
  iconMapping: t.shape({
    error: t.node,
    info: t.node,
    success: t.node,
    warning: t.node
  }),
  /**
   * Callback fired when the component requests to be closed.
   * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onClose: t.func,
  /**
   * The ARIA role attribute of the element.
   * @default 'alert'
   */
  role: t.string,
  /**
   * The severity of the alert. This defines the color and icon used.
   * @default 'success'
   */
  severity: t.oneOfType([t.oneOf(["error", "info", "success", "warning"]), t.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    closeButton: t.oneOfType([t.func, t.object]),
    closeIcon: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    closeButton: t.elementType,
    closeIcon: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'standard'
   */
  variant: t.oneOfType([t.oneOf(["filled", "outlined", "standard"]), t.string])
});
const tk = eu;
function kv(e) {
  return ee("MuiTypography", e);
}
const Mv = ne("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]), ok = Mv, Bv = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"], Lv = (e) => {
  const {
    align: o,
    gutterBottom: n,
    noWrap: r,
    paragraph: s,
    variant: a,
    classes: i
  } = e, l = {
    root: ["root", a, e.align !== "inherit" && `align${k(o)}`, n && "gutterBottom", r && "noWrap", s && "paragraph"]
  };
  return te(l, kv, i);
}, Dv = P("span", {
  name: "MuiTypography",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.variant && o[n.variant], n.align !== "inherit" && o[`align${k(n.align)}`], n.noWrap && o.noWrap, n.gutterBottom && o.gutterBottom, n.paragraph && o.paragraph];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  margin: 0
}, o.variant === "inherit" && {
  // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
  font: "inherit"
}, o.variant !== "inherit" && e.typography[o.variant], o.align !== "inherit" && {
  textAlign: o.align
}, o.noWrap && {
  overflow: "hidden",
  textOverflow: "ellipsis",
  whiteSpace: "nowrap"
}, o.gutterBottom && {
  marginBottom: "0.35em"
}, o.paragraph && {
  marginBottom: 16
})), zi = {
  h1: "h1",
  h2: "h2",
  h3: "h3",
  h4: "h4",
  h5: "h5",
  h6: "h6",
  subtitle1: "h6",
  subtitle2: "h6",
  body1: "p",
  body2: "p",
  inherit: "p"
}, Av = {
  primary: "primary.main",
  textPrimary: "text.primary",
  secondary: "secondary.main",
  textSecondary: "text.secondary",
  error: "error.main"
}, Fv = (e) => Av[e] || e, tu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiTypography"
  }), s = Fv(r.color), a = us(u({}, r, {
    color: s
  })), {
    align: i = "inherit",
    className: l,
    component: c,
    gutterBottom: d = !1,
    noWrap: p = !1,
    paragraph: m = !1,
    variant: b = "body1",
    variantMapping: h = zi
  } = a, v = z(a, Bv), C = u({}, a, {
    align: i,
    color: s,
    className: l,
    component: c,
    gutterBottom: d,
    noWrap: p,
    paragraph: m,
    variant: b,
    variantMapping: h
  }), g = c || (m ? "p" : h[b] || zi[b]) || "span", y = Lv(C);
  return /* @__PURE__ */ x(Dv, u({
    as: g,
    ref: n,
    ownerState: C,
    className: D(y.root, l)
  }, v));
});
process.env.NODE_ENV !== "production" && (tu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the text-align on the component.
   * @default 'inherit'
   */
  align: t.oneOf(["center", "inherit", "justify", "left", "right"]),
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the text will have a bottom margin.
   * @default false
   */
  gutterBottom: t.bool,
  /**
   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
   *
   * Note that text overflow can only happen with block or inline-block level elements
   * (the element needs to have a width in order to overflow).
   * @default false
   */
  noWrap: t.bool,
  /**
   * If `true`, the element will be a paragraph element.
   * @default false
   */
  paragraph: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Applies the theme typography styles.
   * @default 'body1'
   */
  variant: t.oneOfType([t.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), t.string]),
  /**
   * The component maps the variant prop to a range of different HTML element types.
   * For instance, subtitle1 to `<h6>`.
   * If you wish to change that mapping, you can provide your own.
   * Alternatively, you can use the `component` prop.
   * @default {
   *   h1: 'h1',
   *   h2: 'h2',
   *   h3: 'h3',
   *   h4: 'h4',
   *   h5: 'h5',
   *   h6: 'h6',
   *   subtitle1: 'h6',
   *   subtitle2: 'h6',
   *   body1: 'p',
   *   body2: 'p',
   *   inherit: 'p',
   * }
   */
  variantMapping: t.object
});
const xt = tu;
function jv(e) {
  return ee("MuiAlertTitle", e);
}
const _v = ne("MuiAlertTitle", ["root"]), nk = _v, zv = ["className"], Vv = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"]
  }, jv, o);
}, Uv = P(xt, {
  name: "MuiAlertTitle",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(({
  theme: e
}) => ({
  fontWeight: e.typography.fontWeightMedium,
  marginTop: -2
})), ou = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiAlertTitle"
  }), {
    className: s
  } = r, a = z(r, zv), i = r, l = Vv(i);
  return /* @__PURE__ */ x(Uv, u({
    gutterBottom: !0,
    component: "div",
    ownerState: i,
    ref: n,
    className: D(l.root, s)
  }, a));
});
process.env.NODE_ENV !== "production" && (ou.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const rk = ou;
function Wv(e) {
  return ee("MuiAppBar", e);
}
const Hv = ne("MuiAppBar", ["root", "positionFixed", "positionAbsolute", "positionSticky", "positionStatic", "positionRelative", "colorDefault", "colorPrimary", "colorSecondary", "colorInherit", "colorTransparent", "colorError", "colorInfo", "colorSuccess", "colorWarning"]), sk = Hv, qv = ["className", "color", "enableColorOnDark", "position"], Gv = (e) => {
  const {
    color: o,
    position: n,
    classes: r
  } = e, s = {
    root: ["root", `color${k(o)}`, `position${k(n)}`]
  };
  return te(s, Wv, r);
}, Mr = (e, o) => e ? `${e == null ? void 0 : e.replace(")", "")}, ${o})` : o, Kv = P(Gt, {
  name: "MuiAppBar",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`position${k(n.position)}`], o[`color${k(n.color)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => {
  const n = e.palette.mode === "light" ? e.palette.grey[100] : e.palette.grey[900];
  return u({
    display: "flex",
    flexDirection: "column",
    width: "100%",
    boxSizing: "border-box",
    // Prevent padding issue with the Modal and fixed positioned AppBar.
    flexShrink: 0
  }, o.position === "fixed" && {
    position: "fixed",
    zIndex: (e.vars || e).zIndex.appBar,
    top: 0,
    left: "auto",
    right: 0,
    "@media print": {
      // Prevent the app bar to be visible on each printed page.
      position: "absolute"
    }
  }, o.position === "absolute" && {
    position: "absolute",
    zIndex: (e.vars || e).zIndex.appBar,
    top: 0,
    left: "auto",
    right: 0
  }, o.position === "sticky" && {
    // ⚠️ sticky is not supported by IE11.
    position: "sticky",
    zIndex: (e.vars || e).zIndex.appBar,
    top: 0,
    left: "auto",
    right: 0
  }, o.position === "static" && {
    position: "static"
  }, o.position === "relative" && {
    position: "relative"
  }, !e.vars && u({}, o.color === "default" && {
    backgroundColor: n,
    color: e.palette.getContrastText(n)
  }, o.color && o.color !== "default" && o.color !== "inherit" && o.color !== "transparent" && {
    backgroundColor: e.palette[o.color].main,
    color: e.palette[o.color].contrastText
  }, o.color === "inherit" && {
    color: "inherit"
  }, e.palette.mode === "dark" && !o.enableColorOnDark && {
    backgroundColor: null,
    color: null
  }, o.color === "transparent" && u({
    backgroundColor: "transparent",
    color: "inherit"
  }, e.palette.mode === "dark" && {
    backgroundImage: "none"
  })), e.vars && u({}, o.color === "default" && {
    "--AppBar-background": o.enableColorOnDark ? e.vars.palette.AppBar.defaultBg : Mr(e.vars.palette.AppBar.darkBg, e.vars.palette.AppBar.defaultBg),
    "--AppBar-color": o.enableColorOnDark ? e.vars.palette.text.primary : Mr(e.vars.palette.AppBar.darkColor, e.vars.palette.text.primary)
  }, o.color && !o.color.match(/^(default|inherit|transparent)$/) && {
    "--AppBar-background": o.enableColorOnDark ? e.vars.palette[o.color].main : Mr(e.vars.palette.AppBar.darkBg, e.vars.palette[o.color].main),
    "--AppBar-color": o.enableColorOnDark ? e.vars.palette[o.color].contrastText : Mr(e.vars.palette.AppBar.darkColor, e.vars.palette[o.color].contrastText)
  }, {
    backgroundColor: "var(--AppBar-background)",
    color: o.color === "inherit" ? "inherit" : "var(--AppBar-color)"
  }, o.color === "transparent" && {
    backgroundImage: "none",
    backgroundColor: "transparent",
    color: "inherit"
  }));
}), nu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiAppBar"
  }), {
    className: s,
    color: a = "primary",
    enableColorOnDark: i = !1,
    position: l = "fixed"
  } = r, c = z(r, qv), d = u({}, r, {
    color: a,
    position: l,
    enableColorOnDark: i
  }), p = Gv(d);
  return /* @__PURE__ */ x(Kv, u({
    square: !0,
    component: "header",
    ownerState: d,
    elevation: 4,
    className: D(p.root, s, l === "fixed" && "mui-fixed"),
    ref: n
  }, c));
});
process.env.NODE_ENV !== "production" && (nu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["default", "inherit", "primary", "secondary", "transparent", "error", "info", "success", "warning"]), t.string]),
  /**
   * If true, the `color` prop is applied in dark mode.
   * @default false
   */
  enableColorOnDark: t.bool,
  /**
   * The positioning type. The behavior of the different options is described
   * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
   * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
   * @default 'fixed'
   */
  position: t.oneOf(["absolute", "fixed", "relative", "static", "sticky"]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const ak = nu;
var ka = {};
Object.defineProperty(ka, "__esModule", {
  value: !0
});
var ru = ka.default = void 0, Yv = Qv(uo), Xv = yf;
function su(e) {
  if (typeof WeakMap != "function")
    return null;
  var o = /* @__PURE__ */ new WeakMap(), n = /* @__PURE__ */ new WeakMap();
  return (su = function(r) {
    return r ? n : o;
  })(e);
}
function Qv(e, o) {
  if (!o && e && e.__esModule)
    return e;
  if (e === null || typeof e != "object" && typeof e != "function")
    return { default: e };
  var n = su(o);
  if (n && n.has(e))
    return n.get(e);
  var r = { __proto__: null }, s = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var a in e)
    if (a !== "default" && Object.prototype.hasOwnProperty.call(e, a)) {
      var i = s ? Object.getOwnPropertyDescriptor(e, a) : null;
      i && (i.get || i.set) ? Object.defineProperty(r, a, i) : r[a] = e[a];
    }
  return r.default = e, n && n.set(e, r), r;
}
function Zv(e) {
  return Object.keys(e).length === 0;
}
function Jv(e = null) {
  const o = Yv.useContext(Xv.ThemeContext);
  return !o || Zv(o) ? e : o;
}
ru = ka.default = Jv;
const ey = ["anchorEl", "component", "components", "componentsProps", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "transition", "slots", "slotProps"], ty = P(Yc, {
  name: "MuiPopper",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({}), au = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r;
  const s = ru(), a = oe({
    props: o,
    name: "MuiPopper"
  }), {
    anchorEl: i,
    component: l,
    components: c,
    componentsProps: d,
    container: p,
    disablePortal: m,
    keepMounted: b,
    modifiers: h,
    open: v,
    placement: C,
    popperOptions: g,
    popperRef: y,
    transition: $,
    slots: T,
    slotProps: O
  } = a, S = z(a, ey), R = (r = T == null ? void 0 : T.root) != null ? r : c == null ? void 0 : c.Root, w = u({
    anchorEl: i,
    container: p,
    disablePortal: m,
    keepMounted: b,
    modifiers: h,
    open: v,
    placement: C,
    popperOptions: g,
    popperRef: y,
    transition: $
  }, S);
  return /* @__PURE__ */ x(ty, u({
    as: l,
    direction: s == null ? void 0 : s.direction,
    slots: {
      root: R
    },
    slotProps: O ?? d
  }, w, {
    ref: n
  }));
});
process.env.NODE_ENV !== "production" && (au.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
   * or a function that returns either.
   * It's used to set the position of the popper.
   * The return value will passed as the reference object of the Popper instance.
   */
  anchorEl: t.oneOfType([fo, t.object, t.func]),
  /**
   * Popper render function or node.
   */
  children: t.oneOfType([t.node, t.func]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  components: t.shape({
    Root: t.elementType
  }),
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  componentsProps: t.shape({
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: t.oneOfType([fo, t.func]),
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: t.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Popper.
   * @default false
   */
  keepMounted: t.bool,
  /**
   * Popper.js is based on a "plugin-like" architecture,
   * most of its features are fully encapsulated "modifiers".
   *
   * A modifier is a function that is called each time Popper.js needs to
   * compute the position of the popper.
   * For this reason, modifiers should be very performant to avoid bottlenecks.
   * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
   */
  modifiers: t.arrayOf(t.shape({
    data: t.object,
    effect: t.func,
    enabled: t.bool,
    fn: t.func,
    name: t.any,
    options: t.object,
    phase: t.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
    requires: t.arrayOf(t.string),
    requiresIfExists: t.arrayOf(t.string)
  })),
  /**
   * If `true`, the component is shown.
   */
  open: t.bool.isRequired,
  /**
   * Popper placement.
   * @default 'bottom'
   */
  placement: t.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
   * @default {}
   */
  popperOptions: t.shape({
    modifiers: t.array,
    onFirstUpdate: t.func,
    placement: t.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    strategy: t.oneOf(["absolute", "fixed"])
  }),
  /**
   * A ref that points to the used popper instance.
   */
  popperRef: yt,
  /**
   * The props used for each slot inside the Popper.
   * @default {}
   */
  slotProps: t.shape({
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside the Popper.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Help supporting a react-transition-group/Transition component.
   * @default false
   */
  transition: t.bool
});
const Cs = au;
function oy(e) {
  return ee("MuiListSubheader", e);
}
const ny = ne("MuiListSubheader", ["root", "colorPrimary", "colorInherit", "gutters", "inset", "sticky"]), ik = ny, ry = ["className", "color", "component", "disableGutters", "disableSticky", "inset"], sy = (e) => {
  const {
    classes: o,
    color: n,
    disableGutters: r,
    inset: s,
    disableSticky: a
  } = e, i = {
    root: ["root", n !== "default" && `color${k(n)}`, !r && "gutters", s && "inset", !a && "sticky"]
  };
  return te(i, oy, o);
}, ay = P("li", {
  name: "MuiListSubheader",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.color !== "default" && o[`color${k(n.color)}`], !n.disableGutters && o.gutters, n.inset && o.inset, !n.disableSticky && o.sticky];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  boxSizing: "border-box",
  lineHeight: "48px",
  listStyle: "none",
  color: (e.vars || e).palette.text.secondary,
  fontFamily: e.typography.fontFamily,
  fontWeight: e.typography.fontWeightMedium,
  fontSize: e.typography.pxToRem(14)
}, o.color === "primary" && {
  color: (e.vars || e).palette.primary.main
}, o.color === "inherit" && {
  color: "inherit"
}, !o.disableGutters && {
  paddingLeft: 16,
  paddingRight: 16
}, o.inset && {
  paddingLeft: 72
}, !o.disableSticky && {
  position: "sticky",
  top: 0,
  zIndex: 1,
  backgroundColor: (e.vars || e).palette.background.paper
})), Ma = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiListSubheader"
  }), {
    className: s,
    color: a = "default",
    component: i = "li",
    disableGutters: l = !1,
    disableSticky: c = !1,
    inset: d = !1
  } = r, p = z(r, ry), m = u({}, r, {
    color: a,
    component: i,
    disableGutters: l,
    disableSticky: c,
    inset: d
  }), b = sy(m);
  return /* @__PURE__ */ x(ay, u({
    as: i,
    className: D(b.root, s),
    ref: n,
    ownerState: m
  }, p));
});
Ma.muiSkipListHighlight = !0;
process.env.NODE_ENV !== "production" && (Ma.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component. It supports those theme colors that make sense for this component.
   * @default 'default'
   */
  color: t.oneOf(["default", "inherit", "primary"]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the List Subheader will not have gutters.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * If `true`, the List Subheader will not stick to the top during scroll.
   * @default false
   */
  disableSticky: t.bool,
  /**
   * If `true`, the List Subheader is indented.
   * @default false
   */
  inset: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const iy = Ma, ly = Je(/* @__PURE__ */ x("path", {
  d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
}), "Cancel");
function cy(e) {
  return ee("MuiChip", e);
}
const uy = ne("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]), He = uy, dy = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant", "tabIndex", "skipFocusWhenDisabled"], py = (e) => {
  const {
    classes: o,
    disabled: n,
    size: r,
    color: s,
    iconColor: a,
    onDelete: i,
    clickable: l,
    variant: c
  } = e, d = {
    root: ["root", c, n && "disabled", `size${k(r)}`, `color${k(s)}`, l && "clickable", l && `clickableColor${k(s)}`, i && "deletable", i && `deletableColor${k(s)}`, `${c}${k(s)}`],
    label: ["label", `label${k(r)}`],
    avatar: ["avatar", `avatar${k(r)}`, `avatarColor${k(s)}`],
    icon: ["icon", `icon${k(r)}`, `iconColor${k(a)}`],
    deleteIcon: ["deleteIcon", `deleteIcon${k(r)}`, `deleteIconColor${k(s)}`, `deleteIcon${k(c)}Color${k(s)}`]
  };
  return te(d, cy, o);
}, fy = P("div", {
  name: "MuiChip",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e, {
      color: r,
      iconColor: s,
      clickable: a,
      onDelete: i,
      size: l,
      variant: c
    } = n;
    return [{
      [`& .${He.avatar}`]: o.avatar
    }, {
      [`& .${He.avatar}`]: o[`avatar${k(l)}`]
    }, {
      [`& .${He.avatar}`]: o[`avatarColor${k(r)}`]
    }, {
      [`& .${He.icon}`]: o.icon
    }, {
      [`& .${He.icon}`]: o[`icon${k(l)}`]
    }, {
      [`& .${He.icon}`]: o[`iconColor${k(s)}`]
    }, {
      [`& .${He.deleteIcon}`]: o.deleteIcon
    }, {
      [`& .${He.deleteIcon}`]: o[`deleteIcon${k(l)}`]
    }, {
      [`& .${He.deleteIcon}`]: o[`deleteIconColor${k(r)}`]
    }, {
      [`& .${He.deleteIcon}`]: o[`deleteIcon${k(c)}Color${k(r)}`]
    }, o.root, o[`size${k(l)}`], o[`color${k(r)}`], a && o.clickable, a && r !== "default" && o[`clickableColor${k(r)})`], i && o.deletable, i && r !== "default" && o[`deletableColor${k(r)}`], o[c], o[`${c}${k(r)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => {
  const n = e.palette.mode === "light" ? e.palette.grey[700] : e.palette.grey[300];
  return u({
    maxWidth: "100%",
    fontFamily: e.typography.fontFamily,
    fontSize: e.typography.pxToRem(13),
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    height: 32,
    color: (e.vars || e).palette.text.primary,
    backgroundColor: (e.vars || e).palette.action.selected,
    borderRadius: 32 / 2,
    whiteSpace: "nowrap",
    transition: e.transitions.create(["background-color", "box-shadow"]),
    // reset cursor explicitly in case ButtonBase is used
    cursor: "unset",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    textDecoration: "none",
    border: 0,
    // Remove `button` border
    padding: 0,
    // Remove `button` padding
    verticalAlign: "middle",
    boxSizing: "border-box",
    [`&.${He.disabled}`]: {
      opacity: (e.vars || e).palette.action.disabledOpacity,
      pointerEvents: "none"
    },
    [`& .${He.avatar}`]: {
      marginLeft: 5,
      marginRight: -6,
      width: 24,
      height: 24,
      color: e.vars ? e.vars.palette.Chip.defaultAvatarColor : n,
      fontSize: e.typography.pxToRem(12)
    },
    [`& .${He.avatarColorPrimary}`]: {
      color: (e.vars || e).palette.primary.contrastText,
      backgroundColor: (e.vars || e).palette.primary.dark
    },
    [`& .${He.avatarColorSecondary}`]: {
      color: (e.vars || e).palette.secondary.contrastText,
      backgroundColor: (e.vars || e).palette.secondary.dark
    },
    [`& .${He.avatarSmall}`]: {
      marginLeft: 4,
      marginRight: -4,
      width: 18,
      height: 18,
      fontSize: e.typography.pxToRem(10)
    },
    [`& .${He.icon}`]: u({
      marginLeft: 5,
      marginRight: -6
    }, o.size === "small" && {
      fontSize: 18,
      marginLeft: 4,
      marginRight: -4
    }, o.iconColor === o.color && u({
      color: e.vars ? e.vars.palette.Chip.defaultIconColor : n
    }, o.color !== "default" && {
      color: "inherit"
    })),
    [`& .${He.deleteIcon}`]: u({
      WebkitTapHighlightColor: "transparent",
      color: e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / 0.26)` : Pe(e.palette.text.primary, 0.26),
      fontSize: 22,
      cursor: "pointer",
      margin: "0 5px 0 -6px",
      "&:hover": {
        color: e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / 0.4)` : Pe(e.palette.text.primary, 0.4)
      }
    }, o.size === "small" && {
      fontSize: 16,
      marginRight: 4,
      marginLeft: -4
    }, o.color !== "default" && {
      color: e.vars ? `rgba(${e.vars.palette[o.color].contrastTextChannel} / 0.7)` : Pe(e.palette[o.color].contrastText, 0.7),
      "&:hover, &:active": {
        color: (e.vars || e).palette[o.color].contrastText
      }
    })
  }, o.size === "small" && {
    height: 24
  }, o.color !== "default" && {
    backgroundColor: (e.vars || e).palette[o.color].main,
    color: (e.vars || e).palette[o.color].contrastText
  }, o.onDelete && {
    [`&.${He.focusVisible}`]: {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Pe(e.palette.action.selected, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
    }
  }, o.onDelete && o.color !== "default" && {
    [`&.${He.focusVisible}`]: {
      backgroundColor: (e.vars || e).palette[o.color].dark
    }
  });
}, ({
  theme: e,
  ownerState: o
}) => u({}, o.clickable && {
  userSelect: "none",
  WebkitTapHighlightColor: "transparent",
  cursor: "pointer",
  "&:hover": {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Pe(e.palette.action.selected, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity)
  },
  [`&.${He.focusVisible}`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Pe(e.palette.action.selected, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
  },
  "&:active": {
    boxShadow: (e.vars || e).shadows[1]
  }
}, o.clickable && o.color !== "default" && {
  [`&:hover, &.${He.focusVisible}`]: {
    backgroundColor: (e.vars || e).palette[o.color].dark
  }
}), ({
  theme: e,
  ownerState: o
}) => u({}, o.variant === "outlined" && {
  backgroundColor: "transparent",
  border: e.vars ? `1px solid ${e.vars.palette.Chip.defaultBorder}` : `1px solid ${e.palette.mode === "light" ? e.palette.grey[400] : e.palette.grey[700]}`,
  [`&.${He.clickable}:hover`]: {
    backgroundColor: (e.vars || e).palette.action.hover
  },
  [`&.${He.focusVisible}`]: {
    backgroundColor: (e.vars || e).palette.action.focus
  },
  [`& .${He.avatar}`]: {
    marginLeft: 4
  },
  [`& .${He.avatarSmall}`]: {
    marginLeft: 2
  },
  [`& .${He.icon}`]: {
    marginLeft: 4
  },
  [`& .${He.iconSmall}`]: {
    marginLeft: 2
  },
  [`& .${He.deleteIcon}`]: {
    marginRight: 5
  },
  [`& .${He.deleteIconSmall}`]: {
    marginRight: 3
  }
}, o.variant === "outlined" && o.color !== "default" && {
  color: (e.vars || e).palette[o.color].main,
  border: `1px solid ${e.vars ? `rgba(${e.vars.palette[o.color].mainChannel} / 0.7)` : Pe(e.palette[o.color].main, 0.7)}`,
  [`&.${He.clickable}:hover`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette[o.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Pe(e.palette[o.color].main, e.palette.action.hoverOpacity)
  },
  [`&.${He.focusVisible}`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette[o.color].mainChannel} / ${e.vars.palette.action.focusOpacity})` : Pe(e.palette[o.color].main, e.palette.action.focusOpacity)
  },
  [`& .${He.deleteIcon}`]: {
    color: e.vars ? `rgba(${e.vars.palette[o.color].mainChannel} / 0.7)` : Pe(e.palette[o.color].main, 0.7),
    "&:hover, &:active": {
      color: (e.vars || e).palette[o.color].main
    }
  }
})), my = P("span", {
  name: "MuiChip",
  slot: "Label",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e, {
      size: r
    } = n;
    return [o.label, o[`label${k(r)}`]];
  }
})(({
  ownerState: e
}) => u({
  overflow: "hidden",
  textOverflow: "ellipsis",
  paddingLeft: 12,
  paddingRight: 12,
  whiteSpace: "nowrap"
}, e.variant === "outlined" && {
  paddingLeft: 11,
  paddingRight: 11
}, e.size === "small" && {
  paddingLeft: 8,
  paddingRight: 8
}, e.size === "small" && e.variant === "outlined" && {
  paddingLeft: 7,
  paddingRight: 7
}));
function Vi(e) {
  return e.key === "Backspace" || e.key === "Delete";
}
const iu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiChip"
  }), {
    avatar: s,
    className: a,
    clickable: i,
    color: l = "default",
    component: c,
    deleteIcon: d,
    disabled: p = !1,
    icon: m,
    label: b,
    onClick: h,
    onDelete: v,
    onKeyDown: C,
    onKeyUp: g,
    size: y = "medium",
    variant: $ = "filled",
    tabIndex: T,
    skipFocusWhenDisabled: O = !1
    // TODO v6: Rename to `focusableWhenDisabled`.
  } = r, S = z(r, dy), R = f.useRef(null), w = Ve(R, n), E = (W) => {
    W.stopPropagation(), v && v(W);
  }, N = (W) => {
    W.currentTarget === W.target && Vi(W) && W.preventDefault(), C && C(W);
  }, M = (W) => {
    W.currentTarget === W.target && (v && Vi(W) ? v(W) : W.key === "Escape" && R.current && R.current.blur()), g && g(W);
  }, I = i !== !1 && h ? !0 : i, F = I || v ? pt : c || "div", A = u({}, r, {
    component: F,
    disabled: p,
    size: y,
    color: l,
    iconColor: /* @__PURE__ */ f.isValidElement(m) && m.props.color || l,
    onDelete: !!v,
    clickable: I,
    variant: $
  }), B = py(A), j = F === pt ? u({
    component: c || "div",
    focusVisibleClassName: B.focusVisible
  }, v && {
    disableRipple: !0
  }) : {};
  let V = null;
  v && (V = d && /* @__PURE__ */ f.isValidElement(d) ? /* @__PURE__ */ f.cloneElement(d, {
    className: D(d.props.className, B.deleteIcon),
    onClick: E
  }) : /* @__PURE__ */ x(ly, {
    className: D(B.deleteIcon),
    onClick: E
  }));
  let U = null;
  s && /* @__PURE__ */ f.isValidElement(s) && (U = /* @__PURE__ */ f.cloneElement(s, {
    className: D(B.avatar, s.props.className)
  }));
  let _ = null;
  return m && /* @__PURE__ */ f.isValidElement(m) && (_ = /* @__PURE__ */ f.cloneElement(m, {
    className: D(B.icon, m.props.className)
  })), process.env.NODE_ENV !== "production" && U && _ && console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one."), /* @__PURE__ */ Ce(fy, u({
    as: F,
    className: D(B.root, a),
    disabled: I && p ? !0 : void 0,
    onClick: h,
    onKeyDown: N,
    onKeyUp: M,
    ref: w,
    tabIndex: O && p ? -1 : T,
    ownerState: A
  }, j, S, {
    children: [U || _, /* @__PURE__ */ x(my, {
      className: D(B.label),
      ownerState: A,
      children: b
    }), V]
  }));
});
process.env.NODE_ENV !== "production" && (iu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The Avatar element to display.
   */
  avatar: t.element,
  /**
   * This prop isn't supported.
   * Use the `component` prop if you need to change the children structure.
   */
  children: ga,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the chip will appear clickable, and will raise when pressed,
   * even if the onClick prop is not defined.
   * If `false`, the chip will not appear clickable, even if onClick prop is defined.
   * This can be used, for example,
   * along with the component prop to indicate an anchor Chip is clickable.
   * Note: this controls the UI and does not affect the onClick event.
   */
  clickable: t.bool,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: t.oneOfType([t.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Override the default delete icon element. Shown only if `onDelete` is set.
   */
  deleteIcon: t.element,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * Icon element.
   */
  icon: t.element,
  /**
   * The content of the component.
   */
  label: t.node,
  /**
   * @ignore
   */
  onClick: t.func,
  /**
   * Callback fired when the delete icon is clicked.
   * If set, the delete icon will be shown.
   */
  onDelete: t.func,
  /**
   * @ignore
   */
  onKeyDown: t.func,
  /**
   * @ignore
   */
  onKeyUp: t.func,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * If `true`, allows the disabled chip to escape focus.
   * If `false`, allows the disabled chip to receive focus.
   * @default false
   */
  skipFocusWhenDisabled: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * @ignore
   */
  tabIndex: t.number,
  /**
   * The variant to use.
   * @default 'filled'
   */
  variant: t.oneOfType([t.oneOf(["filled", "outlined"]), t.string])
});
const by = iu;
function $o({
  props: e,
  states: o,
  muiFormControl: n
}) {
  return o.reduce((r, s) => (r[s] = e[s], n && typeof e[s] > "u" && (r[s] = n[s]), r), {});
}
const lu = /* @__PURE__ */ f.createContext(void 0);
process.env.NODE_ENV !== "production" && (lu.displayName = "FormControlContext");
const xs = lu;
function oo() {
  return f.useContext(xs);
}
function Ba(e) {
  return /* @__PURE__ */ x(pc, u({}, e, {
    defaultTheme: Cf,
    themeId: ff
  }));
}
process.env.NODE_ENV !== "production" && (Ba.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The styles you want to apply globally.
   */
  styles: t.oneOfType([t.array, t.func, t.number, t.object, t.string, t.bool])
});
function Ui(e) {
  return e != null && !(Array.isArray(e) && e.length === 0);
}
function ns(e, o = !1) {
  return e && (Ui(e.value) && e.value !== "" || o && Ui(e.defaultValue) && e.defaultValue !== "");
}
function gy(e) {
  return e.startAdornment;
}
function hy(e) {
  return ee("MuiInputBase", e);
}
const vy = ne("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]), Bt = vy, yy = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"], Ts = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.root, n.formControl && o.formControl, n.startAdornment && o.adornedStart, n.endAdornment && o.adornedEnd, n.error && o.error, n.size === "small" && o.sizeSmall, n.multiline && o.multiline, n.color && o[`color${k(n.color)}`], n.fullWidth && o.fullWidth, n.hiddenLabel && o.hiddenLabel];
}, Os = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.input, n.size === "small" && o.inputSizeSmall, n.multiline && o.inputMultiline, n.type === "search" && o.inputTypeSearch, n.startAdornment && o.inputAdornedStart, n.endAdornment && o.inputAdornedEnd, n.hiddenLabel && o.inputHiddenLabel];
}, Cy = (e) => {
  const {
    classes: o,
    color: n,
    disabled: r,
    error: s,
    endAdornment: a,
    focused: i,
    formControl: l,
    fullWidth: c,
    hiddenLabel: d,
    multiline: p,
    readOnly: m,
    size: b,
    startAdornment: h,
    type: v
  } = e, C = {
    root: ["root", `color${k(n)}`, r && "disabled", s && "error", c && "fullWidth", i && "focused", l && "formControl", b && b !== "medium" && `size${k(b)}`, p && "multiline", h && "adornedStart", a && "adornedEnd", d && "hiddenLabel", m && "readOnly"],
    input: ["input", r && "disabled", v === "search" && "inputTypeSearch", p && "inputMultiline", b === "small" && "inputSizeSmall", d && "inputHiddenLabel", h && "inputAdornedStart", a && "inputAdornedEnd", m && "readOnly"]
  };
  return te(C, hy, o);
}, $s = P("div", {
  name: "MuiInputBase",
  slot: "Root",
  overridesResolver: Ts
})(({
  theme: e,
  ownerState: o
}) => u({}, e.typography.body1, {
  color: (e.vars || e).palette.text.primary,
  lineHeight: "1.4375em",
  // 23px
  boxSizing: "border-box",
  // Prevent padding issue with fullWidth.
  position: "relative",
  cursor: "text",
  display: "inline-flex",
  alignItems: "center",
  [`&.${Bt.disabled}`]: {
    color: (e.vars || e).palette.text.disabled,
    cursor: "default"
  }
}, o.multiline && u({
  padding: "4px 0 5px"
}, o.size === "small" && {
  paddingTop: 1
}), o.fullWidth && {
  width: "100%"
})), Ss = P("input", {
  name: "MuiInputBase",
  slot: "Input",
  overridesResolver: Os
})(({
  theme: e,
  ownerState: o
}) => {
  const n = e.palette.mode === "light", r = u({
    color: "currentColor"
  }, e.vars ? {
    opacity: e.vars.opacity.inputPlaceholder
  } : {
    opacity: n ? 0.42 : 0.5
  }, {
    transition: e.transitions.create("opacity", {
      duration: e.transitions.duration.shorter
    })
  }), s = {
    opacity: "0 !important"
  }, a = e.vars ? {
    opacity: e.vars.opacity.inputPlaceholder
  } : {
    opacity: n ? 0.42 : 0.5
  };
  return u({
    font: "inherit",
    letterSpacing: "inherit",
    color: "currentColor",
    padding: "4px 0 5px",
    border: 0,
    boxSizing: "content-box",
    background: "none",
    height: "1.4375em",
    // Reset 23pxthe native input line-height
    margin: 0,
    // Reset for Safari
    WebkitTapHighlightColor: "transparent",
    display: "block",
    // Make the flex item shrink with Firefox
    minWidth: 0,
    width: "100%",
    // Fix IE11 width issue
    animationName: "mui-auto-fill-cancel",
    animationDuration: "10ms",
    "&::-webkit-input-placeholder": r,
    "&::-moz-placeholder": r,
    // Firefox 19+
    "&:-ms-input-placeholder": r,
    // IE11
    "&::-ms-input-placeholder": r,
    // Edge
    "&:focus": {
      outline: 0
    },
    // Reset Firefox invalid required input style
    "&:invalid": {
      boxShadow: "none"
    },
    "&::-webkit-search-decoration": {
      // Remove the padding when type=search.
      WebkitAppearance: "none"
    },
    // Show and hide the placeholder logic
    [`label[data-shrink=false] + .${Bt.formControl} &`]: {
      "&::-webkit-input-placeholder": s,
      "&::-moz-placeholder": s,
      // Firefox 19+
      "&:-ms-input-placeholder": s,
      // IE11
      "&::-ms-input-placeholder": s,
      // Edge
      "&:focus::-webkit-input-placeholder": a,
      "&:focus::-moz-placeholder": a,
      // Firefox 19+
      "&:focus:-ms-input-placeholder": a,
      // IE11
      "&:focus::-ms-input-placeholder": a
      // Edge
    },
    [`&.${Bt.disabled}`]: {
      opacity: 1,
      // Reset iOS opacity
      WebkitTextFillColor: (e.vars || e).palette.text.disabled
      // Fix opacity Safari bug
    },
    "&:-webkit-autofill": {
      animationDuration: "5000s",
      animationName: "mui-auto-fill"
    }
  }, o.size === "small" && {
    paddingTop: 1
  }, o.multiline && {
    height: "auto",
    resize: "none",
    padding: 0,
    paddingTop: 0
  }, o.type === "search" && {
    // Improve type search style.
    MozAppearance: "textfield"
  });
}), xy = /* @__PURE__ */ x(Ba, {
  styles: {
    "@keyframes mui-auto-fill": {
      from: {
        display: "block"
      }
    },
    "@keyframes mui-auto-fill-cancel": {
      from: {
        display: "block"
      }
    }
  }
}), cu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r;
  const s = oe({
    props: o,
    name: "MuiInputBase"
  }), {
    "aria-describedby": a,
    autoComplete: i,
    autoFocus: l,
    className: c,
    components: d = {},
    componentsProps: p = {},
    defaultValue: m,
    disabled: b,
    disableInjectingGlobalStyles: h,
    endAdornment: v,
    fullWidth: C = !1,
    id: g,
    inputComponent: y = "input",
    inputProps: $ = {},
    inputRef: T,
    maxRows: O,
    minRows: S,
    multiline: R = !1,
    name: w,
    onBlur: E,
    onChange: N,
    onClick: M,
    onFocus: I,
    onKeyDown: F,
    onKeyUp: A,
    placeholder: B,
    readOnly: j,
    renderSuffix: V,
    rows: U,
    slotProps: _ = {},
    slots: W = {},
    startAdornment: de,
    type: Te = "text",
    value: $e
  } = s, ie = z(s, yy), se = $.value != null ? $.value : $e, {
    current: ue
  } = f.useRef(se != null), Z = f.useRef(), he = f.useCallback((G) => {
    process.env.NODE_ENV !== "production" && G && G.nodeName !== "INPUT" && !G.focus && console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join(`
`));
  }, []), q = Ve(Z, T, $.ref, he), [le, Oe] = f.useState(!1), fe = oo();
  process.env.NODE_ENV !== "production" && f.useEffect(() => {
    if (fe)
      return fe.registerEffect();
  }, [fe]);
  const me = $o({
    props: s,
    muiFormControl: fe,
    states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
  });
  me.focused = fe ? fe.focused : le, f.useEffect(() => {
    !fe && b && le && (Oe(!1), E && E());
  }, [fe, b, le, E]);
  const ve = fe && fe.onFilled, Y = fe && fe.onEmpty, re = f.useCallback((G) => {
    ns(G) ? ve && ve() : Y && Y();
  }, [ve, Y]);
  bt(() => {
    ue && re({
      value: se
    });
  }, [se, re, ue]);
  const X = (G) => {
    if (me.disabled) {
      G.stopPropagation();
      return;
    }
    I && I(G), $.onFocus && $.onFocus(G), fe && fe.onFocus ? fe.onFocus(G) : Oe(!0);
  }, Ee = (G) => {
    E && E(G), $.onBlur && $.onBlur(G), fe && fe.onBlur ? fe.onBlur(G) : Oe(!1);
  }, be = (G, ...H) => {
    if (!ue) {
      const pe = G.target || Z.current;
      if (pe == null)
        throw new Error(process.env.NODE_ENV !== "production" ? "MUI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info." : ic(1));
      re({
        value: pe.value
      });
    }
    $.onChange && $.onChange(G, ...H), N && N(G, ...H);
  };
  f.useEffect(() => {
    re(Z.current);
  }, []);
  const De = (G) => {
    Z.current && G.currentTarget === G.target && Z.current.focus(), M && M(G);
  };
  let Ie = y, Se = $;
  R && Ie === "input" && (U ? (process.env.NODE_ENV !== "production" && (S || O) && console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set."), Se = u({
    type: void 0,
    minRows: U,
    maxRows: U
  }, Se)) : Se = u({
    type: void 0,
    maxRows: O,
    minRows: S
  }, Se), Ie = Qc);
  const Me = (G) => {
    re(G.animationName === "mui-auto-fill-cancel" ? Z.current : {
      value: "x"
    });
  };
  f.useEffect(() => {
    fe && fe.setAdornedStart(!!de);
  }, [fe, de]);
  const Fe = u({}, s, {
    color: me.color || "primary",
    disabled: me.disabled,
    endAdornment: v,
    error: me.error,
    focused: me.focused,
    formControl: fe,
    fullWidth: C,
    hiddenLabel: me.hiddenLabel,
    multiline: R,
    size: me.size,
    startAdornment: de,
    type: Te
  }), Ae = Cy(Fe), Ye = W.root || d.Root || $s, et = _.root || p.root || {}, tt = W.input || d.Input || Ss;
  return Se = u({}, Se, (r = _.input) != null ? r : p.input), /* @__PURE__ */ Ce(f.Fragment, {
    children: [!h && xy, /* @__PURE__ */ Ce(Ye, u({}, et, !Jt(Ye) && {
      ownerState: u({}, Fe, et.ownerState)
    }, {
      ref: n,
      onClick: De
    }, ie, {
      className: D(Ae.root, et.className, c, j && "MuiInputBase-readOnly"),
      children: [de, /* @__PURE__ */ x(xs.Provider, {
        value: null,
        children: /* @__PURE__ */ x(tt, u({
          ownerState: Fe,
          "aria-invalid": me.error,
          "aria-describedby": a,
          autoComplete: i,
          autoFocus: l,
          defaultValue: m,
          disabled: me.disabled,
          id: g,
          onAnimationStart: Me,
          name: w,
          placeholder: B,
          readOnly: j,
          required: me.required,
          rows: U,
          value: se,
          onKeyDown: F,
          onKeyUp: A,
          type: Te
        }, Se, !Jt(tt) && {
          as: Ie,
          ownerState: u({}, Fe, Se.ownerState)
        }, {
          ref: q,
          className: D(Ae.input, Se.className, j && "MuiInputBase-readOnly"),
          onBlur: Ee,
          onChange: be,
          onFocus: X
        }))
      }), v, V ? V(u({}, me, {
        startAdornment: de
      })) : null]
    }))]
  });
});
process.env.NODE_ENV !== "production" && (cu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  "aria-describedby": t.string,
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: t.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: t.shape({
    Input: t.elementType,
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: t.shape({
    input: t.object,
    root: t.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: t.bool,
  /**
   * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
   * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
   * @default false
   */
  disableInjectingGlobalStyles: t.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: t.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: t.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: jo,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: yt,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: t.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: t.oneOfType([t.number, t.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: t.oneOfType([t.number, t.string]),
  /**
   * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: t.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: t.string,
  /**
   * Callback fired when the `input` is blurred.
   *
   * Notice that the first argument (event) might be undefined.
   */
  onBlur: t.func,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * @ignore
   */
  onClick: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * Callback fired when the `input` doesn't satisfy its constraints.
   */
  onInvalid: t.func,
  /**
   * @ignore
   */
  onKeyDown: t.func,
  /**
   * @ignore
   */
  onKeyUp: t.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: t.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: t.bool,
  /**
   * @ignore
   */
  renderSuffix: t.func,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: t.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: t.oneOfType([t.number, t.string]),
  /**
   * The size of the component.
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: t.shape({
    input: t.object,
    root: t.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: t.shape({
    input: t.elementType,
    root: t.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: t.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: t.any
});
const Rs = cu;
function Ty(e) {
  return ee("MuiInput", e);
}
const Oy = u({}, Bt, ne("MuiInput", ["root", "underline", "input"])), No = Oy;
function $y(e) {
  return ee("MuiOutlinedInput", e);
}
const Sy = u({}, Bt, ne("MuiOutlinedInput", ["root", "notchedOutline", "input"])), ao = Sy;
function Ry(e) {
  return ee("MuiFilledInput", e);
}
const wy = u({}, Bt, ne("MuiFilledInput", ["root", "underline", "input"])), Lt = wy, La = Je(/* @__PURE__ */ x("path", {
  d: "M7 10l5 5 5-5z"
}), "ArrowDropDown");
function Ey(e) {
  return ee("MuiAutocomplete", e);
}
const Py = ne("MuiAutocomplete", ["root", "expanded", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]), ze = Py;
var Wi, Hi;
const Ny = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionKey", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "readOnly", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "slotProps", "value"], Iy = ["ref"], ky = (e) => {
  const {
    classes: o,
    disablePortal: n,
    expanded: r,
    focused: s,
    fullWidth: a,
    hasClearIcon: i,
    hasPopupIcon: l,
    inputFocused: c,
    popupOpen: d,
    size: p
  } = e, m = {
    root: ["root", r && "expanded", s && "focused", a && "fullWidth", i && "hasClearIcon", l && "hasPopupIcon"],
    inputRoot: ["inputRoot"],
    input: ["input", c && "inputFocused"],
    tag: ["tag", `tagSize${k(p)}`],
    endAdornment: ["endAdornment"],
    clearIndicator: ["clearIndicator"],
    popupIndicator: ["popupIndicator", d && "popupIndicatorOpen"],
    popper: ["popper", n && "popperDisablePortal"],
    paper: ["paper"],
    listbox: ["listbox"],
    loading: ["loading"],
    noOptions: ["noOptions"],
    option: ["option"],
    groupLabel: ["groupLabel"],
    groupUl: ["groupUl"]
  };
  return te(m, Ey, o);
}, My = P("div", {
  name: "MuiAutocomplete",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e, {
      fullWidth: r,
      hasClearIcon: s,
      hasPopupIcon: a,
      inputFocused: i,
      size: l
    } = n;
    return [{
      [`& .${ze.tag}`]: o.tag
    }, {
      [`& .${ze.tag}`]: o[`tagSize${k(l)}`]
    }, {
      [`& .${ze.inputRoot}`]: o.inputRoot
    }, {
      [`& .${ze.input}`]: o.input
    }, {
      [`& .${ze.input}`]: i && o.inputFocused
    }, o.root, r && o.fullWidth, a && o.hasPopupIcon, s && o.hasClearIcon];
  }
})(({
  ownerState: e
}) => u({
  [`&.${ze.focused} .${ze.clearIndicator}`]: {
    visibility: "visible"
  },
  /* Avoid double tap issue on iOS */
  "@media (pointer: fine)": {
    [`&:hover .${ze.clearIndicator}`]: {
      visibility: "visible"
    }
  }
}, e.fullWidth && {
  width: "100%"
}, {
  [`& .${ze.tag}`]: u({
    margin: 3,
    maxWidth: "calc(100% - 6px)"
  }, e.size === "small" && {
    margin: 2,
    maxWidth: "calc(100% - 4px)"
  }),
  [`& .${ze.inputRoot}`]: {
    flexWrap: "wrap",
    [`.${ze.hasPopupIcon}&, .${ze.hasClearIcon}&`]: {
      paddingRight: 26 + 4
    },
    [`.${ze.hasPopupIcon}.${ze.hasClearIcon}&`]: {
      paddingRight: 52 + 4
    },
    [`& .${ze.input}`]: {
      width: 0,
      minWidth: 30
    }
  },
  [`& .${No.root}`]: {
    paddingBottom: 1,
    "& .MuiInput-input": {
      padding: "4px 4px 4px 0px"
    }
  },
  [`& .${No.root}.${Bt.sizeSmall}`]: {
    [`& .${No.input}`]: {
      padding: "2px 4px 3px 0"
    }
  },
  [`& .${ao.root}`]: {
    padding: 9,
    [`.${ze.hasPopupIcon}&, .${ze.hasClearIcon}&`]: {
      paddingRight: 26 + 4 + 9
    },
    [`.${ze.hasPopupIcon}.${ze.hasClearIcon}&`]: {
      paddingRight: 52 + 4 + 9
    },
    [`& .${ze.input}`]: {
      padding: "7.5px 4px 7.5px 5px"
    },
    [`& .${ze.endAdornment}`]: {
      right: 9
    }
  },
  [`& .${ao.root}.${Bt.sizeSmall}`]: {
    // Don't specify paddingRight, as it overrides the default value set when there is only
    // one of the popup or clear icon as the specificity is equal so the latter one wins
    paddingTop: 6,
    paddingBottom: 6,
    paddingLeft: 6,
    [`& .${ze.input}`]: {
      padding: "2.5px 4px 2.5px 8px"
    }
  },
  [`& .${Lt.root}`]: {
    paddingTop: 19,
    paddingLeft: 8,
    [`.${ze.hasPopupIcon}&, .${ze.hasClearIcon}&`]: {
      paddingRight: 26 + 4 + 9
    },
    [`.${ze.hasPopupIcon}.${ze.hasClearIcon}&`]: {
      paddingRight: 52 + 4 + 9
    },
    [`& .${Lt.input}`]: {
      padding: "7px 4px"
    },
    [`& .${ze.endAdornment}`]: {
      right: 9
    }
  },
  [`& .${Lt.root}.${Bt.sizeSmall}`]: {
    paddingBottom: 1,
    [`& .${Lt.input}`]: {
      padding: "2.5px 4px"
    }
  },
  [`& .${Bt.hiddenLabel}`]: {
    paddingTop: 8
  },
  [`& .${Lt.root}.${Bt.hiddenLabel}`]: {
    paddingTop: 0,
    paddingBottom: 0,
    [`& .${ze.input}`]: {
      paddingTop: 16,
      paddingBottom: 17
    }
  },
  [`& .${Lt.root}.${Bt.hiddenLabel}.${Bt.sizeSmall}`]: {
    [`& .${ze.input}`]: {
      paddingTop: 8,
      paddingBottom: 9
    }
  },
  [`& .${ze.input}`]: u({
    flexGrow: 1,
    textOverflow: "ellipsis",
    opacity: 0
  }, e.inputFocused && {
    opacity: 1
  })
})), By = P("div", {
  name: "MuiAutocomplete",
  slot: "EndAdornment",
  overridesResolver: (e, o) => o.endAdornment
})({
  // We use a position absolute to support wrapping tags.
  position: "absolute",
  right: 0,
  top: "50%",
  transform: "translate(0, -50%)"
}), Ly = P(Qo, {
  name: "MuiAutocomplete",
  slot: "ClearIndicator",
  overridesResolver: (e, o) => o.clearIndicator
})({
  marginRight: -2,
  padding: 4,
  visibility: "hidden"
}), Dy = P(Qo, {
  name: "MuiAutocomplete",
  slot: "PopupIndicator",
  overridesResolver: ({
    ownerState: e
  }, o) => u({}, o.popupIndicator, e.popupOpen && o.popupIndicatorOpen)
})(({
  ownerState: e
}) => u({
  padding: 2,
  marginRight: -2
}, e.popupOpen && {
  transform: "rotate(180deg)"
})), Ay = P(Cs, {
  name: "MuiAutocomplete",
  slot: "Popper",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${ze.option}`]: o.option
    }, o.popper, n.disablePortal && o.popperDisablePortal];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  zIndex: (e.vars || e).zIndex.modal
}, o.disablePortal && {
  position: "absolute"
})), Fy = P(Gt, {
  name: "MuiAutocomplete",
  slot: "Paper",
  overridesResolver: (e, o) => o.paper
})(({
  theme: e
}) => u({}, e.typography.body1, {
  overflow: "auto"
})), jy = P("div", {
  name: "MuiAutocomplete",
  slot: "Loading",
  overridesResolver: (e, o) => o.loading
})(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  padding: "14px 16px"
})), _y = P("div", {
  name: "MuiAutocomplete",
  slot: "NoOptions",
  overridesResolver: (e, o) => o.noOptions
})(({
  theme: e
}) => ({
  color: (e.vars || e).palette.text.secondary,
  padding: "14px 16px"
})), zy = P("div", {
  name: "MuiAutocomplete",
  slot: "Listbox",
  overridesResolver: (e, o) => o.listbox
})(({
  theme: e
}) => ({
  listStyle: "none",
  margin: 0,
  padding: "8px 0",
  maxHeight: "40vh",
  overflow: "auto",
  position: "relative",
  [`& .${ze.option}`]: {
    minHeight: 48,
    display: "flex",
    overflow: "hidden",
    justifyContent: "flex-start",
    alignItems: "center",
    cursor: "pointer",
    paddingTop: 6,
    boxSizing: "border-box",
    outline: "0",
    WebkitTapHighlightColor: "transparent",
    paddingBottom: 6,
    paddingLeft: 16,
    paddingRight: 16,
    [e.breakpoints.up("sm")]: {
      minHeight: "auto"
    },
    [`&.${ze.focused}`]: {
      backgroundColor: (e.vars || e).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    '&[aria-disabled="true"]': {
      opacity: (e.vars || e).palette.action.disabledOpacity,
      pointerEvents: "none"
    },
    [`&.${ze.focusVisible}`]: {
      backgroundColor: (e.vars || e).palette.action.focus
    },
    '&[aria-selected="true"]': {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity),
      [`&.${ze.focused}`]: {
        backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (e.vars || e).palette.action.selected
        }
      },
      [`&.${ze.focusVisible}`]: {
        backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
      }
    }
  }
})), Vy = P(iy, {
  name: "MuiAutocomplete",
  slot: "GroupLabel",
  overridesResolver: (e, o) => o.groupLabel
})(({
  theme: e
}) => ({
  backgroundColor: (e.vars || e).palette.background.paper,
  top: -8
})), Uy = P("ul", {
  name: "MuiAutocomplete",
  slot: "GroupUl",
  overridesResolver: (e, o) => o.groupUl
})({
  padding: 0,
  [`& .${ze.option}`]: {
    paddingLeft: 24
  }
}), uu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s, a, i;
  const l = oe({
    props: o,
    name: "MuiAutocomplete"
  }), {
    autoComplete: c = !1,
    autoHighlight: d = !1,
    autoSelect: p = !1,
    blurOnSelect: m = !1,
    ChipProps: b,
    className: h,
    clearIcon: v = Wi || (Wi = /* @__PURE__ */ x(Jc, {
      fontSize: "small"
    })),
    clearOnBlur: C = !l.freeSolo,
    clearOnEscape: g = !1,
    clearText: y = "Clear",
    closeText: $ = "Close",
    componentsProps: T = {},
    defaultValue: O = l.multiple ? [] : null,
    disableClearable: S = !1,
    disableCloseOnSelect: R = !1,
    disabled: w = !1,
    disabledItemsFocusable: E = !1,
    disableListWrap: N = !1,
    disablePortal: M = !1,
    filterSelectedOptions: I = !1,
    forcePopupIcon: F = "auto",
    freeSolo: A = !1,
    fullWidth: B = !1,
    getLimitTagsText: j = (L) => `+${L}`,
    getOptionLabel: V,
    groupBy: U,
    handleHomeEndKeys: _ = !l.freeSolo,
    includeInputInList: W = !1,
    limitTags: de = -1,
    ListboxComponent: Te = "ul",
    ListboxProps: $e,
    loading: ie = !1,
    loadingText: se = "Loading…",
    multiple: ue = !1,
    noOptionsText: Z = "No options",
    openOnFocus: he = !1,
    openText: q = "Open",
    PaperComponent: le = Gt,
    PopperComponent: Oe = Cs,
    popupIcon: fe = Hi || (Hi = /* @__PURE__ */ x(La, {})),
    readOnly: me = !1,
    renderGroup: ve,
    renderInput: Y,
    renderOption: re,
    renderTags: X,
    selectOnFocus: Ee = !l.freeSolo,
    size: be = "medium",
    slotProps: De = {}
  } = l, Ie = z(l, Ny), {
    getRootProps: Se,
    getInputProps: Me,
    getInputLabelProps: Fe,
    getPopupIndicatorProps: Ae,
    getClearProps: Ye,
    getTagProps: et,
    getListboxProps: tt,
    getOptionProps: G,
    value: H,
    dirty: pe,
    expanded: Ne,
    id: Le,
    popupOpen: Re,
    focused: ge,
    focusedTag: Q,
    anchorEl: ce,
    setAnchorEl: xe,
    inputValue: ke,
    groupedOptions: je
  } = mv(u({}, l, {
    componentName: "Autocomplete"
  })), qe = !S && !w && pe && !me, Qe = (!A || F === !0) && F !== !1, {
    onMouseDown: ft
  } = Me(), {
    ref: st
  } = $e ?? {}, Tt = tt(), {
    ref: no
  } = Tt, ro = z(Tt, Iy), Vo = Ve(no, st), wt = V || ((L) => {
    var ae;
    return (ae = L.label) != null ? ae : L;
  }), it = u({}, l, {
    disablePortal: M,
    expanded: Ne,
    focused: ge,
    fullWidth: B,
    getOptionLabel: wt,
    hasClearIcon: qe,
    hasPopupIcon: Qe,
    inputFocused: Q === -1,
    popupOpen: Re,
    size: be
  }), Ze = ky(it);
  let gt;
  if (ue && H.length > 0) {
    const L = (ae) => u({
      className: Ze.tag,
      disabled: w
    }, et(ae));
    X ? gt = X(H, L, it) : gt = H.map((ae, we) => /* @__PURE__ */ x(by, u({
      label: wt(ae),
      size: be
    }, L({
      index: we
    }), b)));
  }
  if (de > -1 && Array.isArray(gt)) {
    const L = gt.length - de;
    !ge && L > 0 && (gt = gt.splice(0, de), gt.push(/* @__PURE__ */ x("span", {
      className: Ze.tag,
      children: j(L)
    }, gt.length)));
  }
  const Kt = ve || ((L) => /* @__PURE__ */ Ce("li", {
    children: [/* @__PURE__ */ x(Vy, {
      className: Ze.groupLabel,
      ownerState: it,
      component: "div",
      children: L.group
    }), /* @__PURE__ */ x(Uy, {
      className: Ze.groupUl,
      ownerState: it,
      children: L.children
    })]
  }, L.key)), Yt = re || ((L, ae) => /* @__PURE__ */ lc("li", u({}, L, {
    key: L.key
  }), wt(ae))), Ft = (L, ae) => {
    const we = G({
      option: L,
      index: ae
    });
    return Yt(u({}, we, {
      className: Ze.option
    }), L, {
      selected: we["aria-selected"],
      index: ae,
      inputValue: ke
    }, it);
  }, so = (r = De.clearIndicator) != null ? r : T.clearIndicator, Et = (s = De.paper) != null ? s : T.paper, It = (a = De.popper) != null ? a : T.popper, K = (i = De.popupIndicator) != null ? i : T.popupIndicator;
  return /* @__PURE__ */ Ce(f.Fragment, {
    children: [/* @__PURE__ */ x(My, u({
      ref: n,
      className: D(Ze.root, h),
      ownerState: it
    }, Se(Ie), {
      children: Y({
        id: Le,
        disabled: w,
        fullWidth: !0,
        size: be === "small" ? "small" : void 0,
        InputLabelProps: Fe(),
        InputProps: u({
          ref: xe,
          className: Ze.inputRoot,
          startAdornment: gt,
          onClick: (L) => {
            L.target === L.currentTarget && ft(L);
          }
        }, (qe || Qe) && {
          endAdornment: /* @__PURE__ */ Ce(By, {
            className: Ze.endAdornment,
            ownerState: it,
            children: [qe ? /* @__PURE__ */ x(Ly, u({}, Ye(), {
              "aria-label": y,
              title: y,
              ownerState: it
            }, so, {
              className: D(Ze.clearIndicator, so == null ? void 0 : so.className),
              children: v
            })) : null, Qe ? /* @__PURE__ */ x(Dy, u({}, Ae(), {
              disabled: w,
              "aria-label": Re ? $ : q,
              title: Re ? $ : q,
              ownerState: it
            }, K, {
              className: D(Ze.popupIndicator, K == null ? void 0 : K.className),
              children: fe
            })) : null]
          })
        }),
        inputProps: u({
          className: Ze.input,
          disabled: w,
          readOnly: me
        }, Me())
      })
    })), ce ? /* @__PURE__ */ x(Ay, u({
      as: Oe,
      disablePortal: M,
      style: {
        width: ce ? ce.clientWidth : null
      },
      ownerState: it,
      role: "presentation",
      anchorEl: ce,
      open: Re
    }, It, {
      className: D(Ze.popper, It == null ? void 0 : It.className),
      children: /* @__PURE__ */ Ce(Fy, u({
        ownerState: it,
        as: le
      }, Et, {
        className: D(Ze.paper, Et == null ? void 0 : Et.className),
        children: [ie && je.length === 0 ? /* @__PURE__ */ x(jy, {
          className: Ze.loading,
          ownerState: it,
          children: se
        }) : null, je.length === 0 && !A && !ie ? /* @__PURE__ */ x(_y, {
          className: Ze.noOptions,
          ownerState: it,
          role: "presentation",
          onMouseDown: (L) => {
            L.preventDefault();
          },
          children: Z
        }) : null, je.length > 0 ? /* @__PURE__ */ x(zy, u({
          as: Te,
          className: Ze.listbox,
          ownerState: it
        }, ro, $e, {
          ref: Vo,
          children: je.map((L, ae) => U ? Kt({
            key: L.key,
            group: L.group,
            children: L.options.map((we, _e) => Ft(we, L.index + _e))
          }) : Ft(L, ae))
        })) : null]
      }))
    })) : null]
  });
});
process.env.NODE_ENV !== "production" && (uu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the portion of the selected suggestion that the user hasn't typed,
   * known as the completion string, appears inline after the input cursor in the textbox.
   * The inline completion string is visually highlighted and has a selected state.
   * @default false
   */
  autoComplete: t.bool,
  /**
   * If `true`, the first option is automatically highlighted.
   * @default false
   */
  autoHighlight: t.bool,
  /**
   * If `true`, the selected option becomes the value of the input
   * when the Autocomplete loses focus unless the user chooses
   * a different option or changes the character string in the input.
   *
   * When using the `freeSolo` mode, the typed value will be the input value
   * if the Autocomplete loses focus without highlighting an option.
   * @default false
   */
  autoSelect: t.bool,
  /**
   * Control if the input should be blurred when an option is selected:
   *
   * - `false` the input is not blurred.
   * - `true` the input is always blurred.
   * - `touch` the input is blurred after a touch event.
   * - `mouse` the input is blurred after a mouse event.
   * @default false
   */
  blurOnSelect: t.oneOfType([t.oneOf(["mouse", "touch"]), t.bool]),
  /**
   * Props applied to the [`Chip`](/material-ui/api/chip/) element.
   */
  ChipProps: t.object,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The icon to display in place of the default clear icon.
   * @default <ClearIcon fontSize="small" />
   */
  clearIcon: t.node,
  /**
   * If `true`, the input's text is cleared on blur if no value is selected.
   *
   * Set it to `true` if you want to help the user enter a new value.
   * Set it to `false` if you want to help the user resume their search.
   * @default !props.freeSolo
   */
  clearOnBlur: t.bool,
  /**
   * If `true`, clear all values when the user presses escape and the popup is closed.
   * @default false
   */
  clearOnEscape: t.bool,
  /**
   * Override the default text for the *clear* icon button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Clear'
   */
  clearText: t.string,
  /**
   * Override the default text for the *close popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Close'
   */
  closeText: t.string,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  componentsProps: t.shape({
    clearIndicator: t.object,
    paper: t.object,
    popper: t.object,
    popupIndicator: t.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   * @default props.multiple ? [] : null
   */
  defaultValue: ut(t.any, (e) => e.multiple && e.defaultValue !== void 0 && !Array.isArray(e.defaultValue) ? new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${e.defaultValue} was provided.`].join(`
`)) : null),
  /**
   * If `true`, the input can't be cleared.
   * @default false
   */
  disableClearable: t.bool,
  /**
   * If `true`, the popup won't close when a value is selected.
   * @default false
   */
  disableCloseOnSelect: t.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, will allow focus on disabled items.
   * @default false
   */
  disabledItemsFocusable: t.bool,
  /**
   * If `true`, the list box in the popup will not wrap focus.
   * @default false
   */
  disableListWrap: t.bool,
  /**
   * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: t.bool,
  /**
   * A function that determines the filtered options to be rendered on search.
   *
   * @default createFilterOptions()
   * @param {Value[]} options The options to render.
   * @param {object} state The state of the component.
   * @returns {Value[]}
   */
  filterOptions: t.func,
  /**
   * If `true`, hide the selected options from the list box.
   * @default false
   */
  filterSelectedOptions: t.bool,
  /**
   * Force the visibility display of the popup icon.
   * @default 'auto'
   */
  forcePopupIcon: t.oneOfType([t.oneOf(["auto"]), t.bool]),
  /**
   * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
   * @default false
   */
  freeSolo: t.bool,
  /**
   * If `true`, the input will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The label to display when the tags are truncated (`limitTags`).
   *
   * @param {number} more The number of truncated tags.
   * @returns {ReactNode}
   * @default (more) => `+${more}`
   */
  getLimitTagsText: t.func,
  /**
   * Used to determine the disabled state for a given option.
   *
   * @param {Value} option The option to test.
   * @returns {boolean}
   */
  getOptionDisabled: t.func,
  /**
   * Used to determine the key for a given option.
   * This can be useful when the labels of options are not unique (since labels are used as keys by default).
   *
   * @param {Value} option The option to get the key for.
   * @returns {string | number}
   */
  getOptionKey: t.func,
  /**
   * Used to determine the string value for a given option.
   * It's used to fill the input (and the list box options if `renderOption` is not provided).
   *
   * If used in free solo mode, it must accept both the type of the options and a string.
   *
   * @param {Value} option
   * @returns {string}
   * @default (option) => option.label ?? option
   */
  getOptionLabel: t.func,
  /**
   * If provided, the options will be grouped under the returned string.
   * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
   *
   * @param {Value} options The options to group.
   * @returns {string}
   */
  groupBy: t.func,
  /**
   * If `true`, the component handles the "Home" and "End" keys when the popup is open.
   * It should move focus to the first option and last option, respectively.
   * @default !props.freeSolo
   */
  handleHomeEndKeys: t.bool,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide an id it will fall back to a randomly generated one.
   */
  id: t.string,
  /**
   * If `true`, the highlight can move to the input.
   * @default false
   */
  includeInputInList: t.bool,
  /**
   * The input value.
   */
  inputValue: t.string,
  /**
   * Used to determine if the option represents the given value.
   * Uses strict equality by default.
   * ⚠️ Both arguments need to be handled, an option can only match with one value.
   *
   * @param {Value} option The option to test.
   * @param {Value} value The value to test against.
   * @returns {boolean}
   */
  isOptionEqualToValue: t.func,
  /**
   * The maximum number of tags that will be visible when not focused.
   * Set `-1` to disable the limit.
   * @default -1
   */
  limitTags: lt,
  /**
   * The component used to render the listbox.
   * @default 'ul'
   */
  ListboxComponent: t.elementType,
  /**
   * Props applied to the Listbox element.
   */
  ListboxProps: t.object,
  /**
   * If `true`, the component is in a loading state.
   * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).
   * @default false
   */
  loading: t.bool,
  /**
   * Text to display when in a loading state.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Loading…'
   */
  loadingText: t.node,
  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   * @default false
   */
  multiple: t.bool,
  /**
   * Text to display when there are no options.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'No options'
   */
  noOptionsText: t.node,
  /**
   * Callback fired when the value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {Value|Value[]} value The new value of the component.
   * @param {string} reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
   * @param {string} [details]
   */
  onChange: t.func,
  /**
   * Callback fired when the popup requests to be closed.
   * Use in controlled mode (see open).
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.
   */
  onClose: t.func,
  /**
   * Callback fired when the highlight option changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {Value} option The highlighted option.
   * @param {string} reason Can be: `"keyboard"`, `"auto"`, `"mouse"`, `"touch"`.
   */
  onHighlightChange: t.func,
  /**
   * Callback fired when the input value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {string} value The new value of the text input.
   * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`.
   */
  onInputChange: t.func,
  /**
   * @ignore
   */
  onKeyDown: t.func,
  /**
   * Callback fired when the popup requests to be opened.
   * Use in controlled mode (see open).
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onOpen: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool,
  /**
   * If `true`, the popup will open on input focus.
   * @default false
   */
  openOnFocus: t.bool,
  /**
   * Override the default text for the *open popup* icon button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Open'
   */
  openText: t.string,
  /**
   * Array of options.
   */
  options: t.array.isRequired,
  /**
   * The component used to render the body of the popup.
   * @default Paper
   */
  PaperComponent: t.elementType,
  /**
   * The component used to position the popup.
   * @default Popper
   */
  PopperComponent: t.elementType,
  /**
   * The icon to display in place of the default popup icon.
   * @default <ArrowDropDownIcon />
   */
  popupIcon: t.node,
  /**
   * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
   * @default false
   */
  readOnly: t.bool,
  /**
   * Render the group.
   *
   * @param {AutocompleteRenderGroupParams} params The group to render.
   * @returns {ReactNode}
   */
  renderGroup: t.func,
  /**
   * Render the input.
   *
   * @param {object} params
   * @returns {ReactNode}
   */
  renderInput: t.func.isRequired,
  /**
   * Render the option, use `getOptionLabel` by default.
   *
   * @param {object} props The props to apply on the li element.
   * @param {Value} option The option to render.
   * @param {object} state The state of each option.
   * @param {object} ownerState The state of the Autocomplete component.
   * @returns {ReactNode}
   */
  renderOption: t.func,
  /**
   * Render the selected value.
   *
   * @param {Value[]} value The `value` provided to the component.
   * @param {function} getTagProps A tag props getter.
   * @param {object} ownerState The state of the Autocomplete component.
   * @returns {ReactNode}
   */
  renderTags: t.func,
  /**
   * If `true`, the input's text is selected on focus.
   * It helps the user clear the selected value.
   * @default !props.freeSolo
   */
  selectOnFocus: t.bool,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium"]), t.string]),
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    clearIndicator: t.object,
    paper: t.object,
    popper: t.object,
    popupIndicator: t.object
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value of the autocomplete.
   *
   * The value must have reference equality with the option in order to be selected.
   * You can customize the equality behavior with the `isOptionEqualToValue` prop.
   */
  value: ut(t.any, (e) => e.multiple && e.value !== void 0 && !Array.isArray(e.value) ? new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${e.value} was provided.`].join(`
`)) : null)
});
const lk = uu, Wy = Je(/* @__PURE__ */ x("path", {
  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
}), "Person");
function Hy(e) {
  return ee("MuiAvatar", e);
}
const qy = ne("MuiAvatar", ["root", "colorDefault", "circular", "rounded", "square", "img", "fallback"]), Gy = qy, Ky = ["alt", "children", "className", "component", "slots", "slotProps", "imgProps", "sizes", "src", "srcSet", "variant"], Yy = (e) => {
  const {
    classes: o,
    variant: n,
    colorDefault: r
  } = e;
  return te({
    root: ["root", n, r && "colorDefault"],
    img: ["img"],
    fallback: ["fallback"]
  }, Hy, o);
}, Xy = P("div", {
  name: "MuiAvatar",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], n.colorDefault && o.colorDefault];
  }
})(({
  theme: e
}) => ({
  position: "relative",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  flexShrink: 0,
  width: 40,
  height: 40,
  fontFamily: e.typography.fontFamily,
  fontSize: e.typography.pxToRem(20),
  lineHeight: 1,
  borderRadius: "50%",
  overflow: "hidden",
  userSelect: "none",
  variants: [{
    props: {
      variant: "rounded"
    },
    style: {
      borderRadius: (e.vars || e).shape.borderRadius
    }
  }, {
    props: {
      variant: "square"
    },
    style: {
      borderRadius: 0
    }
  }, {
    props: {
      colorDefault: !0
    },
    style: u({
      color: (e.vars || e).palette.background.default
    }, e.vars ? {
      backgroundColor: e.vars.palette.Avatar.defaultBg
    } : u({
      backgroundColor: e.palette.grey[400]
    }, e.applyStyles("dark", {
      backgroundColor: e.palette.grey[600]
    })))
  }]
})), Qy = P("img", {
  name: "MuiAvatar",
  slot: "Img",
  overridesResolver: (e, o) => o.img
})({
  width: "100%",
  height: "100%",
  textAlign: "center",
  // Handle non-square image. The property isn't supported by IE11.
  objectFit: "cover",
  // Hide alt text.
  color: "transparent",
  // Hide the image broken icon, only works on Chrome.
  textIndent: 1e4
}), Zy = P(Wy, {
  name: "MuiAvatar",
  slot: "Fallback",
  overridesResolver: (e, o) => o.fallback
})({
  width: "75%",
  height: "75%"
});
function Jy({
  crossOrigin: e,
  referrerPolicy: o,
  src: n,
  srcSet: r
}) {
  const [s, a] = f.useState(!1);
  return f.useEffect(() => {
    if (!n && !r)
      return;
    a(!1);
    let i = !0;
    const l = new Image();
    return l.onload = () => {
      i && a("loaded");
    }, l.onerror = () => {
      i && a("error");
    }, l.crossOrigin = e, l.referrerPolicy = o, l.src = n, r && (l.srcset = r), () => {
      i = !1;
    };
  }, [e, o, n, r]), s;
}
const du = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiAvatar"
  }), {
    alt: s,
    children: a,
    className: i,
    component: l = "div",
    slots: c = {},
    slotProps: d = {},
    imgProps: p,
    sizes: m,
    src: b,
    srcSet: h,
    variant: v = "circular"
  } = r, C = z(r, Ky);
  let g = null;
  const y = Jy(u({}, p, {
    src: b,
    srcSet: h
  })), $ = b || h, T = $ && y !== "error", O = u({}, r, {
    colorDefault: !T,
    component: l,
    variant: v
  }), S = Yy(O), [R, w] = Xr("img", {
    className: S.img,
    elementType: Qy,
    externalForwardedProps: {
      slots: c,
      slotProps: {
        img: u({}, p, d.img)
      }
    },
    additionalProps: {
      alt: s,
      src: b,
      srcSet: h,
      sizes: m
    },
    ownerState: O
  });
  return T ? g = /* @__PURE__ */ x(R, u({}, w)) : a || a === 0 ? g = a : $ && s ? g = s[0] : g = /* @__PURE__ */ x(Zy, {
    ownerState: O,
    className: S.fallback
  }), /* @__PURE__ */ x(Xy, u({
    as: l,
    ownerState: O,
    className: D(S.root, i),
    ref: n
  }, C, {
    children: g
  }));
});
process.env.NODE_ENV !== "production" && (du.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Used in combination with `src` or `srcSet` to
   * provide an alt attribute for the rendered `img` element.
   */
  alt: t.string,
  /**
   * Used to render icon or text elements inside the Avatar if `src` is not set.
   * This can be an element, or just a string.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attributes) applied to the `img` element if the component is used to display an image.
   * It can be used to listen for the loading error event.
   * @deprecated Use `slotProps.img` instead. This prop will be removed in v7. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/).
   */
  imgProps: t.object,
  /**
   * The `sizes` attribute for the `img` element.
   */
  sizes: t.string,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    img: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    img: t.elementType
  }),
  /**
   * The `src` attribute for the `img` element.
   */
  src: t.string,
  /**
   * The `srcSet` attribute for the `img` element.
   * Use this attribute for responsive image display.
   */
  srcSet: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The shape of the avatar.
   * @default 'circular'
   */
  variant: t.oneOfType([t.oneOf(["circular", "rounded", "square"]), t.string])
});
const eC = du;
function tC(e) {
  return ee("MuiAvatarGroup", e);
}
const oC = ne("MuiAvatarGroup", ["root", "avatar"]), nC = oC, rC = ["children", "className", "component", "componentsProps", "max", "renderSurplus", "slotProps", "spacing", "total", "variant"], qi = {
  small: -16,
  medium: null
}, sC = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"],
    avatar: ["avatar"]
  }, tC, o);
}, aC = P("div", {
  name: "MuiAvatarGroup",
  slot: "Root",
  overridesResolver: (e, o) => u({
    [`& .${nC.avatar}`]: o.avatar
  }, o.root)
})(({
  theme: e,
  ownerState: o
}) => {
  const n = o.spacing && qi[o.spacing] !== void 0 ? qi[o.spacing] : -o.spacing;
  return {
    [`& .${Gy.root}`]: {
      border: `2px solid ${(e.vars || e).palette.background.default}`,
      boxSizing: "content-box",
      marginLeft: n ?? -8,
      "&:last-child": {
        marginLeft: 0
      }
    },
    display: "flex",
    flexDirection: "row-reverse"
  };
}), pu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r;
  const s = oe({
    props: o,
    name: "MuiAvatarGroup"
  }), {
    children: a,
    className: i,
    component: l = "div",
    componentsProps: c = {},
    max: d = 5,
    renderSurplus: p,
    slotProps: m = {},
    spacing: b = "medium",
    total: h,
    variant: v = "circular"
  } = s, C = z(s, rC);
  let g = d < 2 ? 2 : d;
  const y = u({}, s, {
    max: d,
    spacing: b,
    component: l,
    variant: v
  }), $ = sC(y), T = f.Children.toArray(a).filter((N) => (process.env.NODE_ENV !== "production" && to.isFragment(N) && console.error(["MUI: The AvatarGroup component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), /* @__PURE__ */ f.isValidElement(N))), O = h || T.length;
  O === g && (g += 1), g = Math.min(O + 1, g);
  const S = Math.min(T.length, g - 1), R = Math.max(O - g, O - S, 0), w = p ? p(R) : `+${R}`, E = (r = m.additionalAvatar) != null ? r : c.additionalAvatar;
  return /* @__PURE__ */ Ce(aC, u({
    as: l,
    ownerState: y,
    className: D($.root, i),
    ref: n
  }, C, {
    children: [R ? /* @__PURE__ */ x(eC, u({
      variant: v
    }, E, {
      className: D($.avatar, E == null ? void 0 : E.className),
      children: w
    })) : null, T.slice(0, S).reverse().map((N) => /* @__PURE__ */ f.cloneElement(N, {
      className: D(N.props.className, $.avatar),
      variant: N.props.variant || v
    }))]
  }));
});
process.env.NODE_ENV !== "production" && (pu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The avatars to stack.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: t.shape({
    additionalAvatar: t.object
  }),
  /**
   * Max avatars to show before +x.
   * @default 5
   */
  max: ut(t.number, (e) => e.max < 2 ? new Error(["MUI: The prop `max` should be equal to 2 or above.", "A value below is clamped to 2."].join(`
`)) : null),
  /**
   * custom renderer of extraAvatars
   * @param {number} surplus number of extra avatars
   * @returns {React.ReactNode} custom element to display
   */
  renderSurplus: t.func,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: t.shape({
    additionalAvatar: t.object
  }),
  /**
   * Spacing between avatars.
   * @default 'medium'
   */
  spacing: t.oneOfType([t.oneOf(["medium", "small"]), t.number]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The total number of avatars. Used for calculating the number of extra avatars.
   * @default children.length
   */
  total: t.number,
  /**
   * The variant to use.
   * @default 'circular'
   */
  variant: t.oneOfType([t.oneOf(["circular", "rounded", "square"]), t.string])
});
const ck = pu, iC = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"], lC = {
  entering: {
    opacity: 1
  },
  entered: {
    opacity: 1
  }
}, fu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = rt(), s = {
    enter: r.transitions.duration.enteringScreen,
    exit: r.transitions.duration.leavingScreen
  }, {
    addEndListener: a,
    appear: i = !0,
    children: l,
    easing: c,
    in: d,
    onEnter: p,
    onEntered: m,
    onEntering: b,
    onExit: h,
    onExited: v,
    onExiting: C,
    style: g,
    timeout: y = s,
    // eslint-disable-next-line react/prop-types
    TransitionComponent: $ = hr
  } = o, T = z(o, iC), O = f.useRef(null), S = Ve(O, l.ref, n), R = (B) => (j) => {
    if (B) {
      const V = O.current;
      j === void 0 ? B(V) : B(V, j);
    }
  }, w = R(b), E = R((B, j) => {
    gs(B);
    const V = eo({
      style: g,
      timeout: y,
      easing: c
    }, {
      mode: "enter"
    });
    B.style.webkitTransition = r.transitions.create("opacity", V), B.style.transition = r.transitions.create("opacity", V), p && p(B, j);
  }), N = R(m), M = R(C), I = R((B) => {
    const j = eo({
      style: g,
      timeout: y,
      easing: c
    }, {
      mode: "exit"
    });
    B.style.webkitTransition = r.transitions.create("opacity", j), B.style.transition = r.transitions.create("opacity", j), h && h(B);
  }), F = R(v);
  return /* @__PURE__ */ x($, u({
    appear: i,
    in: d,
    nodeRef: O,
    onEnter: E,
    onEntered: N,
    onEntering: w,
    onExit: I,
    onExited: F,
    onExiting: M,
    addEndListener: (B) => {
      a && a(O.current, B);
    },
    timeout: y
  }, T, {
    children: (B, j) => /* @__PURE__ */ f.cloneElement(l, u({
      style: u({
        opacity: 0,
        visibility: B === "exited" && !d ? "hidden" : void 0
      }, lC[B], g, l.props.style),
      ref: S
    }, j))
  }));
});
process.env.NODE_ENV !== "production" && (fu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: t.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: t.bool,
  /**
   * A single child content element.
   */
  children: _o.isRequired,
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: t.oneOfType([t.shape({
    enter: t.string,
    exit: t.string
  }), t.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: t.bool,
  /**
   * @ignore
   */
  onEnter: t.func,
  /**
   * @ignore
   */
  onEntered: t.func,
  /**
   * @ignore
   */
  onEntering: t.func,
  /**
   * @ignore
   */
  onExit: t.func,
  /**
   * @ignore
   */
  onExited: t.func,
  /**
   * @ignore
   */
  onExiting: t.func,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  timeout: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })])
});
const mu = fu;
function cC(e) {
  return ee("MuiBackdrop", e);
}
const uC = ne("MuiBackdrop", ["root", "invisible"]), uk = uC, dC = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"], pC = (e) => {
  const {
    classes: o,
    invisible: n
  } = e;
  return te({
    root: ["root", n && "invisible"]
  }, cC, o);
}, fC = P("div", {
  name: "MuiBackdrop",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.invisible && o.invisible];
  }
})(({
  ownerState: e
}) => u({
  position: "fixed",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  right: 0,
  bottom: 0,
  top: 0,
  left: 0,
  backgroundColor: "rgba(0, 0, 0, 0.5)",
  WebkitTapHighlightColor: "transparent"
}, e.invisible && {
  backgroundColor: "transparent"
})), bu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s, a;
  const i = oe({
    props: o,
    name: "MuiBackdrop"
  }), {
    children: l,
    className: c,
    component: d = "div",
    components: p = {},
    componentsProps: m = {},
    invisible: b = !1,
    open: h,
    slotProps: v = {},
    slots: C = {},
    TransitionComponent: g = mu,
    transitionDuration: y
  } = i, $ = z(i, dC), T = u({}, i, {
    component: d,
    invisible: b
  }), O = pC(T), S = (r = v.root) != null ? r : m.root;
  return /* @__PURE__ */ x(g, u({
    in: h,
    timeout: y
  }, $, {
    children: /* @__PURE__ */ x(fC, u({
      "aria-hidden": !0
    }, S, {
      as: (s = (a = C.root) != null ? a : p.Root) != null ? s : d,
      className: D(O.root, c, S == null ? void 0 : S.className),
      ownerState: u({}, T, S == null ? void 0 : S.ownerState),
      classes: O,
      ref: n,
      children: l
    }))
  }));
});
process.env.NODE_ENV !== "production" && (bu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: t.shape({
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: t.shape({
    root: t.object
  }),
  /**
   * If `true`, the backdrop is invisible.
   * It can be used when rendering a popover or a custom select component.
   * @default false
   */
  invisible: t.bool,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool.isRequired,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: t.shape({
    root: t.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: t.shape({
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Fade
   */
  TransitionComponent: t.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   */
  transitionDuration: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })])
});
const gu = bu;
function mC(e) {
  return oe;
}
function bC(e) {
  return ee("MuiBadge", e);
}
const gC = ne("MuiBadge", [
  "root",
  "badge",
  "dot",
  "standard",
  "anchorOriginTopRight",
  "anchorOriginBottomRight",
  "anchorOriginTopLeft",
  "anchorOriginBottomLeft",
  "invisible",
  "colorError",
  "colorInfo",
  "colorPrimary",
  "colorSecondary",
  "colorSuccess",
  "colorWarning",
  "overlapRectangular",
  "overlapCircular",
  // TODO: v6 remove the overlap value from these class keys
  "anchorOriginTopLeftCircular",
  "anchorOriginTopLeftRectangular",
  "anchorOriginTopRightCircular",
  "anchorOriginTopRightRectangular",
  "anchorOriginBottomLeftCircular",
  "anchorOriginBottomLeftRectangular",
  "anchorOriginBottomRightCircular",
  "anchorOriginBottomRightRectangular"
]), Ro = gC, hC = ["anchorOrigin", "className", "classes", "component", "components", "componentsProps", "children", "overlap", "color", "invisible", "max", "badgeContent", "slots", "slotProps", "showZero", "variant"], Ls = 10, Ds = 4, vC = mC(), yC = (e) => {
  const {
    color: o,
    anchorOrigin: n,
    invisible: r,
    overlap: s,
    variant: a,
    classes: i = {}
  } = e, l = {
    root: ["root"],
    badge: ["badge", a, r && "invisible", `anchorOrigin${k(n.vertical)}${k(n.horizontal)}`, `anchorOrigin${k(n.vertical)}${k(n.horizontal)}${k(s)}`, `overlap${k(s)}`, o !== "default" && `color${k(o)}`]
  };
  return te(l, bC, i);
}, CC = P("span", {
  name: "MuiBadge",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  position: "relative",
  display: "inline-flex",
  // For correct alignment with the text.
  verticalAlign: "middle",
  flexShrink: 0
}), xC = P("span", {
  name: "MuiBadge",
  slot: "Badge",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.badge, o[n.variant], o[`anchorOrigin${k(n.anchorOrigin.vertical)}${k(n.anchorOrigin.horizontal)}${k(n.overlap)}`], n.color !== "default" && o[`color${k(n.color)}`], n.invisible && o.invisible];
  }
})(({
  theme: e
}) => {
  var o;
  return {
    display: "flex",
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "center",
    alignContent: "center",
    alignItems: "center",
    position: "absolute",
    boxSizing: "border-box",
    fontFamily: e.typography.fontFamily,
    fontWeight: e.typography.fontWeightMedium,
    fontSize: e.typography.pxToRem(12),
    minWidth: Ls * 2,
    lineHeight: 1,
    padding: "0 6px",
    height: Ls * 2,
    borderRadius: Ls,
    zIndex: 1,
    // Render the badge on top of potential ripples.
    transition: e.transitions.create("transform", {
      easing: e.transitions.easing.easeInOut,
      duration: e.transitions.duration.enteringScreen
    }),
    variants: [...Object.keys(((o = e.vars) != null ? o : e).palette).filter((n) => {
      var r, s;
      return ((r = e.vars) != null ? r : e).palette[n].main && ((s = e.vars) != null ? s : e).palette[n].contrastText;
    }).map((n) => ({
      props: {
        color: n
      },
      style: {
        backgroundColor: (e.vars || e).palette[n].main,
        color: (e.vars || e).palette[n].contrastText
      }
    })), {
      props: {
        variant: "dot"
      },
      style: {
        borderRadius: Ds,
        height: Ds * 2,
        minWidth: Ds * 2,
        padding: 0
      }
    }, {
      props: ({
        ownerState: n
      }) => n.anchorOrigin.vertical === "top" && n.anchorOrigin.horizontal === "right" && n.overlap === "rectangular",
      style: {
        top: 0,
        right: 0,
        transform: "scale(1) translate(50%, -50%)",
        transformOrigin: "100% 0%",
        [`&.${Ro.invisible}`]: {
          transform: "scale(0) translate(50%, -50%)"
        }
      }
    }, {
      props: ({
        ownerState: n
      }) => n.anchorOrigin.vertical === "bottom" && n.anchorOrigin.horizontal === "right" && n.overlap === "rectangular",
      style: {
        bottom: 0,
        right: 0,
        transform: "scale(1) translate(50%, 50%)",
        transformOrigin: "100% 100%",
        [`&.${Ro.invisible}`]: {
          transform: "scale(0) translate(50%, 50%)"
        }
      }
    }, {
      props: ({
        ownerState: n
      }) => n.anchorOrigin.vertical === "top" && n.anchorOrigin.horizontal === "left" && n.overlap === "rectangular",
      style: {
        top: 0,
        left: 0,
        transform: "scale(1) translate(-50%, -50%)",
        transformOrigin: "0% 0%",
        [`&.${Ro.invisible}`]: {
          transform: "scale(0) translate(-50%, -50%)"
        }
      }
    }, {
      props: ({
        ownerState: n
      }) => n.anchorOrigin.vertical === "bottom" && n.anchorOrigin.horizontal === "left" && n.overlap === "rectangular",
      style: {
        bottom: 0,
        left: 0,
        transform: "scale(1) translate(-50%, 50%)",
        transformOrigin: "0% 100%",
        [`&.${Ro.invisible}`]: {
          transform: "scale(0) translate(-50%, 50%)"
        }
      }
    }, {
      props: ({
        ownerState: n
      }) => n.anchorOrigin.vertical === "top" && n.anchorOrigin.horizontal === "right" && n.overlap === "circular",
      style: {
        top: "14%",
        right: "14%",
        transform: "scale(1) translate(50%, -50%)",
        transformOrigin: "100% 0%",
        [`&.${Ro.invisible}`]: {
          transform: "scale(0) translate(50%, -50%)"
        }
      }
    }, {
      props: ({
        ownerState: n
      }) => n.anchorOrigin.vertical === "bottom" && n.anchorOrigin.horizontal === "right" && n.overlap === "circular",
      style: {
        bottom: "14%",
        right: "14%",
        transform: "scale(1) translate(50%, 50%)",
        transformOrigin: "100% 100%",
        [`&.${Ro.invisible}`]: {
          transform: "scale(0) translate(50%, 50%)"
        }
      }
    }, {
      props: ({
        ownerState: n
      }) => n.anchorOrigin.vertical === "top" && n.anchorOrigin.horizontal === "left" && n.overlap === "circular",
      style: {
        top: "14%",
        left: "14%",
        transform: "scale(1) translate(-50%, -50%)",
        transformOrigin: "0% 0%",
        [`&.${Ro.invisible}`]: {
          transform: "scale(0) translate(-50%, -50%)"
        }
      }
    }, {
      props: ({
        ownerState: n
      }) => n.anchorOrigin.vertical === "bottom" && n.anchorOrigin.horizontal === "left" && n.overlap === "circular",
      style: {
        bottom: "14%",
        left: "14%",
        transform: "scale(1) translate(-50%, 50%)",
        transformOrigin: "0% 100%",
        [`&.${Ro.invisible}`]: {
          transform: "scale(0) translate(-50%, 50%)"
        }
      }
    }, {
      props: {
        invisible: !0
      },
      style: {
        transition: e.transitions.create("transform", {
          easing: e.transitions.easing.easeInOut,
          duration: e.transitions.duration.leavingScreen
        })
      }
    }]
  };
}), hu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s, a, i, l, c;
  const d = vC({
    props: o,
    name: "MuiBadge"
  }), {
    anchorOrigin: p = {
      vertical: "top",
      horizontal: "right"
    },
    className: m,
    component: b,
    components: h = {},
    componentsProps: v = {},
    children: C,
    overlap: g = "rectangular",
    color: y = "default",
    invisible: $ = !1,
    max: T = 99,
    badgeContent: O,
    slots: S,
    slotProps: R,
    showZero: w = !1,
    variant: E = "standard"
  } = d, N = z(d, hC), {
    badgeContent: M,
    invisible: I,
    max: F,
    displayValue: A
  } = yg({
    max: T,
    invisible: $,
    badgeContent: O,
    showZero: w
  }), B = ha({
    anchorOrigin: p,
    color: y,
    overlap: g,
    variant: E,
    badgeContent: O
  }), j = I || M == null && E !== "dot", {
    color: V = y,
    overlap: U = g,
    anchorOrigin: _ = p,
    variant: W = E
  } = j ? B : d, de = W !== "dot" ? A : void 0, Te = u({}, d, {
    badgeContent: M,
    invisible: j,
    max: F,
    displayValue: de,
    showZero: w,
    anchorOrigin: _,
    color: V,
    overlap: U,
    variant: W
  }), $e = yC(Te), ie = (r = (s = S == null ? void 0 : S.root) != null ? s : h.Root) != null ? r : CC, se = (a = (i = S == null ? void 0 : S.badge) != null ? i : h.Badge) != null ? a : xC, ue = (l = R == null ? void 0 : R.root) != null ? l : v.root, Z = (c = R == null ? void 0 : R.badge) != null ? c : v.badge, he = at({
    elementType: ie,
    externalSlotProps: ue,
    externalForwardedProps: N,
    additionalProps: {
      ref: n,
      as: b
    },
    ownerState: Te,
    className: D(ue == null ? void 0 : ue.className, $e.root, m)
  }), q = at({
    elementType: se,
    externalSlotProps: Z,
    ownerState: Te,
    className: D($e.badge, Z == null ? void 0 : Z.className)
  });
  return /* @__PURE__ */ Ce(ie, u({}, he, {
    children: [C, /* @__PURE__ */ x(se, u({}, q, {
      children: de
    }))]
  }));
});
process.env.NODE_ENV !== "production" && (hu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The anchor of the badge.
   * @default {
   *   vertical: 'top',
   *   horizontal: 'right',
   * }
   */
  anchorOrigin: t.shape({
    horizontal: t.oneOf(["left", "right"]).isRequired,
    vertical: t.oneOf(["bottom", "top"]).isRequired
  }),
  /**
   * The content rendered within the badge.
   */
  badgeContent: t.node,
  /**
   * The badge will be added relative to this node.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: t.oneOfType([t.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: t.shape({
    Badge: t.elementType,
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: t.shape({
    badge: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * If `true`, the badge is invisible.
   * @default false
   */
  invisible: t.bool,
  /**
   * Max count to show.
   * @default 99
   */
  max: t.number,
  /**
   * Wrapped shape the badge should overlap.
   * @default 'rectangular'
   */
  overlap: t.oneOf(["circular", "rectangular"]),
  /**
   * Controls whether the badge is hidden when `badgeContent` is zero.
   * @default false
   */
  showZero: t.bool,
  /**
   * The props used for each slot inside the Badge.
   * @default {}
   */
  slotProps: t.shape({
    badge: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside the Badge.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    badge: t.elementType,
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'standard'
   */
  variant: t.oneOfType([t.oneOf(["dot", "standard"]), t.string])
});
const dk = hu;
function TC(e) {
  return ee("MuiBottomNavigation", e);
}
const OC = ne("MuiBottomNavigation", ["root"]), pk = OC, $C = ["children", "className", "component", "onChange", "showLabels", "value"], SC = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"]
  }, TC, o);
}, RC = P("div", {
  name: "MuiBottomNavigation",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(({
  theme: e
}) => ({
  display: "flex",
  justifyContent: "center",
  height: 56,
  backgroundColor: (e.vars || e).palette.background.paper
})), vu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiBottomNavigation"
  }), {
    children: s,
    className: a,
    component: i = "div",
    onChange: l,
    showLabels: c = !1,
    value: d
  } = r, p = z(r, $C), m = u({}, r, {
    component: i,
    showLabels: c
  }), b = SC(m);
  return /* @__PURE__ */ x(RC, u({
    as: i,
    className: D(b.root, a),
    ref: n,
    ownerState: m
  }, p, {
    children: f.Children.map(s, (h, v) => {
      if (!/* @__PURE__ */ f.isValidElement(h))
        return null;
      process.env.NODE_ENV !== "production" && to.isFragment(h) && console.error(["MUI: The BottomNavigation component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`));
      const C = h.props.value === void 0 ? v : h.props.value;
      return /* @__PURE__ */ f.cloneElement(h, {
        selected: C === d,
        showLabel: h.props.showLabel !== void 0 ? h.props.showLabel : c,
        value: C,
        onChange: l
      });
    })
  }));
});
process.env.NODE_ENV !== "production" && (vu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Callback fired when the value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {any} value We default to the index of the child.
   */
  onChange: t.func,
  /**
   * If `true`, all `BottomNavigationAction`s will show their labels.
   * By default, only the selected `BottomNavigationAction` will show its label.
   * @default false
   */
  showLabels: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value of the currently selected `BottomNavigationAction`.
   */
  value: t.any
});
const fk = vu;
function wC(e) {
  return ee("MuiBottomNavigationAction", e);
}
const EC = ne("MuiBottomNavigationAction", ["root", "iconOnly", "selected", "label"]), yu = EC, PC = ["className", "icon", "label", "onChange", "onClick", "selected", "showLabel", "value"], NC = (e) => {
  const {
    classes: o,
    showLabel: n,
    selected: r
  } = e;
  return te({
    root: ["root", !n && !r && "iconOnly", r && "selected"],
    label: ["label", !n && !r && "iconOnly", r && "selected"]
  }, wC, o);
}, IC = P(pt, {
  name: "MuiBottomNavigationAction",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, !n.showLabel && !n.selected && o.iconOnly];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  transition: e.transitions.create(["color", "padding-top"], {
    duration: e.transitions.duration.short
  }),
  padding: "0px 12px",
  minWidth: 80,
  maxWidth: 168,
  color: (e.vars || e).palette.text.secondary,
  flexDirection: "column",
  flex: "1"
}, !o.showLabel && !o.selected && {
  paddingTop: 14
}, !o.showLabel && !o.selected && !o.label && {
  paddingTop: 0
}, {
  [`&.${yu.selected}`]: {
    color: (e.vars || e).palette.primary.main
  }
})), kC = P("span", {
  name: "MuiBottomNavigationAction",
  slot: "Label",
  overridesResolver: (e, o) => o.label
})(({
  theme: e,
  ownerState: o
}) => u({
  fontFamily: e.typography.fontFamily,
  fontSize: e.typography.pxToRem(12),
  opacity: 1,
  transition: "font-size 0.2s, opacity 0.2s",
  transitionDelay: "0.1s"
}, !o.showLabel && !o.selected && {
  opacity: 0,
  transitionDelay: "0s"
}, {
  [`&.${yu.selected}`]: {
    fontSize: e.typography.pxToRem(14)
  }
})), Cu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiBottomNavigationAction"
  }), {
    className: s,
    icon: a,
    label: i,
    onChange: l,
    onClick: c,
    value: d
  } = r, p = z(r, PC), m = r, b = NC(m), h = (v) => {
    l && l(v, d), c && c(v);
  };
  return /* @__PURE__ */ Ce(IC, u({
    ref: n,
    className: D(b.root, s),
    focusRipple: !0,
    onClick: h,
    ownerState: m
  }, p, {
    children: [a, /* @__PURE__ */ x(kC, {
      className: b.label,
      ownerState: m,
      children: i
    })]
  }));
});
process.env.NODE_ENV !== "production" && (Cu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop isn't supported.
   * Use the `component` prop if you need to change the children structure.
   */
  children: ga,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The icon to display.
   */
  icon: t.node,
  /**
   * The label element.
   */
  label: t.node,
  /**
   * @ignore
   */
  onChange: t.func,
  /**
   * @ignore
   */
  onClick: t.func,
  /**
   * If `true`, the `BottomNavigationAction` will show its label.
   * By default, only the selected `BottomNavigationAction`
   * inside `BottomNavigation` will show its label.
   *
   * The prop defaults to the value (`false`) inherited from the parent BottomNavigation component.
   */
  showLabel: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * You can provide your own value. Otherwise, we fallback to the child position index.
   */
  value: t.any
});
const mk = Cu, MC = Je(/* @__PURE__ */ x("path", {
  d: "M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
}), "MoreHoriz"), BC = ["slots", "slotProps"], LC = P(pt)(({
  theme: e
}) => u({
  display: "flex",
  marginLeft: `calc(${e.spacing(1)} * 0.5)`,
  marginRight: `calc(${e.spacing(1)} * 0.5)`
}, e.palette.mode === "light" ? {
  backgroundColor: e.palette.grey[100],
  color: e.palette.grey[700]
} : {
  backgroundColor: e.palette.grey[700],
  color: e.palette.grey[100]
}, {
  borderRadius: 2,
  "&:hover, &:focus": u({}, e.palette.mode === "light" ? {
    backgroundColor: e.palette.grey[200]
  } : {
    backgroundColor: e.palette.grey[600]
  }),
  "&:active": u({
    boxShadow: e.shadows[0]
  }, e.palette.mode === "light" ? {
    backgroundColor: Gr(e.palette.grey[200], 0.12)
  } : {
    backgroundColor: Gr(e.palette.grey[600], 0.12)
  })
})), DC = P(MC)({
  width: 24,
  height: 16
});
function xu(e) {
  const {
    slots: o = {},
    slotProps: n = {}
  } = e, r = z(e, BC), s = e;
  return /* @__PURE__ */ x("li", {
    children: /* @__PURE__ */ x(LC, u({
      focusRipple: !0
    }, r, {
      ownerState: s,
      children: /* @__PURE__ */ x(DC, u({
        as: o.CollapsedIcon,
        ownerState: s
      }, n.collapsedIcon))
    }))
  });
}
process.env.NODE_ENV !== "production" && (xu.propTypes = {
  /**
   * The props used for the CollapsedIcon slot.
   * @default {}
   */
  slotProps: t.shape({
    collapsedIcon: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside the BreadcumbCollapsed.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    CollapsedIcon: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.object
});
function AC(e) {
  return ee("MuiBreadcrumbs", e);
}
const FC = ne("MuiBreadcrumbs", ["root", "ol", "li", "separator"]), jC = FC, _C = ["children", "className", "component", "slots", "slotProps", "expandText", "itemsAfterCollapse", "itemsBeforeCollapse", "maxItems", "separator"], zC = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"],
    li: ["li"],
    ol: ["ol"],
    separator: ["separator"]
  }, AC, o);
}, VC = P(xt, {
  name: "MuiBreadcrumbs",
  slot: "Root",
  overridesResolver: (e, o) => [{
    [`& .${jC.li}`]: o.li
  }, o.root]
})({}), UC = P("ol", {
  name: "MuiBreadcrumbs",
  slot: "Ol",
  overridesResolver: (e, o) => o.ol
})({
  display: "flex",
  flexWrap: "wrap",
  alignItems: "center",
  padding: 0,
  margin: 0,
  listStyle: "none"
}), WC = P("li", {
  name: "MuiBreadcrumbs",
  slot: "Separator",
  overridesResolver: (e, o) => o.separator
})({
  display: "flex",
  userSelect: "none",
  marginLeft: 8,
  marginRight: 8
});
function HC(e, o, n, r) {
  return e.reduce((s, a, i) => (i < e.length - 1 ? s = s.concat(a, /* @__PURE__ */ x(WC, {
    "aria-hidden": !0,
    className: o,
    ownerState: r,
    children: n
  }, `separator-${i}`)) : s.push(a), s), []);
}
const Tu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiBreadcrumbs"
  }), {
    children: s,
    className: a,
    component: i = "nav",
    slots: l = {},
    slotProps: c = {},
    expandText: d = "Show path",
    itemsAfterCollapse: p = 1,
    itemsBeforeCollapse: m = 1,
    maxItems: b = 8,
    separator: h = "/"
  } = r, v = z(r, _C), [C, g] = f.useState(!1), y = u({}, r, {
    component: i,
    expanded: C,
    expandText: d,
    itemsAfterCollapse: p,
    itemsBeforeCollapse: m,
    maxItems: b,
    separator: h
  }), $ = zC(y), T = at({
    elementType: l.CollapsedIcon,
    externalSlotProps: c.collapsedIcon,
    ownerState: y
  }), O = f.useRef(null), S = (w) => {
    const E = () => {
      g(!0);
      const N = O.current.querySelector("a[href],button,[tabindex]");
      N && N.focus();
    };
    return m + p >= w.length ? (process.env.NODE_ENV !== "production" && console.error(["MUI: You have provided an invalid combination of props to the Breadcrumbs.", `itemsAfterCollapse={${p}} + itemsBeforeCollapse={${m}} >= maxItems={${b}}`].join(`
`)), w) : [...w.slice(0, m), /* @__PURE__ */ x(xu, {
      "aria-label": d,
      slots: {
        CollapsedIcon: l.CollapsedIcon
      },
      slotProps: {
        collapsedIcon: T
      },
      onClick: E
    }, "ellipsis"), ...w.slice(w.length - p, w.length)];
  }, R = f.Children.toArray(s).filter((w) => (process.env.NODE_ENV !== "production" && to.isFragment(w) && console.error(["MUI: The Breadcrumbs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), /* @__PURE__ */ f.isValidElement(w))).map((w, E) => /* @__PURE__ */ x("li", {
    className: $.li,
    children: w
  }, `child-${E}`));
  return /* @__PURE__ */ x(VC, u({
    ref: n,
    component: i,
    color: "text.secondary",
    className: D($.root, a),
    ownerState: y
  }, v, {
    children: /* @__PURE__ */ x(UC, {
      className: $.ol,
      ref: O,
      ownerState: y,
      children: HC(C || b && R.length <= b ? R : S(R), $.separator, h, y)
    })
  }));
});
process.env.NODE_ENV !== "production" && (Tu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Override the default label for the expand button.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Show path'
   */
  expandText: t.string,
  /**
   * If max items is exceeded, the number of items to show after the ellipsis.
   * @default 1
   */
  itemsAfterCollapse: lt,
  /**
   * If max items is exceeded, the number of items to show before the ellipsis.
   * @default 1
   */
  itemsBeforeCollapse: lt,
  /**
   * Specifies the maximum number of breadcrumbs to display. When there are more
   * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`
   * will be shown, with an ellipsis in between.
   * @default 8
   */
  maxItems: lt,
  /**
   * Custom separator node.
   * @default '/'
   */
  separator: t.node,
  /**
   * The props used for each slot inside the Breadcumb.
   * @default {}
   */
  slotProps: t.shape({
    collapsedIcon: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside the Breadcumb.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    CollapsedIcon: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const bk = Tu;
function qC(e) {
  return ee("MuiButton", e);
}
const GC = ne("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]), Br = GC, Ou = /* @__PURE__ */ f.createContext({});
process.env.NODE_ENV !== "production" && (Ou.displayName = "ButtonGroupContext");
const $u = Ou, Su = /* @__PURE__ */ f.createContext(void 0);
process.env.NODE_ENV !== "production" && (Su.displayName = "ButtonGroupButtonContext");
const Ru = Su, KC = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"], YC = (e) => {
  const {
    color: o,
    disableElevation: n,
    fullWidth: r,
    size: s,
    variant: a,
    classes: i
  } = e, l = {
    root: ["root", a, `${a}${k(o)}`, `size${k(s)}`, `${a}Size${k(s)}`, o === "inherit" && "colorInherit", n && "disableElevation", r && "fullWidth"],
    label: ["label"],
    startIcon: ["startIcon", `iconSize${k(s)}`],
    endIcon: ["endIcon", `iconSize${k(s)}`]
  }, c = te(l, qC, i);
  return u({}, i, c);
}, wu = (e) => u({}, e.size === "small" && {
  "& > *:nth-of-type(1)": {
    fontSize: 18
  }
}, e.size === "medium" && {
  "& > *:nth-of-type(1)": {
    fontSize: 20
  }
}, e.size === "large" && {
  "& > *:nth-of-type(1)": {
    fontSize: 22
  }
}), XC = P(pt, {
  shouldForwardProp: (e) => dt(e) || e === "classes",
  name: "MuiButton",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], o[`${n.variant}${k(n.color)}`], o[`size${k(n.size)}`], o[`${n.variant}Size${k(n.size)}`], n.color === "inherit" && o.colorInherit, n.disableElevation && o.disableElevation, n.fullWidth && o.fullWidth];
  }
})(({
  theme: e,
  ownerState: o
}) => {
  var n, r;
  const s = e.palette.mode === "light" ? e.palette.grey[300] : e.palette.grey[800], a = e.palette.mode === "light" ? e.palette.grey.A100 : e.palette.grey[700];
  return u({}, e.typography.button, {
    minWidth: 64,
    padding: "6px 16px",
    borderRadius: (e.vars || e).shape.borderRadius,
    transition: e.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
      duration: e.transitions.duration.short
    }),
    "&:hover": u({
      textDecoration: "none",
      backgroundColor: e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})` : Pe(e.palette.text.primary, e.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }, o.variant === "text" && o.color !== "inherit" && {
      backgroundColor: e.vars ? `rgba(${e.vars.palette[o.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Pe(e.palette[o.color].main, e.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }, o.variant === "outlined" && o.color !== "inherit" && {
      border: `1px solid ${(e.vars || e).palette[o.color].main}`,
      backgroundColor: e.vars ? `rgba(${e.vars.palette[o.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Pe(e.palette[o.color].main, e.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }, o.variant === "contained" && {
      backgroundColor: e.vars ? e.vars.palette.Button.inheritContainedHoverBg : a,
      boxShadow: (e.vars || e).shadows[4],
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        boxShadow: (e.vars || e).shadows[2],
        backgroundColor: (e.vars || e).palette.grey[300]
      }
    }, o.variant === "contained" && o.color !== "inherit" && {
      backgroundColor: (e.vars || e).palette[o.color].dark,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: (e.vars || e).palette[o.color].main
      }
    }),
    "&:active": u({}, o.variant === "contained" && {
      boxShadow: (e.vars || e).shadows[8]
    }),
    [`&.${Br.focusVisible}`]: u({}, o.variant === "contained" && {
      boxShadow: (e.vars || e).shadows[6]
    }),
    [`&.${Br.disabled}`]: u({
      color: (e.vars || e).palette.action.disabled
    }, o.variant === "outlined" && {
      border: `1px solid ${(e.vars || e).palette.action.disabledBackground}`
    }, o.variant === "contained" && {
      color: (e.vars || e).palette.action.disabled,
      boxShadow: (e.vars || e).shadows[0],
      backgroundColor: (e.vars || e).palette.action.disabledBackground
    })
  }, o.variant === "text" && {
    padding: "6px 8px"
  }, o.variant === "text" && o.color !== "inherit" && {
    color: (e.vars || e).palette[o.color].main
  }, o.variant === "outlined" && {
    padding: "5px 15px",
    border: "1px solid currentColor"
  }, o.variant === "outlined" && o.color !== "inherit" && {
    color: (e.vars || e).palette[o.color].main,
    border: e.vars ? `1px solid rgba(${e.vars.palette[o.color].mainChannel} / 0.5)` : `1px solid ${Pe(e.palette[o.color].main, 0.5)}`
  }, o.variant === "contained" && {
    color: e.vars ? (
      // this is safe because grey does not change between default light/dark mode
      e.vars.palette.text.primary
    ) : (n = (r = e.palette).getContrastText) == null ? void 0 : n.call(r, e.palette.grey[300]),
    backgroundColor: e.vars ? e.vars.palette.Button.inheritContainedBg : s,
    boxShadow: (e.vars || e).shadows[2]
  }, o.variant === "contained" && o.color !== "inherit" && {
    color: (e.vars || e).palette[o.color].contrastText,
    backgroundColor: (e.vars || e).palette[o.color].main
  }, o.color === "inherit" && {
    color: "inherit",
    borderColor: "currentColor"
  }, o.size === "small" && o.variant === "text" && {
    padding: "4px 5px",
    fontSize: e.typography.pxToRem(13)
  }, o.size === "large" && o.variant === "text" && {
    padding: "8px 11px",
    fontSize: e.typography.pxToRem(15)
  }, o.size === "small" && o.variant === "outlined" && {
    padding: "3px 9px",
    fontSize: e.typography.pxToRem(13)
  }, o.size === "large" && o.variant === "outlined" && {
    padding: "7px 21px",
    fontSize: e.typography.pxToRem(15)
  }, o.size === "small" && o.variant === "contained" && {
    padding: "4px 10px",
    fontSize: e.typography.pxToRem(13)
  }, o.size === "large" && o.variant === "contained" && {
    padding: "8px 22px",
    fontSize: e.typography.pxToRem(15)
  }, o.fullWidth && {
    width: "100%"
  });
}, ({
  ownerState: e
}) => e.disableElevation && {
  boxShadow: "none",
  "&:hover": {
    boxShadow: "none"
  },
  [`&.${Br.focusVisible}`]: {
    boxShadow: "none"
  },
  "&:active": {
    boxShadow: "none"
  },
  [`&.${Br.disabled}`]: {
    boxShadow: "none"
  }
}), QC = P("span", {
  name: "MuiButton",
  slot: "StartIcon",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.startIcon, o[`iconSize${k(n.size)}`]];
  }
})(({
  ownerState: e
}) => u({
  display: "inherit",
  marginRight: 8,
  marginLeft: -4
}, e.size === "small" && {
  marginLeft: -2
}, wu(e))), ZC = P("span", {
  name: "MuiButton",
  slot: "EndIcon",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.endIcon, o[`iconSize${k(n.size)}`]];
  }
})(({
  ownerState: e
}) => u({
  display: "inherit",
  marginRight: -4,
  marginLeft: 8
}, e.size === "small" && {
  marginRight: -2
}, wu(e))), Eu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = f.useContext($u), s = f.useContext(Ru), a = dc(r, o), i = oe({
    props: a,
    name: "MuiButton"
  }), {
    children: l,
    color: c = "primary",
    component: d = "button",
    className: p,
    disabled: m = !1,
    disableElevation: b = !1,
    disableFocusRipple: h = !1,
    endIcon: v,
    focusVisibleClassName: C,
    fullWidth: g = !1,
    size: y = "medium",
    startIcon: $,
    type: T,
    variant: O = "text"
  } = i, S = z(i, KC), R = u({}, i, {
    color: c,
    component: d,
    disabled: m,
    disableElevation: b,
    disableFocusRipple: h,
    fullWidth: g,
    size: y,
    type: T,
    variant: O
  }), w = YC(R), E = $ && /* @__PURE__ */ x(QC, {
    className: w.startIcon,
    ownerState: R,
    children: $
  }), N = v && /* @__PURE__ */ x(ZC, {
    className: w.endIcon,
    ownerState: R,
    children: v
  }), M = s || "";
  return /* @__PURE__ */ Ce(XC, u({
    ownerState: R,
    className: D(r.className, w.root, p, M),
    component: d,
    disabled: m,
    focusRipple: !h,
    focusVisibleClassName: D(w.focusVisible, C),
    ref: n,
    type: T
  }, S, {
    classes: w,
    children: [E, l, N]
  }));
});
process.env.NODE_ENV !== "production" && (Eu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, no elevation is used.
   * @default false
   */
  disableElevation: t.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * Element placed after the children.
   */
  endIcon: t.node,
  /**
   * @ignore
   */
  focusVisibleClassName: t.string,
  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The URL to link to when the button is clicked.
   * If defined, an `a` element will be used as the root node.
   */
  href: t.string,
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * Element placed before the children.
   */
  startIcon: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * @ignore
   */
  type: t.oneOfType([t.oneOf(["button", "reset", "submit"]), t.string]),
  /**
   * The variant to use.
   * @default 'text'
   */
  variant: t.oneOfType([t.oneOf(["contained", "outlined", "text"]), t.string])
});
const gk = Eu;
function JC(e) {
  return ee("MuiButtonGroup", e);
}
const ex = ne("MuiButtonGroup", ["root", "contained", "outlined", "text", "disableElevation", "disabled", "firstButton", "fullWidth", "vertical", "grouped", "groupedHorizontal", "groupedVertical", "groupedText", "groupedTextHorizontal", "groupedTextVertical", "groupedTextPrimary", "groupedTextSecondary", "groupedOutlined", "groupedOutlinedHorizontal", "groupedOutlinedVertical", "groupedOutlinedPrimary", "groupedOutlinedSecondary", "groupedContained", "groupedContainedHorizontal", "groupedContainedVertical", "groupedContainedPrimary", "groupedContainedSecondary", "lastButton", "middleButton"]), vt = ex, tx = ["children", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "disableRipple", "fullWidth", "orientation", "size", "variant"], ox = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [{
    [`& .${vt.grouped}`]: o.grouped
  }, {
    [`& .${vt.grouped}`]: o[`grouped${k(n.orientation)}`]
  }, {
    [`& .${vt.grouped}`]: o[`grouped${k(n.variant)}`]
  }, {
    [`& .${vt.grouped}`]: o[`grouped${k(n.variant)}${k(n.orientation)}`]
  }, {
    [`& .${vt.grouped}`]: o[`grouped${k(n.variant)}${k(n.color)}`]
  }, {
    [`& .${vt.firstButton}`]: o.firstButton
  }, {
    [`& .${vt.lastButton}`]: o.lastButton
  }, {
    [`& .${vt.middleButton}`]: o.middleButton
  }, o.root, o[n.variant], n.disableElevation === !0 && o.disableElevation, n.fullWidth && o.fullWidth, n.orientation === "vertical" && o.vertical];
}, nx = (e) => {
  const {
    classes: o,
    color: n,
    disabled: r,
    disableElevation: s,
    fullWidth: a,
    orientation: i,
    variant: l
  } = e, c = {
    root: ["root", l, i === "vertical" && "vertical", a && "fullWidth", s && "disableElevation"],
    grouped: ["grouped", `grouped${k(i)}`, `grouped${k(l)}`, `grouped${k(l)}${k(i)}`, `grouped${k(l)}${k(n)}`, r && "disabled"],
    firstButton: ["firstButton"],
    lastButton: ["lastButton"],
    middleButton: ["middleButton"]
  };
  return te(c, JC, o);
}, rx = P("div", {
  name: "MuiButtonGroup",
  slot: "Root",
  overridesResolver: ox
})(({
  theme: e,
  ownerState: o
}) => u({
  display: "inline-flex",
  borderRadius: (e.vars || e).shape.borderRadius
}, o.variant === "contained" && {
  boxShadow: (e.vars || e).shadows[2]
}, o.disableElevation && {
  boxShadow: "none"
}, o.fullWidth && {
  width: "100%"
}, o.orientation === "vertical" && {
  flexDirection: "column"
}, {
  [`& .${vt.grouped}`]: u({
    minWidth: 40,
    "&:hover": u({}, o.variant === "contained" && {
      boxShadow: "none"
    })
  }, o.variant === "contained" && {
    boxShadow: "none"
  }),
  [`& .${vt.firstButton},& .${vt.middleButton}`]: u({}, o.orientation === "horizontal" && {
    borderTopRightRadius: 0,
    borderBottomRightRadius: 0
  }, o.orientation === "vertical" && {
    borderBottomRightRadius: 0,
    borderBottomLeftRadius: 0
  }, o.variant === "text" && o.orientation === "horizontal" && {
    borderRight: e.vars ? `1px solid rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
    [`&.${vt.disabled}`]: {
      borderRight: `1px solid ${(e.vars || e).palette.action.disabled}`
    }
  }, o.variant === "text" && o.orientation === "vertical" && {
    borderBottom: e.vars ? `1px solid rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
    [`&.${vt.disabled}`]: {
      borderBottom: `1px solid ${(e.vars || e).palette.action.disabled}`
    }
  }, o.variant === "text" && o.color !== "inherit" && {
    borderColor: e.vars ? `rgba(${e.vars.palette[o.color].mainChannel} / 0.5)` : Pe(e.palette[o.color].main, 0.5)
  }, o.variant === "outlined" && o.orientation === "horizontal" && {
    borderRightColor: "transparent"
  }, o.variant === "outlined" && o.orientation === "vertical" && {
    borderBottomColor: "transparent"
  }, o.variant === "contained" && o.orientation === "horizontal" && {
    borderRight: `1px solid ${(e.vars || e).palette.grey[400]}`,
    [`&.${vt.disabled}`]: {
      borderRight: `1px solid ${(e.vars || e).palette.action.disabled}`
    }
  }, o.variant === "contained" && o.orientation === "vertical" && {
    borderBottom: `1px solid ${(e.vars || e).palette.grey[400]}`,
    [`&.${vt.disabled}`]: {
      borderBottom: `1px solid ${(e.vars || e).palette.action.disabled}`
    }
  }, o.variant === "contained" && o.color !== "inherit" && {
    borderColor: (e.vars || e).palette[o.color].dark
  }, {
    "&:hover": u({}, o.variant === "outlined" && o.orientation === "horizontal" && {
      borderRightColor: "currentColor"
    }, o.variant === "outlined" && o.orientation === "vertical" && {
      borderBottomColor: "currentColor"
    })
  }),
  [`& .${vt.lastButton},& .${vt.middleButton}`]: u({}, o.orientation === "horizontal" && {
    borderTopLeftRadius: 0,
    borderBottomLeftRadius: 0
  }, o.orientation === "vertical" && {
    borderTopRightRadius: 0,
    borderTopLeftRadius: 0
  }, o.variant === "outlined" && o.orientation === "horizontal" && {
    marginLeft: -1
  }, o.variant === "outlined" && o.orientation === "vertical" && {
    marginTop: -1
  })
})), Pu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiButtonGroup"
  }), {
    children: s,
    className: a,
    color: i = "primary",
    component: l = "div",
    disabled: c = !1,
    disableElevation: d = !1,
    disableFocusRipple: p = !1,
    disableRipple: m = !1,
    fullWidth: b = !1,
    orientation: h = "horizontal",
    size: v = "medium",
    variant: C = "outlined"
  } = r, g = z(r, tx), y = u({}, r, {
    color: i,
    component: l,
    disabled: c,
    disableElevation: d,
    disableFocusRipple: p,
    disableRipple: m,
    fullWidth: b,
    orientation: h,
    size: v,
    variant: C
  }), $ = nx(y), T = f.useMemo(() => ({
    className: $.grouped,
    color: i,
    disabled: c,
    disableElevation: d,
    disableFocusRipple: p,
    disableRipple: m,
    fullWidth: b,
    size: v,
    variant: C
  }), [i, c, d, p, m, b, v, C, $.grouped]), O = vc(s), S = O.length, R = (w) => {
    const E = w === 0, N = w === S - 1;
    return E && N ? "" : E ? $.firstButton : N ? $.lastButton : $.middleButton;
  };
  return /* @__PURE__ */ x(rx, u({
    as: l,
    role: "group",
    className: D($.root, a),
    ref: n,
    ownerState: y
  }, g, {
    children: /* @__PURE__ */ x($u.Provider, {
      value: T,
      children: O.map((w, E) => /* @__PURE__ */ x(Ru.Provider, {
        value: R(E),
        children: w
      }, E))
    })
  }));
});
process.env.NODE_ENV !== "production" && (Pu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, no elevation is used.
   * @default false
   */
  disableElevation: t.bool,
  /**
   * If `true`, the button keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: t.bool,
  /**
   * If `true`, the button ripple effect is disabled.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * If `true`, the buttons will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: t.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: t.oneOfType([t.oneOf(["contained", "outlined", "text"]), t.string])
});
const hk = Pu;
function sx(e) {
  return ee("MuiCard", e);
}
const ax = ne("MuiCard", ["root"]), vk = ax, ix = ["className", "raised"], lx = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"]
  }, sx, o);
}, cx = P(Gt, {
  name: "MuiCard",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(() => ({
  overflow: "hidden"
})), Nu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiCard"
  }), {
    className: s,
    raised: a = !1
  } = r, i = z(r, ix), l = u({}, r, {
    raised: a
  }), c = lx(l);
  return /* @__PURE__ */ x(cx, u({
    className: D(c.root, s),
    elevation: a ? 8 : void 0,
    ref: n,
    ownerState: l
  }, i));
});
process.env.NODE_ENV !== "production" && (Nu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the card will use raised styling.
   * @default false
   */
  raised: ut(t.bool, (e) => e.raised && e.variant === "outlined" ? new Error('MUI: Combining `raised={true}` with `variant="outlined"` has no effect.') : null),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const yk = Nu;
function ux(e) {
  return ee("MuiCardActionArea", e);
}
const dx = ne("MuiCardActionArea", ["root", "focusVisible", "focusHighlight"]), As = dx, px = ["children", "className", "focusVisibleClassName"], fx = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"],
    focusHighlight: ["focusHighlight"]
  }, ux, o);
}, mx = P(pt, {
  name: "MuiCardActionArea",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(({
  theme: e
}) => ({
  display: "block",
  textAlign: "inherit",
  borderRadius: "inherit",
  // for Safari to work https://github.com/mui/material-ui/issues/36285.
  width: "100%",
  [`&:hover .${As.focusHighlight}`]: {
    opacity: (e.vars || e).palette.action.hoverOpacity,
    "@media (hover: none)": {
      opacity: 0
    }
  },
  [`&.${As.focusVisible} .${As.focusHighlight}`]: {
    opacity: (e.vars || e).palette.action.focusOpacity
  }
})), bx = P("span", {
  name: "MuiCardActionArea",
  slot: "FocusHighlight",
  overridesResolver: (e, o) => o.focusHighlight
})(({
  theme: e
}) => ({
  overflow: "hidden",
  pointerEvents: "none",
  position: "absolute",
  top: 0,
  right: 0,
  bottom: 0,
  left: 0,
  borderRadius: "inherit",
  opacity: 0,
  backgroundColor: "currentcolor",
  transition: e.transitions.create("opacity", {
    duration: e.transitions.duration.short
  })
})), Iu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiCardActionArea"
  }), {
    children: s,
    className: a,
    focusVisibleClassName: i
  } = r, l = z(r, px), c = r, d = fx(c);
  return /* @__PURE__ */ Ce(mx, u({
    className: D(d.root, a),
    focusVisibleClassName: D(i, d.focusVisible),
    ref: n,
    ownerState: c
  }, l, {
    children: [s, /* @__PURE__ */ x(bx, {
      className: d.focusHighlight,
      ownerState: c
    })]
  }));
});
process.env.NODE_ENV !== "production" && (Iu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * @ignore
   */
  focusVisibleClassName: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const Ck = Iu;
function gx(e) {
  return ee("MuiCardActions", e);
}
const hx = ne("MuiCardActions", ["root", "spacing"]), xk = hx, vx = ["disableSpacing", "className"], yx = (e) => {
  const {
    classes: o,
    disableSpacing: n
  } = e;
  return te({
    root: ["root", !n && "spacing"]
  }, gx, o);
}, Cx = P("div", {
  name: "MuiCardActions",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, !n.disableSpacing && o.spacing];
  }
})(({
  ownerState: e
}) => u({
  display: "flex",
  alignItems: "center",
  padding: 8
}, !e.disableSpacing && {
  "& > :not(style) ~ :not(style)": {
    marginLeft: 8
  }
})), ku = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiCardActions"
  }), {
    disableSpacing: s = !1,
    className: a
  } = r, i = z(r, vx), l = u({}, r, {
    disableSpacing: s
  }), c = yx(l);
  return /* @__PURE__ */ x(Cx, u({
    className: D(c.root, a),
    ownerState: l,
    ref: n
  }, i));
});
process.env.NODE_ENV !== "production" && (ku.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the actions do not have additional margin.
   * @default false
   */
  disableSpacing: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const Tk = ku;
function xx(e) {
  return ee("MuiCardContent", e);
}
const Tx = ne("MuiCardContent", ["root"]), Ok = Tx, Ox = ["className", "component"], $x = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"]
  }, xx, o);
}, Sx = P("div", {
  name: "MuiCardContent",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(() => ({
  padding: 16,
  "&:last-child": {
    paddingBottom: 24
  }
})), Mu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiCardContent"
  }), {
    className: s,
    component: a = "div"
  } = r, i = z(r, Ox), l = u({}, r, {
    component: a
  }), c = $x(l);
  return /* @__PURE__ */ x(Sx, u({
    as: a,
    className: D(c.root, s),
    ownerState: l,
    ref: n
  }, i));
});
process.env.NODE_ENV !== "production" && (Mu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const $k = Mu;
function Rx(e) {
  return ee("MuiCardHeader", e);
}
const wx = ne("MuiCardHeader", ["root", "avatar", "action", "content", "title", "subheader"]), Gi = wx, Ex = ["action", "avatar", "className", "component", "disableTypography", "subheader", "subheaderTypographyProps", "title", "titleTypographyProps"], Px = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"],
    avatar: ["avatar"],
    action: ["action"],
    content: ["content"],
    title: ["title"],
    subheader: ["subheader"]
  }, Rx, o);
}, Nx = P("div", {
  name: "MuiCardHeader",
  slot: "Root",
  overridesResolver: (e, o) => u({
    [`& .${Gi.title}`]: o.title,
    [`& .${Gi.subheader}`]: o.subheader
  }, o.root)
})({
  display: "flex",
  alignItems: "center",
  padding: 16
}), Ix = P("div", {
  name: "MuiCardHeader",
  slot: "Avatar",
  overridesResolver: (e, o) => o.avatar
})({
  display: "flex",
  flex: "0 0 auto",
  marginRight: 16
}), kx = P("div", {
  name: "MuiCardHeader",
  slot: "Action",
  overridesResolver: (e, o) => o.action
})({
  flex: "0 0 auto",
  alignSelf: "flex-start",
  marginTop: -4,
  marginRight: -8,
  marginBottom: -4
}), Mx = P("div", {
  name: "MuiCardHeader",
  slot: "Content",
  overridesResolver: (e, o) => o.content
})({
  flex: "1 1 auto"
}), Bu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiCardHeader"
  }), {
    action: s,
    avatar: a,
    className: i,
    component: l = "div",
    disableTypography: c = !1,
    subheader: d,
    subheaderTypographyProps: p,
    title: m,
    titleTypographyProps: b
  } = r, h = z(r, Ex), v = u({}, r, {
    component: l,
    disableTypography: c
  }), C = Px(v);
  let g = m;
  g != null && g.type !== xt && !c && (g = /* @__PURE__ */ x(xt, u({
    variant: a ? "body2" : "h5",
    className: C.title,
    component: "span",
    display: "block"
  }, b, {
    children: g
  })));
  let y = d;
  return y != null && y.type !== xt && !c && (y = /* @__PURE__ */ x(xt, u({
    variant: a ? "body2" : "body1",
    className: C.subheader,
    color: "text.secondary",
    component: "span",
    display: "block"
  }, p, {
    children: y
  }))), /* @__PURE__ */ Ce(Nx, u({
    className: D(C.root, i),
    as: l,
    ref: n,
    ownerState: v
  }, h, {
    children: [a && /* @__PURE__ */ x(Ix, {
      className: C.avatar,
      ownerState: v,
      children: a
    }), /* @__PURE__ */ Ce(Mx, {
      className: C.content,
      ownerState: v,
      children: [g, y]
    }), s && /* @__PURE__ */ x(kx, {
      className: C.action,
      ownerState: v,
      children: s
    })]
  }));
});
process.env.NODE_ENV !== "production" && (Bu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The action to display in the card header.
   */
  action: t.node,
  /**
   * The Avatar element to display.
   */
  avatar: t.node,
  /**
   * @ignore
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, `subheader` and `title` won't be wrapped by a Typography component.
   * This can be useful to render an alternative Typography variant by wrapping
   * the `title` text, and optional `subheader` text
   * with the Typography component.
   * @default false
   */
  disableTypography: t.bool,
  /**
   * The content of the component.
   */
  subheader: t.node,
  /**
   * These props will be forwarded to the subheader
   * (as long as disableTypography is not `true`).
   */
  subheaderTypographyProps: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The content of the component.
   */
  title: t.node,
  /**
   * These props will be forwarded to the title
   * (as long as disableTypography is not `true`).
   */
  titleTypographyProps: t.object
});
const Sk = Bu;
function Bx(e) {
  return ee("MuiCardMedia", e);
}
const Lx = ne("MuiCardMedia", ["root", "media", "img"]), Rk = Lx, Dx = ["children", "className", "component", "image", "src", "style"], Ax = (e) => {
  const {
    classes: o,
    isMediaComponent: n,
    isImageComponent: r
  } = e;
  return te({
    root: ["root", n && "media", r && "img"]
  }, Bx, o);
}, Fx = P("div", {
  name: "MuiCardMedia",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e, {
      isMediaComponent: r,
      isImageComponent: s
    } = n;
    return [o.root, r && o.media, s && o.img];
  }
})(({
  ownerState: e
}) => u({
  display: "block",
  backgroundSize: "cover",
  backgroundRepeat: "no-repeat",
  backgroundPosition: "center"
}, e.isMediaComponent && {
  width: "100%"
}, e.isImageComponent && {
  // ⚠️ object-fit is not supported by IE11.
  objectFit: "cover"
})), jx = ["video", "audio", "picture", "iframe", "img"], _x = ["picture", "img"], Lu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiCardMedia"
  }), {
    children: s,
    className: a,
    component: i = "div",
    image: l,
    src: c,
    style: d
  } = r, p = z(r, Dx), m = jx.indexOf(i) !== -1, b = !m && l ? u({
    backgroundImage: `url("${l}")`
  }, d) : d, h = u({}, r, {
    component: i,
    isMediaComponent: m,
    isImageComponent: _x.indexOf(i) !== -1
  }), v = Ax(h);
  return /* @__PURE__ */ x(Fx, u({
    className: D(v.root, a),
    as: i,
    role: !m && l ? "img" : void 0,
    ref: n,
    style: b,
    ownerState: h,
    src: m ? l || c : void 0
  }, p, {
    children: s
  }));
});
process.env.NODE_ENV !== "production" && (Lu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: ut(t.node, (e) => !e.children && !e.image && !e.src && !e.component ? new Error("MUI: Either `children`, `image`, `src` or `component` prop must be specified.") : null),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Image to be displayed as a background image.
   * Either `image` or `src` prop must be specified.
   * Note that caller must specify height otherwise the image will not be visible.
   */
  image: t.string,
  /**
   * An alias for `image` property.
   * Available only with media components.
   * Media components: `video`, `audio`, `picture`, `iframe`, `img`.
   */
  src: t.string,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const wk = Lu;
function zx(e) {
  return ee("PrivateSwitchBase", e);
}
ne("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);
const Vx = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"], Ux = (e) => {
  const {
    classes: o,
    checked: n,
    disabled: r,
    edge: s
  } = e, a = {
    root: ["root", n && "checked", r && "disabled", s && `edge${k(s)}`],
    input: ["input"]
  };
  return te(a, zx, o);
}, Wx = P(pt)(({
  ownerState: e
}) => u({
  padding: 9,
  borderRadius: "50%"
}, e.edge === "start" && {
  marginLeft: e.size === "small" ? -3 : -12
}, e.edge === "end" && {
  marginRight: e.size === "small" ? -3 : -12
})), Hx = P("input", {
  shouldForwardProp: dt
})({
  cursor: "inherit",
  position: "absolute",
  opacity: 0,
  width: "100%",
  height: "100%",
  top: 0,
  left: 0,
  margin: 0,
  padding: 0,
  zIndex: 1
}), Du = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const {
    autoFocus: r,
    checked: s,
    checkedIcon: a,
    className: i,
    defaultChecked: l,
    disabled: c,
    disableFocusRipple: d = !1,
    edge: p = !1,
    icon: m,
    id: b,
    inputProps: h,
    inputRef: v,
    name: C,
    onBlur: g,
    onChange: y,
    onFocus: $,
    readOnly: T,
    required: O = !1,
    tabIndex: S,
    type: R,
    value: w
  } = o, E = z(o, Vx), [N, M] = Dt({
    controlled: s,
    default: !!l,
    name: "SwitchBase",
    state: "checked"
  }), I = oo(), F = (W) => {
    $ && $(W), I && I.onFocus && I.onFocus(W);
  }, A = (W) => {
    g && g(W), I && I.onBlur && I.onBlur(W);
  }, B = (W) => {
    if (W.nativeEvent.defaultPrevented)
      return;
    const de = W.target.checked;
    M(de), y && y(W, de);
  };
  let j = c;
  I && typeof j > "u" && (j = I.disabled);
  const V = R === "checkbox" || R === "radio", U = u({}, o, {
    checked: N,
    disabled: j,
    disableFocusRipple: d,
    edge: p
  }), _ = Ux(U);
  return /* @__PURE__ */ Ce(Wx, u({
    component: "span",
    className: D(_.root, i),
    centerRipple: !0,
    focusRipple: !d,
    disabled: j,
    tabIndex: null,
    role: void 0,
    onFocus: F,
    onBlur: A,
    ownerState: U,
    ref: n
  }, E, {
    children: [/* @__PURE__ */ x(Hx, u({
      autoFocus: r,
      checked: s,
      defaultChecked: l,
      className: _.input,
      disabled: j,
      id: V ? b : void 0,
      name: C,
      onChange: B,
      readOnly: T,
      ref: v,
      required: O,
      ownerState: U,
      tabIndex: S,
      type: R
    }, R === "checkbox" && w === void 0 ? {} : {
      value: w
    }, h)), N ? a : m]
  }));
});
process.env.NODE_ENV !== "production" && (Du.propTypes = {
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: t.bool,
  /**
   * If `true`, the component is checked.
   */
  checked: t.bool,
  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: t.node.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * @ignore
   */
  defaultChecked: t.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: t.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: t.bool,
  /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */
  edge: t.oneOf(["end", "start", !1]),
  /**
   * The icon to display when the component is unchecked.
   */
  icon: t.node.isRequired,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: yt,
  /*
   * @ignore
   */
  name: t.string,
  /**
   * @ignore
   */
  onBlur: t.func,
  /**
   * Callback fired when the state is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: t.bool,
  /**
   * If `true`, the `input` element is required.
   */
  required: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.object,
  /**
   * @ignore
   */
  tabIndex: t.oneOfType([t.number, t.string]),
  /**
   * The input component prop `type`.
   */
  type: t.string.isRequired,
  /**
   * The value of the component.
   */
  value: t.any
});
const Da = Du, qx = Je(/* @__PURE__ */ x("path", {
  d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
}), "CheckBoxOutlineBlank"), Gx = Je(/* @__PURE__ */ x("path", {
  d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
}), "CheckBox"), Kx = Je(/* @__PURE__ */ x("path", {
  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
}), "IndeterminateCheckBox");
function Yx(e) {
  return ee("MuiCheckbox", e);
}
const Xx = ne("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium"]), Fs = Xx, Qx = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size", "className"], Zx = (e) => {
  const {
    classes: o,
    indeterminate: n,
    color: r,
    size: s
  } = e, a = {
    root: ["root", n && "indeterminate", `color${k(r)}`, `size${k(s)}`]
  }, i = te(a, Yx, o);
  return u({}, o, i);
}, Jx = P(Da, {
  shouldForwardProp: (e) => dt(e) || e === "classes",
  name: "MuiCheckbox",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.indeterminate && o.indeterminate, o[`size${k(n.size)}`], n.color !== "default" && o[`color${k(n.color)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  color: (e.vars || e).palette.text.secondary
}, !o.disableRipple && {
  "&:hover": {
    backgroundColor: e.vars ? `rgba(${o.color === "default" ? e.vars.palette.action.activeChannel : e.vars.palette[o.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Pe(o.color === "default" ? e.palette.action.active : e.palette[o.color].main, e.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }
}, o.color !== "default" && {
  [`&.${Fs.checked}, &.${Fs.indeterminate}`]: {
    color: (e.vars || e).palette[o.color].main
  },
  [`&.${Fs.disabled}`]: {
    color: (e.vars || e).palette.action.disabled
  }
})), eT = /* @__PURE__ */ x(Gx, {}), tT = /* @__PURE__ */ x(qx, {}), oT = /* @__PURE__ */ x(Kx, {}), Au = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s;
  const a = oe({
    props: o,
    name: "MuiCheckbox"
  }), {
    checkedIcon: i = eT,
    color: l = "primary",
    icon: c = tT,
    indeterminate: d = !1,
    indeterminateIcon: p = oT,
    inputProps: m,
    size: b = "medium",
    className: h
  } = a, v = z(a, Qx), C = d ? p : c, g = d ? p : i, y = u({}, a, {
    color: l,
    indeterminate: d,
    size: b
  }), $ = Zx(y);
  return /* @__PURE__ */ x(Jx, u({
    type: "checkbox",
    inputProps: u({
      "data-indeterminate": d
    }, m),
    icon: /* @__PURE__ */ f.cloneElement(C, {
      fontSize: (r = C.props.fontSize) != null ? r : b
    }),
    checkedIcon: /* @__PURE__ */ f.cloneElement(g, {
      fontSize: (s = g.props.fontSize) != null ? s : b
    }),
    ownerState: y,
    ref: n,
    className: D($.root, h)
  }, v, {
    classes: $
  }));
});
process.env.NODE_ENV !== "production" && (Au.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component is checked.
   */
  checked: t.bool,
  /**
   * The icon to display when the component is checked.
   * @default <CheckBoxIcon />
   */
  checkedIcon: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: t.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * The icon to display when the component is unchecked.
   * @default <CheckBoxOutlineBlankIcon />
   */
  icon: t.node,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * If `true`, the component appears indeterminate.
   * This does not set the native input element to indeterminate due
   * to inconsistent behavior across browsers.
   * However, we set a `data-indeterminate` attribute on the `input`.
   * @default false
   */
  indeterminate: t.bool,
  /**
   * The icon to display when the component is indeterminate.
   * @default <IndeterminateCheckBoxIcon />
   */
  indeterminateIcon: t.node,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: yt,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: t.func,
  /**
   * If `true`, the `input` element is required.
   * @default false
   */
  required: t.bool,
  /**
   * The size of the component.
   * `small` is equivalent to the dense checkbox styling.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value of the component. The DOM API casts this to a string.
   * The browser uses "on" as the default value.
   */
  value: t.any
});
const Ek = Au;
function nT(e) {
  return ee("MuiCircularProgress", e);
}
const rT = ne("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]), Pk = rT, sT = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
let ws = (e) => e, Ki, Yi, Xi, Qi;
const wo = 44, aT = go(Ki || (Ki = ws`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`)), iT = go(Yi || (Yi = ws`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`)), lT = (e) => {
  const {
    classes: o,
    variant: n,
    color: r,
    disableShrink: s
  } = e, a = {
    root: ["root", n, `color${k(r)}`],
    svg: ["svg"],
    circle: ["circle", `circle${k(n)}`, s && "circleDisableShrink"]
  };
  return te(a, nT, o);
}, cT = P("span", {
  name: "MuiCircularProgress",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], o[`color${k(n.color)}`]];
  }
})(({
  ownerState: e,
  theme: o
}) => u({
  display: "inline-block"
}, e.variant === "determinate" && {
  transition: o.transitions.create("transform")
}, e.color !== "inherit" && {
  color: (o.vars || o).palette[e.color].main
}), ({
  ownerState: e
}) => e.variant === "indeterminate" && sn(Xi || (Xi = ws`
      animation: ${0} 1.4s linear infinite;
    `), aT)), uT = P("svg", {
  name: "MuiCircularProgress",
  slot: "Svg",
  overridesResolver: (e, o) => o.svg
})({
  display: "block"
  // Keeps the progress centered
}), dT = P("circle", {
  name: "MuiCircularProgress",
  slot: "Circle",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.circle, o[`circle${k(n.variant)}`], n.disableShrink && o.circleDisableShrink];
  }
})(({
  ownerState: e,
  theme: o
}) => u({
  stroke: "currentColor"
}, e.variant === "determinate" && {
  transition: o.transitions.create("stroke-dashoffset")
}, e.variant === "indeterminate" && {
  // Some default value that looks fine waiting for the animation to kicks in.
  strokeDasharray: "80px, 200px",
  strokeDashoffset: 0
  // Add the unit to fix a Edge 16 and below bug.
}), ({
  ownerState: e
}) => e.variant === "indeterminate" && !e.disableShrink && sn(Qi || (Qi = ws`
      animation: ${0} 1.4s ease-in-out infinite;
    `), iT)), Fu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiCircularProgress"
  }), {
    className: s,
    color: a = "primary",
    disableShrink: i = !1,
    size: l = 40,
    style: c,
    thickness: d = 3.6,
    value: p = 0,
    variant: m = "indeterminate"
  } = r, b = z(r, sT), h = u({}, r, {
    color: a,
    disableShrink: i,
    size: l,
    thickness: d,
    value: p,
    variant: m
  }), v = lT(h), C = {}, g = {}, y = {};
  if (m === "determinate") {
    const $ = 2 * Math.PI * ((wo - d) / 2);
    C.strokeDasharray = $.toFixed(3), y["aria-valuenow"] = Math.round(p), C.strokeDashoffset = `${((100 - p) / 100 * $).toFixed(3)}px`, g.transform = "rotate(-90deg)";
  }
  return /* @__PURE__ */ x(cT, u({
    className: D(v.root, s),
    style: u({
      width: l,
      height: l
    }, g, c),
    ownerState: h,
    ref: n,
    role: "progressbar"
  }, y, b, {
    children: /* @__PURE__ */ x(uT, {
      className: v.svg,
      ownerState: h,
      viewBox: `${wo / 2} ${wo / 2} ${wo} ${wo}`,
      children: /* @__PURE__ */ x(dT, {
        className: v.circle,
        style: C,
        ownerState: h,
        cx: wo,
        cy: wo,
        r: (wo - d) / 2,
        fill: "none",
        strokeWidth: d
      })
    })
  }));
});
process.env.NODE_ENV !== "production" && (Fu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * If `true`, the shrink animation is disabled.
   * This only works if variant is `indeterminate`.
   * @default false
   */
  disableShrink: ut(t.bool, (e) => e.disableShrink && e.variant && e.variant !== "indeterminate" ? new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.") : null),
  /**
   * The size of the component.
   * If using a number, the pixel unit is assumed.
   * If using a string, you need to provide the CSS unit, e.g. '3rem'.
   * @default 40
   */
  size: t.oneOfType([t.number, t.string]),
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The thickness of the circle.
   * @default 3.6
   */
  thickness: t.number,
  /**
   * The value of the progress indicator for the determinate variant.
   * Value between 0 and 100.
   * @default 0
   */
  value: t.number,
  /**
   * The variant to use.
   * Use indeterminate when there is no progress value.
   * @default 'indeterminate'
   */
  variant: t.oneOf(["determinate", "indeterminate"])
});
const Nk = Fu, ju = Nm({
  createStyledComponent: P("div", {
    name: "MuiContainer",
    slot: "Root",
    overridesResolver: (e, o) => {
      const {
        ownerState: n
      } = e;
      return [o.root, o[`maxWidth${k(String(n.maxWidth))}`], n.fixed && o.fixed, n.disableGutters && o.disableGutters];
    }
  }),
  useThemeProps: (e) => oe({
    props: e,
    name: "MuiContainer"
  })
});
process.env.NODE_ENV !== "production" && (ju.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * Set the max-width to match the min-width of the current breakpoint.
   * This is useful if you'd prefer to design for a fixed set of sizes
   * instead of trying to accommodate a fully fluid viewport.
   * It's fluid by default.
   * @default false
   */
  fixed: t.bool,
  /**
   * Determine the max-width of the container.
   * The container width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'lg'
   */
  maxWidth: t.oneOfType([t.oneOf(["xs", "sm", "md", "lg", "xl", !1]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const Ik = ju;
function kk(e) {
  return ee("MuiContainer", e);
}
const pT = ne("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]), Mk = pT, _u = (e, o) => u({
  WebkitFontSmoothing: "antialiased",
  // Antialiasing.
  MozOsxFontSmoothing: "grayscale",
  // Antialiasing.
  // Change from `box-sizing: content-box` so that `width`
  // is not affected by `padding` or `border`.
  boxSizing: "border-box",
  // Fix font resize problem in iOS
  WebkitTextSizeAdjust: "100%"
}, o && !e.vars && {
  colorScheme: e.palette.mode
}), zu = (e) => u({
  color: (e.vars || e).palette.text.primary
}, e.typography.body1, {
  backgroundColor: (e.vars || e).palette.background.default,
  "@media print": {
    // Save printer ink.
    backgroundColor: (e.vars || e).palette.common.white
  }
}), fT = (e, o = !1) => {
  var n;
  const r = {};
  o && e.colorSchemes && Object.entries(e.colorSchemes).forEach(([i, l]) => {
    var c;
    r[e.getColorSchemeSelector(i).replace(/\s*&/, "")] = {
      colorScheme: (c = l.palette) == null ? void 0 : c.mode
    };
  });
  let s = u({
    html: _u(e, o),
    "*, *::before, *::after": {
      boxSizing: "inherit"
    },
    "strong, b": {
      fontWeight: e.typography.fontWeightBold
    },
    body: u({
      margin: 0
    }, zu(e), {
      // Add support for document.body.requestFullScreen().
      // Other elements, if background transparent, are not supported.
      "&::backdrop": {
        backgroundColor: (e.vars || e).palette.background.default
      }
    })
  }, r);
  const a = (n = e.components) == null || (n = n.MuiCssBaseline) == null ? void 0 : n.styleOverrides;
  return a && (s = [s, a]), s;
};
function Vu(e) {
  const o = oe({
    props: e,
    name: "MuiCssBaseline"
  }), {
    children: n,
    enableColorScheme: r = !1
  } = o;
  return /* @__PURE__ */ Ce(f.Fragment, {
    children: [/* @__PURE__ */ x(Ba, {
      styles: (s) => fT(s, r)
    }), n]
  });
}
process.env.NODE_ENV !== "production" && (Vu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * You can wrap a node.
   */
  children: t.node,
  /**
   * Enable `color-scheme` CSS property to use `theme.palette.mode`.
   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
   * For browser support, check out https://caniuse.com/?search=color-scheme
   * @default false
   */
  enableColorScheme: t.bool
});
const mT = {
  track: "#2b2b2b",
  thumb: "#6b6b6b",
  active: "#959595"
};
function Bk(e = mT) {
  return {
    scrollbarColor: `${e.thumb} ${e.track}`,
    "&::-webkit-scrollbar, & *::-webkit-scrollbar": {
      backgroundColor: e.track
    },
    "&::-webkit-scrollbar-thumb, & *::-webkit-scrollbar-thumb": {
      borderRadius: 8,
      backgroundColor: e.thumb,
      minHeight: 24,
      border: `3px solid ${e.track}`
    },
    "&::-webkit-scrollbar-thumb:focus, & *::-webkit-scrollbar-thumb:focus": {
      backgroundColor: e.active
    },
    "&::-webkit-scrollbar-thumb:active, & *::-webkit-scrollbar-thumb:active": {
      backgroundColor: e.active
    },
    "&::-webkit-scrollbar-thumb:hover, & *::-webkit-scrollbar-thumb:hover": {
      backgroundColor: e.active
    },
    "&::-webkit-scrollbar-corner, & *::-webkit-scrollbar-corner": {
      backgroundColor: e.track
    }
  };
}
function bT(e) {
  return ee("MuiModal", e);
}
const gT = ne("MuiModal", ["root", "hidden", "backdrop"]), Lk = gT, hT = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onTransitionEnter", "onTransitionExited", "open", "slotProps", "slots", "theme"], vT = (e) => {
  const {
    open: o,
    exited: n,
    classes: r
  } = e;
  return te({
    root: ["root", !o && n && "hidden"],
    backdrop: ["backdrop"]
  }, bT, r);
}, yT = P("div", {
  name: "MuiModal",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, !n.open && n.exited && o.hidden];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  position: "fixed",
  zIndex: (e.vars || e).zIndex.modal,
  right: 0,
  bottom: 0,
  top: 0,
  left: 0
}, !o.open && o.exited && {
  visibility: "hidden"
})), CT = P(gu, {
  name: "MuiModal",
  slot: "Backdrop",
  overridesResolver: (e, o) => o.backdrop
})({
  zIndex: -1
}), Uu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s, a, i, l, c;
  const d = oe({
    name: "MuiModal",
    props: o
  }), {
    BackdropComponent: p = CT,
    BackdropProps: m,
    className: b,
    closeAfterTransition: h = !1,
    children: v,
    container: C,
    component: g,
    components: y = {},
    componentsProps: $ = {},
    disableAutoFocus: T = !1,
    disableEnforceFocus: O = !1,
    disableEscapeKeyDown: S = !1,
    disablePortal: R = !1,
    disableRestoreFocus: w = !1,
    disableScrollLock: E = !1,
    hideBackdrop: N = !1,
    keepMounted: M = !1,
    onBackdropClick: I,
    open: F,
    slotProps: A,
    slots: B
    // eslint-disable-next-line react/prop-types
  } = d, j = z(d, hT), V = u({}, d, {
    closeAfterTransition: h,
    disableAutoFocus: T,
    disableEnforceFocus: O,
    disableEscapeKeyDown: S,
    disablePortal: R,
    disableRestoreFocus: w,
    disableScrollLock: E,
    hideBackdrop: N,
    keepMounted: M
  }), {
    getRootProps: U,
    getBackdropProps: _,
    getTransitionProps: W,
    portalRef: de,
    isTopModal: Te,
    exited: $e,
    hasTransition: ie
  } = jg(u({}, V, {
    rootRef: n
  })), se = u({}, V, {
    exited: $e
  }), ue = vT(se), Z = {};
  if (v.props.tabIndex === void 0 && (Z.tabIndex = "-1"), ie) {
    const {
      onEnter: ve,
      onExited: Y
    } = W();
    Z.onEnter = ve, Z.onExited = Y;
  }
  const he = (r = (s = B == null ? void 0 : B.root) != null ? s : y.Root) != null ? r : yT, q = (a = (i = B == null ? void 0 : B.backdrop) != null ? i : y.Backdrop) != null ? a : p, le = (l = A == null ? void 0 : A.root) != null ? l : $.root, Oe = (c = A == null ? void 0 : A.backdrop) != null ? c : $.backdrop, fe = at({
    elementType: he,
    externalSlotProps: le,
    externalForwardedProps: j,
    getSlotProps: U,
    additionalProps: {
      ref: n,
      as: g
    },
    ownerState: se,
    className: D(b, le == null ? void 0 : le.className, ue == null ? void 0 : ue.root, !se.open && se.exited && (ue == null ? void 0 : ue.hidden))
  }), me = at({
    elementType: q,
    externalSlotProps: Oe,
    additionalProps: m,
    getSlotProps: (ve) => _(u({}, ve, {
      onClick: (Y) => {
        I && I(Y), ve != null && ve.onClick && ve.onClick(Y);
      }
    })),
    className: D(Oe == null ? void 0 : Oe.className, m == null ? void 0 : m.className, ue == null ? void 0 : ue.backdrop),
    ownerState: se
  });
  return !M && !F && (!ie || $e) ? null : /* @__PURE__ */ x(tr, {
    ref: de,
    container: C,
    disablePortal: R,
    children: /* @__PURE__ */ Ce(he, u({}, fe, {
      children: [!N && p ? /* @__PURE__ */ x(q, u({}, me)) : null, /* @__PURE__ */ x(Zr, {
        disableEnforceFocus: O,
        disableAutoFocus: T,
        disableRestoreFocus: w,
        isEnabled: Te,
        open: F,
        children: /* @__PURE__ */ f.cloneElement(v, Z)
      })]
    }))
  });
});
process.env.NODE_ENV !== "production" && (Uu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
   * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   *   overridesResolver: (props, styles) => {
   *     return styles.backdrop;
   *   },
   * })({
   *   zIndex: -1,
   * })
   */
  BackdropComponent: t.elementType,
  /**
   * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
   * @deprecated Use `slotProps.backdrop` instead.
   */
  BackdropProps: t.object,
  /**
   * A single child content element.
   */
  children: _o.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * When set to true the Modal waits until a nested Transition is completed before closing.
   * @default false
   */
  closeAfterTransition: t.bool,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: t.shape({
    Backdrop: t.elementType,
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: t.shape({
    backdrop: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * An HTML element or function that returns one.
   * The `container` will have the portal children appended to it.
   *
   * You can also provide a callback, which is called in a React layout effect.
   * This lets you set the container from a ref, and also makes server-side rendering possible.
   *
   * By default, it uses the body of the top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: t.oneOfType([fo, t.func]),
  /**
   * If `true`, the modal will not automatically shift focus to itself when it opens, and
   * replace it to the last focused element when it closes.
   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableAutoFocus: t.bool,
  /**
   * If `true`, the modal will not prevent focus from leaving the modal while open.
   *
   * Generally this should never be set to `true` as it makes the modal less
   * accessible to assistive technologies, like screen readers.
   * @default false
   */
  disableEnforceFocus: t.bool,
  /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */
  disableEscapeKeyDown: t.bool,
  /**
   * The `children` will be under the DOM hierarchy of the parent component.
   * @default false
   */
  disablePortal: t.bool,
  /**
   * If `true`, the modal will not restore focus to previously focused element once
   * modal is hidden or unmounted.
   * @default false
   */
  disableRestoreFocus: t.bool,
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: t.bool,
  /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */
  hideBackdrop: t.bool,
  /**
   * Always keep the children in the DOM.
   * This prop can be useful in SEO situation or
   * when you want to maximize the responsiveness of the Modal.
   * @default false
   */
  keepMounted: t.bool,
  /**
   * Callback fired when the backdrop is clicked.
   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
   */
  onBackdropClick: t.func,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */
  onClose: t.func,
  /**
   * A function called when a transition enters.
   */
  onTransitionEnter: t.func,
  /**
   * A function called when a transition has exited.
   */
  onTransitionExited: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool.isRequired,
  /**
   * The props used for each slot inside the Modal.
   * @default {}
   */
  slotProps: t.shape({
    backdrop: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside the Modal.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    backdrop: t.elementType,
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const Aa = Uu;
function xT(e) {
  return ee("MuiDialog", e);
}
const TT = ne("MuiDialog", ["root", "scrollPaper", "scrollBody", "container", "paper", "paperScrollPaper", "paperScrollBody", "paperWidthFalse", "paperWidthXs", "paperWidthSm", "paperWidthMd", "paperWidthLg", "paperWidthXl", "paperFullWidth", "paperFullScreen"]), js = TT, Wu = /* @__PURE__ */ f.createContext({});
process.env.NODE_ENV !== "production" && (Wu.displayName = "DialogContext");
const Hu = Wu, OT = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"], $T = P(gu, {
  name: "MuiDialog",
  slot: "Backdrop",
  overrides: (e, o) => o.backdrop
})({
  // Improve scrollable dialog support.
  zIndex: -1
}), ST = (e) => {
  const {
    classes: o,
    scroll: n,
    maxWidth: r,
    fullWidth: s,
    fullScreen: a
  } = e, i = {
    root: ["root"],
    container: ["container", `scroll${k(n)}`],
    paper: ["paper", `paperScroll${k(n)}`, `paperWidth${k(String(r))}`, s && "paperFullWidth", a && "paperFullScreen"]
  };
  return te(i, xT, o);
}, RT = P(Aa, {
  name: "MuiDialog",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  "@media print": {
    // Use !important to override the Modal inline-style.
    position: "absolute !important"
  }
}), wT = P("div", {
  name: "MuiDialog",
  slot: "Container",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.container, o[`scroll${k(n.scroll)}`]];
  }
})(({
  ownerState: e
}) => u({
  height: "100%",
  "@media print": {
    height: "auto"
  },
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0
}, e.scroll === "paper" && {
  display: "flex",
  justifyContent: "center",
  alignItems: "center"
}, e.scroll === "body" && {
  overflowY: "auto",
  overflowX: "hidden",
  textAlign: "center",
  "&::after": {
    content: '""',
    display: "inline-block",
    verticalAlign: "middle",
    height: "100%",
    width: "0"
  }
})), ET = P(Gt, {
  name: "MuiDialog",
  slot: "Paper",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.paper, o[`scrollPaper${k(n.scroll)}`], o[`paperWidth${k(String(n.maxWidth))}`], n.fullWidth && o.paperFullWidth, n.fullScreen && o.paperFullScreen];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  margin: 32,
  position: "relative",
  overflowY: "auto",
  // Fix IE11 issue, to remove at some point.
  "@media print": {
    overflowY: "visible",
    boxShadow: "none"
  }
}, o.scroll === "paper" && {
  display: "flex",
  flexDirection: "column",
  maxHeight: "calc(100% - 64px)"
}, o.scroll === "body" && {
  display: "inline-block",
  verticalAlign: "middle",
  textAlign: "left"
  // 'initial' doesn't work on IE11
}, !o.maxWidth && {
  maxWidth: "calc(100% - 64px)"
}, o.maxWidth === "xs" && {
  maxWidth: e.breakpoints.unit === "px" ? Math.max(e.breakpoints.values.xs, 444) : `max(${e.breakpoints.values.xs}${e.breakpoints.unit}, 444px)`,
  [`&.${js.paperScrollBody}`]: {
    [e.breakpoints.down(Math.max(e.breakpoints.values.xs, 444) + 32 * 2)]: {
      maxWidth: "calc(100% - 64px)"
    }
  }
}, o.maxWidth && o.maxWidth !== "xs" && {
  maxWidth: `${e.breakpoints.values[o.maxWidth]}${e.breakpoints.unit}`,
  [`&.${js.paperScrollBody}`]: {
    [e.breakpoints.down(e.breakpoints.values[o.maxWidth] + 32 * 2)]: {
      maxWidth: "calc(100% - 64px)"
    }
  }
}, o.fullWidth && {
  width: "calc(100% - 64px)"
}, o.fullScreen && {
  margin: 0,
  width: "100%",
  maxWidth: "100%",
  height: "100%",
  maxHeight: "none",
  borderRadius: 0,
  [`&.${js.paperScrollBody}`]: {
    margin: 0,
    maxWidth: "100%"
  }
})), qu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiDialog"
  }), s = rt(), a = {
    enter: s.transitions.duration.enteringScreen,
    exit: s.transitions.duration.leavingScreen
  }, {
    "aria-describedby": i,
    "aria-labelledby": l,
    BackdropComponent: c,
    BackdropProps: d,
    children: p,
    className: m,
    disableEscapeKeyDown: b = !1,
    fullScreen: h = !1,
    fullWidth: v = !1,
    maxWidth: C = "sm",
    onBackdropClick: g,
    onClose: y,
    open: $,
    PaperComponent: T = Gt,
    PaperProps: O = {},
    scroll: S = "paper",
    TransitionComponent: R = mu,
    transitionDuration: w = a,
    TransitionProps: E
  } = r, N = z(r, OT), M = u({}, r, {
    disableEscapeKeyDown: b,
    fullScreen: h,
    fullWidth: v,
    maxWidth: C,
    scroll: S
  }), I = ST(M), F = f.useRef(), A = (U) => {
    F.current = U.target === U.currentTarget;
  }, B = (U) => {
    F.current && (F.current = null, g && g(U), y && y(U, "backdropClick"));
  }, j = mo(l), V = f.useMemo(() => ({
    titleId: j
  }), [j]);
  return /* @__PURE__ */ x(RT, u({
    className: D(I.root, m),
    closeAfterTransition: !0,
    components: {
      Backdrop: $T
    },
    componentsProps: {
      backdrop: u({
        transitionDuration: w,
        as: c
      }, d)
    },
    disableEscapeKeyDown: b,
    onClose: y,
    open: $,
    ref: n,
    onClick: B,
    ownerState: M
  }, N, {
    children: /* @__PURE__ */ x(R, u({
      appear: !0,
      in: $,
      timeout: w,
      role: "presentation"
    }, E, {
      children: /* @__PURE__ */ x(wT, {
        className: D(I.container),
        onMouseDown: A,
        ownerState: M,
        children: /* @__PURE__ */ x(ET, u({
          as: T,
          elevation: 24,
          role: "dialog",
          "aria-describedby": i,
          "aria-labelledby": j
        }, O, {
          className: D(I.paper, O.className),
          ownerState: M,
          children: /* @__PURE__ */ x(Hu.Provider, {
            value: V,
            children: p
          })
        }))
      })
    }))
  }));
});
process.env.NODE_ENV !== "production" && (qu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The id(s) of the element(s) that describe the dialog.
   */
  "aria-describedby": t.string,
  /**
   * The id(s) of the element(s) that label the dialog.
   */
  "aria-labelledby": t.string,
  /**
   * A backdrop component. This prop enables custom backdrop rendering.
   * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
   * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
   * @default styled(Backdrop, {
   *   name: 'MuiModal',
   *   slot: 'Backdrop',
   *   overridesResolver: (props, styles) => {
   *     return styles.backdrop;
   *   },
   * })({
   *   zIndex: -1,
   * })
   */
  BackdropComponent: t.elementType,
  /**
   * @ignore
   */
  BackdropProps: t.object,
  /**
   * Dialog children, usually the included sub-components.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, hitting escape will not fire the `onClose` callback.
   * @default false
   */
  disableEscapeKeyDown: t.bool,
  /**
   * If `true`, the dialog is full-screen.
   * @default false
   */
  fullScreen: t.bool,
  /**
   * If `true`, the dialog stretches to `maxWidth`.
   *
   * Notice that the dialog width grow is limited by the default margin.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * Determine the max-width of the dialog.
   * The dialog width grows with the size of the screen.
   * Set to `false` to disable `maxWidth`.
   * @default 'sm'
   */
  maxWidth: t.oneOfType([t.oneOf(["xs", "sm", "md", "lg", "xl", !1]), t.string]),
  /**
   * Callback fired when the backdrop is clicked.
   * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
   */
  onBackdropClick: t.func,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */
  onClose: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool.isRequired,
  /**
   * The component used to render the body of the dialog.
   * @default Paper
   */
  PaperComponent: t.elementType,
  /**
   * Props applied to the [`Paper`](/material-ui/api/paper/) element.
   * @default {}
   */
  PaperProps: t.object,
  /**
   * Determine the container for scrolling the dialog.
   * @default 'paper'
   */
  scroll: t.oneOf(["body", "paper"]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Fade
   */
  TransitionComponent: t.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  transitionDuration: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   */
  TransitionProps: t.object
});
const Dk = qu;
function PT(e) {
  return ee("MuiDialogActions", e);
}
const NT = ne("MuiDialogActions", ["root", "spacing"]), Ak = NT, IT = ["className", "disableSpacing"], kT = (e) => {
  const {
    classes: o,
    disableSpacing: n
  } = e;
  return te({
    root: ["root", !n && "spacing"]
  }, PT, o);
}, MT = P("div", {
  name: "MuiDialogActions",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, !n.disableSpacing && o.spacing];
  }
})(({
  ownerState: e
}) => u({
  display: "flex",
  alignItems: "center",
  padding: 8,
  justifyContent: "flex-end",
  flex: "0 0 auto"
}, !e.disableSpacing && {
  "& > :not(style) ~ :not(style)": {
    marginLeft: 8
  }
})), Gu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiDialogActions"
  }), {
    className: s,
    disableSpacing: a = !1
  } = r, i = z(r, IT), l = u({}, r, {
    disableSpacing: a
  }), c = kT(l);
  return /* @__PURE__ */ x(MT, u({
    className: D(c.root, s),
    ownerState: l,
    ref: n
  }, i));
});
process.env.NODE_ENV !== "production" && (Gu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the actions do not have additional margin.
   * @default false
   */
  disableSpacing: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const Fk = Gu;
function BT(e) {
  return ee("MuiDialogContent", e);
}
const LT = ne("MuiDialogContent", ["root", "dividers"]), jk = LT;
function DT(e) {
  return ee("MuiDialogTitle", e);
}
const AT = ne("MuiDialogTitle", ["root"]), FT = AT, jT = ["className", "dividers"], _T = (e) => {
  const {
    classes: o,
    dividers: n
  } = e;
  return te({
    root: ["root", n && "dividers"]
  }, BT, o);
}, zT = P("div", {
  name: "MuiDialogContent",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.dividers && o.dividers];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  flex: "1 1 auto",
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch",
  overflowY: "auto",
  padding: "20px 24px"
}, o.dividers ? {
  padding: "16px 24px",
  borderTop: `1px solid ${(e.vars || e).palette.divider}`,
  borderBottom: `1px solid ${(e.vars || e).palette.divider}`
} : {
  [`.${FT.root} + &`]: {
    paddingTop: 0
  }
})), Ku = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiDialogContent"
  }), {
    className: s,
    dividers: a = !1
  } = r, i = z(r, jT), l = u({}, r, {
    dividers: a
  }), c = _T(l);
  return /* @__PURE__ */ x(zT, u({
    className: D(c.root, s),
    ownerState: l,
    ref: n
  }, i));
});
process.env.NODE_ENV !== "production" && (Ku.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Display the top and bottom dividers.
   * @default false
   */
  dividers: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const _k = Ku;
function VT(e) {
  return ee("MuiDialogContentText", e);
}
const UT = ne("MuiDialogContentText", ["root"]), zk = UT, WT = ["children", "className"], HT = (e) => {
  const {
    classes: o
  } = e, r = te({
    root: ["root"]
  }, VT, o);
  return u({}, o, r);
}, qT = P(xt, {
  shouldForwardProp: (e) => dt(e) || e === "classes",
  name: "MuiDialogContentText",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({}), Yu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiDialogContentText"
  }), {
    className: s
  } = r, a = z(r, WT), i = HT(a);
  return /* @__PURE__ */ x(qT, u({
    component: "p",
    variant: "body1",
    color: "text.secondary",
    ref: n,
    ownerState: a,
    className: D(i.root, s)
  }, r, {
    classes: i
  }));
});
process.env.NODE_ENV !== "production" && (Yu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const Vk = Yu, GT = ["className", "id"], KT = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"]
  }, DT, o);
}, YT = P(xt, {
  name: "MuiDialogTitle",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  padding: "16px 24px",
  flex: "0 0 auto"
}), Xu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiDialogTitle"
  }), {
    className: s,
    id: a
  } = r, i = z(r, GT), l = r, c = KT(l), {
    titleId: d = a
  } = f.useContext(Hu);
  return /* @__PURE__ */ x(YT, u({
    component: "h2",
    className: D(c.root, s),
    ownerState: l,
    ref: n,
    variant: "h6",
    id: a ?? d
  }, i));
});
process.env.NODE_ENV !== "production" && (Xu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * @ignore
   */
  id: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const Uk = Xu;
function XT(e) {
  return ee("MuiDivider", e);
}
const QT = ne("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]), Zi = QT, ZT = ["absolute", "children", "className", "component", "flexItem", "light", "orientation", "role", "textAlign", "variant"], JT = (e) => {
  const {
    absolute: o,
    children: n,
    classes: r,
    flexItem: s,
    light: a,
    orientation: i,
    textAlign: l,
    variant: c
  } = e;
  return te({
    root: ["root", o && "absolute", c, a && "light", i === "vertical" && "vertical", s && "flexItem", n && "withChildren", n && i === "vertical" && "withChildrenVertical", l === "right" && i !== "vertical" && "textAlignRight", l === "left" && i !== "vertical" && "textAlignLeft"],
    wrapper: ["wrapper", i === "vertical" && "wrapperVertical"]
  }, XT, r);
}, e0 = P("div", {
  name: "MuiDivider",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.absolute && o.absolute, o[n.variant], n.light && o.light, n.orientation === "vertical" && o.vertical, n.flexItem && o.flexItem, n.children && o.withChildren, n.children && n.orientation === "vertical" && o.withChildrenVertical, n.textAlign === "right" && n.orientation !== "vertical" && o.textAlignRight, n.textAlign === "left" && n.orientation !== "vertical" && o.textAlignLeft];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  margin: 0,
  // Reset browser default style.
  flexShrink: 0,
  borderWidth: 0,
  borderStyle: "solid",
  borderColor: (e.vars || e).palette.divider,
  borderBottomWidth: "thin"
}, o.absolute && {
  position: "absolute",
  bottom: 0,
  left: 0,
  width: "100%"
}, o.light && {
  borderColor: e.vars ? `rgba(${e.vars.palette.dividerChannel} / 0.08)` : Pe(e.palette.divider, 0.08)
}, o.variant === "inset" && {
  marginLeft: 72
}, o.variant === "middle" && o.orientation === "horizontal" && {
  marginLeft: e.spacing(2),
  marginRight: e.spacing(2)
}, o.variant === "middle" && o.orientation === "vertical" && {
  marginTop: e.spacing(1),
  marginBottom: e.spacing(1)
}, o.orientation === "vertical" && {
  height: "100%",
  borderBottomWidth: 0,
  borderRightWidth: "thin"
}, o.flexItem && {
  alignSelf: "stretch",
  height: "auto"
}), ({
  ownerState: e
}) => u({}, e.children && {
  display: "flex",
  whiteSpace: "nowrap",
  textAlign: "center",
  border: 0,
  "&::before, &::after": {
    content: '""',
    alignSelf: "center"
  }
}), ({
  theme: e,
  ownerState: o
}) => u({}, o.children && o.orientation !== "vertical" && {
  "&::before, &::after": {
    width: "100%",
    borderTop: `thin solid ${(e.vars || e).palette.divider}`
  }
}), ({
  theme: e,
  ownerState: o
}) => u({}, o.children && o.orientation === "vertical" && {
  flexDirection: "column",
  "&::before, &::after": {
    height: "100%",
    borderLeft: `thin solid ${(e.vars || e).palette.divider}`
  }
}), ({
  ownerState: e
}) => u({}, e.textAlign === "right" && e.orientation !== "vertical" && {
  "&::before": {
    width: "90%"
  },
  "&::after": {
    width: "10%"
  }
}, e.textAlign === "left" && e.orientation !== "vertical" && {
  "&::before": {
    width: "10%"
  },
  "&::after": {
    width: "90%"
  }
})), t0 = P("span", {
  name: "MuiDivider",
  slot: "Wrapper",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.wrapper, n.orientation === "vertical" && o.wrapperVertical];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  display: "inline-block",
  paddingLeft: `calc(${e.spacing(1)} * 1.2)`,
  paddingRight: `calc(${e.spacing(1)} * 1.2)`
}, o.orientation === "vertical" && {
  paddingTop: `calc(${e.spacing(1)} * 1.2)`,
  paddingBottom: `calc(${e.spacing(1)} * 1.2)`
})), Fa = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiDivider"
  }), {
    absolute: s = !1,
    children: a,
    className: i,
    component: l = a ? "div" : "hr",
    flexItem: c = !1,
    light: d = !1,
    orientation: p = "horizontal",
    role: m = l !== "hr" ? "separator" : void 0,
    textAlign: b = "center",
    variant: h = "fullWidth"
  } = r, v = z(r, ZT), C = u({}, r, {
    absolute: s,
    component: l,
    flexItem: c,
    light: d,
    orientation: p,
    role: m,
    textAlign: b,
    variant: h
  }), g = JT(C);
  return /* @__PURE__ */ x(e0, u({
    as: l,
    className: D(g.root, i),
    role: m,
    ref: n,
    ownerState: C
  }, v, {
    children: a ? /* @__PURE__ */ x(t0, {
      className: g.wrapper,
      ownerState: C,
      children: a
    }) : null
  }));
});
Fa.muiSkipListHighlight = !0;
process.env.NODE_ENV !== "production" && (Fa.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Absolutely position the element.
   * @default false
   */
  absolute: t.bool,
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, a vertical divider will have the correct height when used in flex container.
   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
   * @default false
   */
  flexItem: t.bool,
  /**
   * If `true`, the divider will have a lighter color.
   * @default false
   * @deprecated Use <Divider sx={{ opacity: 0.6 }} /> (or any opacity or color) instead. [How to migrate](/material-ui/migration/migrating-from-deprecated-apis/)
   */
  light: t.bool,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: t.oneOf(["horizontal", "vertical"]),
  /**
   * @ignore
   */
  role: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The text alignment.
   * @default 'center'
   */
  textAlign: t.oneOf(["center", "left", "right"]),
  /**
   * The variant to use.
   * @default 'fullWidth'
   */
  variant: t.oneOfType([t.oneOf(["fullWidth", "inset", "middle"]), t.string])
});
const Wk = Fa, o0 = ["addEndListener", "appear", "children", "container", "direction", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
function n0(e, o, n) {
  const r = o.getBoundingClientRect(), s = n && n.getBoundingClientRect(), a = Rt(o);
  let i;
  if (o.fakeTransform)
    i = o.fakeTransform;
  else {
    const d = a.getComputedStyle(o);
    i = d.getPropertyValue("-webkit-transform") || d.getPropertyValue("transform");
  }
  let l = 0, c = 0;
  if (i && i !== "none" && typeof i == "string") {
    const d = i.split("(")[1].split(")")[0].split(",");
    l = parseInt(d[4], 10), c = parseInt(d[5], 10);
  }
  return e === "left" ? s ? `translateX(${s.right + l - r.left}px)` : `translateX(${a.innerWidth + l - r.left}px)` : e === "right" ? s ? `translateX(-${r.right - s.left - l}px)` : `translateX(-${r.left + r.width - l}px)` : e === "up" ? s ? `translateY(${s.bottom + c - r.top}px)` : `translateY(${a.innerHeight + c - r.top}px)` : s ? `translateY(-${r.top - s.top + r.height - c}px)` : `translateY(-${r.top + r.height - c}px)`;
}
function Qu(e) {
  return typeof e == "function" ? e() : e;
}
function Lr(e, o, n) {
  const r = Qu(n), s = n0(e, o, r);
  s && (o.style.webkitTransform = s, o.style.transform = s);
}
const Zu = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = rt(), s = {
    enter: r.transitions.easing.easeOut,
    exit: r.transitions.easing.sharp
  }, a = {
    enter: r.transitions.duration.enteringScreen,
    exit: r.transitions.duration.leavingScreen
  }, {
    addEndListener: i,
    appear: l = !0,
    children: c,
    container: d,
    direction: p = "down",
    easing: m = s,
    in: b,
    onEnter: h,
    onEntered: v,
    onEntering: C,
    onExit: g,
    onExited: y,
    onExiting: $,
    style: T,
    timeout: O = a,
    // eslint-disable-next-line react/prop-types
    TransitionComponent: S = hr
  } = o, R = z(o, o0), w = f.useRef(null), E = Ve(c.ref, w, n), N = (_) => (W) => {
    _ && (W === void 0 ? _(w.current) : _(w.current, W));
  }, M = N((_, W) => {
    Lr(p, _, d), gs(_), h && h(_, W);
  }), I = N((_, W) => {
    const de = eo({
      timeout: O,
      style: T,
      easing: m
    }, {
      mode: "enter"
    });
    _.style.webkitTransition = r.transitions.create("-webkit-transform", u({}, de)), _.style.transition = r.transitions.create("transform", u({}, de)), _.style.webkitTransform = "none", _.style.transform = "none", C && C(_, W);
  }), F = N(v), A = N($), B = N((_) => {
    const W = eo({
      timeout: O,
      style: T,
      easing: m
    }, {
      mode: "exit"
    });
    _.style.webkitTransition = r.transitions.create("-webkit-transform", W), _.style.transition = r.transitions.create("transform", W), Lr(p, _, d), g && g(_);
  }), j = N((_) => {
    _.style.webkitTransition = "", _.style.transition = "", y && y(_);
  }), V = (_) => {
    i && i(w.current, _);
  }, U = f.useCallback(() => {
    w.current && Lr(p, w.current, d);
  }, [p, d]);
  return f.useEffect(() => {
    if (b || p === "down" || p === "right")
      return;
    const _ = fr(() => {
      w.current && Lr(p, w.current, d);
    }), W = Rt(w.current);
    return W.addEventListener("resize", _), () => {
      _.clear(), W.removeEventListener("resize", _);
    };
  }, [p, b, d]), f.useEffect(() => {
    b || U();
  }, [b, U]), /* @__PURE__ */ x(S, u({
    nodeRef: w,
    onEnter: M,
    onEntered: F,
    onEntering: I,
    onExit: B,
    onExited: j,
    onExiting: A,
    addEndListener: V,
    appear: l,
    in: b,
    timeout: O
  }, R, {
    children: (_, W) => /* @__PURE__ */ f.cloneElement(c, u({
      ref: E,
      style: u({
        visibility: _ === "exited" && !b ? "hidden" : void 0
      }, T, c.props.style)
    }, W))
  }));
});
process.env.NODE_ENV !== "production" && (Zu.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: t.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: t.bool,
  /**
   * A single child content element.
   */
  children: _o.isRequired,
  /**
   * An HTML element, or a function that returns one.
   * It's used to set the container the Slide is transitioning from.
   */
  container: ut(t.oneOfType([fo, t.func]), (e) => {
    if (e.open) {
      const o = Qu(e.container);
      if (o && o.nodeType === 1) {
        const n = o.getBoundingClientRect();
        if (process.env.NODE_ENV !== "test" && n.top === 0 && n.left === 0 && n.right === 0 && n.bottom === 0)
          return new Error(["MUI: The `container` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
      } else if (!o || typeof o.getBoundingClientRect != "function" || o.contextElement != null && o.contextElement.nodeType !== 1)
        return new Error(["MUI: The `container` prop provided to the component is invalid.", "It should be an HTML element instance."].join(`
`));
    }
    return null;
  }),
  /**
   * Direction the child node will enter from.
   * @default 'down'
   */
  direction: t.oneOf(["down", "left", "right", "up"]),
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   * @default {
   *   enter: theme.transitions.easing.easeOut,
   *   exit: theme.transitions.easing.sharp,
   * }
   */
  easing: t.oneOfType([t.shape({
    enter: t.string,
    exit: t.string
  }), t.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: t.bool,
  /**
   * @ignore
   */
  onEnter: t.func,
  /**
   * @ignore
   */
  onEntered: t.func,
  /**
   * @ignore
   */
  onEntering: t.func,
  /**
   * @ignore
   */
  onExit: t.func,
  /**
   * @ignore
   */
  onExited: t.func,
  /**
   * @ignore
   */
  onExiting: t.func,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  timeout: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })])
});
const r0 = Zu;
function s0(e) {
  return ee("MuiDrawer", e);
}
const a0 = ne("MuiDrawer", ["root", "docked", "paper", "paperAnchorLeft", "paperAnchorRight", "paperAnchorTop", "paperAnchorBottom", "paperAnchorDockedLeft", "paperAnchorDockedRight", "paperAnchorDockedTop", "paperAnchorDockedBottom", "modal"]), Hk = a0, i0 = ["BackdropProps"], l0 = ["anchor", "BackdropProps", "children", "className", "elevation", "hideBackdrop", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"], Ju = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.root, (n.variant === "permanent" || n.variant === "persistent") && o.docked, o.modal];
}, c0 = (e) => {
  const {
    classes: o,
    anchor: n,
    variant: r
  } = e, s = {
    root: ["root"],
    docked: [(r === "permanent" || r === "persistent") && "docked"],
    modal: ["modal"],
    paper: ["paper", `paperAnchor${k(n)}`, r !== "temporary" && `paperAnchorDocked${k(n)}`]
  };
  return te(s, s0, o);
}, u0 = P(Aa, {
  name: "MuiDrawer",
  slot: "Root",
  overridesResolver: Ju
})(({
  theme: e
}) => ({
  zIndex: (e.vars || e).zIndex.drawer
})), Ji = P("div", {
  shouldForwardProp: dt,
  name: "MuiDrawer",
  slot: "Docked",
  skipVariantsResolver: !1,
  overridesResolver: Ju
})({
  flex: "0 0 auto"
}), d0 = P(Gt, {
  name: "MuiDrawer",
  slot: "Paper",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.paper, o[`paperAnchor${k(n.anchor)}`], n.variant !== "temporary" && o[`paperAnchorDocked${k(n.anchor)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  overflowY: "auto",
  display: "flex",
  flexDirection: "column",
  height: "100%",
  flex: "1 0 auto",
  zIndex: (e.vars || e).zIndex.drawer,
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch",
  // temporary style
  position: "fixed",
  top: 0,
  // We disable the focus ring for mouse, touch and keyboard users.
  // At some point, it would be better to keep it for keyboard users.
  // :focus-ring CSS pseudo-class will help.
  outline: 0
}, o.anchor === "left" && {
  left: 0
}, o.anchor === "top" && {
  top: 0,
  left: 0,
  right: 0,
  height: "auto",
  maxHeight: "100%"
}, o.anchor === "right" && {
  right: 0
}, o.anchor === "bottom" && {
  top: "auto",
  left: 0,
  bottom: 0,
  right: 0,
  height: "auto",
  maxHeight: "100%"
}, o.anchor === "left" && o.variant !== "temporary" && {
  borderRight: `1px solid ${(e.vars || e).palette.divider}`
}, o.anchor === "top" && o.variant !== "temporary" && {
  borderBottom: `1px solid ${(e.vars || e).palette.divider}`
}, o.anchor === "right" && o.variant !== "temporary" && {
  borderLeft: `1px solid ${(e.vars || e).palette.divider}`
}, o.anchor === "bottom" && o.variant !== "temporary" && {
  borderTop: `1px solid ${(e.vars || e).palette.divider}`
})), ed = {
  left: "right",
  right: "left",
  top: "down",
  bottom: "up"
};
function Yo(e) {
  return ["left", "right"].indexOf(e) !== -1;
}
function qn(e, o) {
  return e.direction === "rtl" && Yo(o) ? ed[o] : o;
}
const td = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiDrawer"
  }), s = rt(), a = {
    enter: s.transitions.duration.enteringScreen,
    exit: s.transitions.duration.leavingScreen
  }, {
    anchor: i = "left",
    BackdropProps: l,
    children: c,
    className: d,
    elevation: p = 16,
    hideBackdrop: m = !1,
    ModalProps: {
      BackdropProps: b
    } = {},
    onClose: h,
    open: v = !1,
    PaperProps: C = {},
    SlideProps: g,
    // eslint-disable-next-line react/prop-types
    TransitionComponent: y = r0,
    transitionDuration: $ = a,
    variant: T = "temporary"
  } = r, O = z(r.ModalProps, i0), S = z(r, l0), R = f.useRef(!1);
  f.useEffect(() => {
    R.current = !0;
  }, []);
  const w = qn(s, i), N = u({}, r, {
    anchor: i,
    elevation: p,
    open: v,
    variant: T
  }, S), M = c0(N), I = /* @__PURE__ */ x(d0, u({
    elevation: T === "temporary" ? p : 0,
    square: !0
  }, C, {
    className: D(M.paper, C.className),
    ownerState: N,
    children: c
  }));
  if (T === "permanent")
    return /* @__PURE__ */ x(Ji, u({
      className: D(M.root, M.docked, d),
      ownerState: N,
      ref: n
    }, S, {
      children: I
    }));
  const F = /* @__PURE__ */ x(y, u({
    in: v,
    direction: ed[w],
    timeout: $,
    appear: R.current
  }, g, {
    children: I
  }));
  return T === "persistent" ? /* @__PURE__ */ x(Ji, u({
    className: D(M.root, M.docked, d),
    ownerState: N,
    ref: n
  }, S, {
    children: F
  })) : /* @__PURE__ */ x(u0, u({
    BackdropProps: u({}, l, b, {
      transitionDuration: $
    }),
    className: D(M.root, M.modal, d),
    open: v,
    ownerState: N,
    onClose: h,
    hideBackdrop: m,
    ref: n
  }, S, O, {
    children: F
  }));
});
process.env.NODE_ENV !== "production" && (td.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Side from which the drawer will appear.
   * @default 'left'
   */
  anchor: t.oneOf(["bottom", "left", "right", "top"]),
  /**
   * @ignore
   */
  BackdropProps: t.object,
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The elevation of the drawer.
   * @default 16
   */
  elevation: lt,
  /**
   * If `true`, the backdrop is not rendered.
   * @default false
   */
  hideBackdrop: t.bool,
  /**
   * Props applied to the [`Modal`](/material-ui/api/modal/) element.
   * @default {}
   */
  ModalProps: t.object,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
   */
  onClose: t.func,
  /**
   * If `true`, the component is shown.
   * @default false
   */
  open: t.bool,
  /**
   * Props applied to the [`Paper`](/material-ui/api/paper/) element.
   * @default {}
   */
  PaperProps: t.object,
  /**
   * Props applied to the [`Slide`](/material-ui/api/slide/) element.
   */
  SlideProps: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  transitionDuration: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * The variant to use.
   * @default 'temporary'
   */
  variant: t.oneOf(["permanent", "persistent", "temporary"])
});
const p0 = td;
function f0(e) {
  return ee("MuiFab", e);
}
const m0 = ne("MuiFab", ["root", "primary", "secondary", "extended", "circular", "focusVisible", "disabled", "colorInherit", "sizeSmall", "sizeMedium", "sizeLarge", "info", "error", "warning", "success"]), el = m0, b0 = ["children", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"], g0 = (e) => {
  const {
    color: o,
    variant: n,
    classes: r,
    size: s
  } = e, a = {
    root: ["root", n, `size${k(s)}`, o === "inherit" ? "colorInherit" : o]
  }, i = te(a, f0, r);
  return u({}, r, i);
}, h0 = P(pt, {
  name: "MuiFab",
  slot: "Root",
  shouldForwardProp: (e) => dt(e) || e === "classes",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], o[`size${k(n.size)}`], n.color === "inherit" && o.colorInherit, o[k(n.size)], o[n.color]];
  }
})(({
  theme: e,
  ownerState: o
}) => {
  var n, r;
  return u({}, e.typography.button, {
    minHeight: 36,
    transition: e.transitions.create(["background-color", "box-shadow", "border-color"], {
      duration: e.transitions.duration.short
    }),
    borderRadius: "50%",
    padding: 0,
    minWidth: 0,
    width: 56,
    height: 56,
    zIndex: (e.vars || e).zIndex.fab,
    boxShadow: (e.vars || e).shadows[6],
    "&:active": {
      boxShadow: (e.vars || e).shadows[12]
    },
    color: e.vars ? e.vars.palette.text.primary : (n = (r = e.palette).getContrastText) == null ? void 0 : n.call(r, e.palette.grey[300]),
    backgroundColor: (e.vars || e).palette.grey[300],
    "&:hover": {
      backgroundColor: (e.vars || e).palette.grey.A100,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: (e.vars || e).palette.grey[300]
      },
      textDecoration: "none"
    },
    [`&.${el.focusVisible}`]: {
      boxShadow: (e.vars || e).shadows[6]
    }
  }, o.size === "small" && {
    width: 40,
    height: 40
  }, o.size === "medium" && {
    width: 48,
    height: 48
  }, o.variant === "extended" && {
    borderRadius: 48 / 2,
    padding: "0 16px",
    width: "auto",
    minHeight: "auto",
    minWidth: 48,
    height: 48
  }, o.variant === "extended" && o.size === "small" && {
    width: "auto",
    padding: "0 8px",
    borderRadius: 34 / 2,
    minWidth: 34,
    height: 34
  }, o.variant === "extended" && o.size === "medium" && {
    width: "auto",
    padding: "0 16px",
    borderRadius: 40 / 2,
    minWidth: 40,
    height: 40
  }, o.color === "inherit" && {
    color: "inherit"
  });
}, ({
  theme: e,
  ownerState: o
}) => u({}, o.color !== "inherit" && o.color !== "default" && (e.vars || e).palette[o.color] != null && {
  color: (e.vars || e).palette[o.color].contrastText,
  backgroundColor: (e.vars || e).palette[o.color].main,
  "&:hover": {
    backgroundColor: (e.vars || e).palette[o.color].dark,
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: (e.vars || e).palette[o.color].main
    }
  }
}), ({
  theme: e
}) => ({
  [`&.${el.disabled}`]: {
    color: (e.vars || e).palette.action.disabled,
    boxShadow: (e.vars || e).shadows[0],
    backgroundColor: (e.vars || e).palette.action.disabledBackground
  }
})), od = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiFab"
  }), {
    children: s,
    className: a,
    color: i = "default",
    component: l = "button",
    disabled: c = !1,
    disableFocusRipple: d = !1,
    focusVisibleClassName: p,
    size: m = "large",
    variant: b = "circular"
  } = r, h = z(r, b0), v = u({}, r, {
    color: i,
    component: l,
    disabled: c,
    disableFocusRipple: d,
    size: m,
    variant: b
  }), C = g0(v);
  return /* @__PURE__ */ x(h0, u({
    className: D(C.root, a),
    component: l,
    disabled: c,
    focusRipple: !d,
    focusVisibleClassName: D(C.focusVisible, p),
    ownerState: v,
    ref: n
  }, h, {
    classes: C,
    children: s
  }));
});
process.env.NODE_ENV !== "production" && (od.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'default'
   */
  color: t.oneOfType([t.oneOf(["default", "error", "info", "inherit", "primary", "secondary", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   */
  disableRipple: t.bool,
  /**
   * @ignore
   */
  focusVisibleClassName: t.string,
  /**
   * The URL to link to when the button is clicked.
   * If defined, an `a` element will be used as the root node.
   */
  href: t.string,
  /**
   * The size of the component.
   * `small` is equivalent to the dense button styling.
   * @default 'large'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'circular'
   */
  variant: t.oneOfType([t.oneOf(["circular", "extended"]), t.string])
});
const nd = od, v0 = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"], y0 = (e) => {
  const {
    classes: o,
    disableUnderline: n
  } = e, s = te({
    root: ["root", !n && "underline"],
    input: ["input"]
  }, Ry, o);
  return u({}, o, s);
}, C0 = P($s, {
  shouldForwardProp: (e) => dt(e) || e === "classes",
  name: "MuiFilledInput",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [...Ts(e, o), !n.disableUnderline && o.underline];
  }
})(({
  theme: e,
  ownerState: o
}) => {
  var n;
  const r = e.palette.mode === "light", s = r ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)", a = r ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)", i = r ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)", l = r ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
  return u({
    position: "relative",
    backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : a,
    borderTopLeftRadius: (e.vars || e).shape.borderRadius,
    borderTopRightRadius: (e.vars || e).shape.borderRadius,
    transition: e.transitions.create("background-color", {
      duration: e.transitions.duration.shorter,
      easing: e.transitions.easing.easeOut
    }),
    "&:hover": {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.hoverBg : i,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : a
      }
    },
    [`&.${Lt.focused}`]: {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.bg : a
    },
    [`&.${Lt.disabled}`]: {
      backgroundColor: e.vars ? e.vars.palette.FilledInput.disabledBg : l
    }
  }, !o.disableUnderline && {
    "&::after": {
      borderBottom: `2px solid ${(n = (e.vars || e).palette[o.color || "primary"]) == null ? void 0 : n.main}`,
      left: 0,
      bottom: 0,
      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
      content: '""',
      position: "absolute",
      right: 0,
      transform: "scaleX(0)",
      transition: e.transitions.create("transform", {
        duration: e.transitions.duration.shorter,
        easing: e.transitions.easing.easeOut
      }),
      pointerEvents: "none"
      // Transparent to the hover style.
    },
    [`&.${Lt.focused}:after`]: {
      // translateX(0) is a workaround for Safari transform scale bug
      // See https://github.com/mui/material-ui/issues/31766
      transform: "scaleX(1) translateX(0)"
    },
    [`&.${Lt.error}`]: {
      "&::before, &::after": {
        borderBottomColor: (e.vars || e).palette.error.main
      }
    },
    "&::before": {
      borderBottom: `1px solid ${e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})` : s}`,
      left: 0,
      bottom: 0,
      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
      content: '"\\00a0"',
      position: "absolute",
      right: 0,
      transition: e.transitions.create("border-bottom-color", {
        duration: e.transitions.duration.shorter
      }),
      pointerEvents: "none"
      // Transparent to the hover style.
    },
    [`&:hover:not(.${Lt.disabled}, .${Lt.error}):before`]: {
      borderBottom: `1px solid ${(e.vars || e).palette.text.primary}`
    },
    [`&.${Lt.disabled}:before`]: {
      borderBottomStyle: "dotted"
    }
  }, o.startAdornment && {
    paddingLeft: 12
  }, o.endAdornment && {
    paddingRight: 12
  }, o.multiline && u({
    padding: "25px 12px 8px"
  }, o.size === "small" && {
    paddingTop: 21,
    paddingBottom: 4
  }, o.hiddenLabel && {
    paddingTop: 16,
    paddingBottom: 17
  }, o.hiddenLabel && o.size === "small" && {
    paddingTop: 8,
    paddingBottom: 9
  }));
}), x0 = P(Ss, {
  name: "MuiFilledInput",
  slot: "Input",
  overridesResolver: Os
})(({
  theme: e,
  ownerState: o
}) => u({
  paddingTop: 25,
  paddingRight: 12,
  paddingBottom: 8,
  paddingLeft: 12
}, !e.vars && {
  "&:-webkit-autofill": {
    WebkitBoxShadow: e.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
    WebkitTextFillColor: e.palette.mode === "light" ? null : "#fff",
    caretColor: e.palette.mode === "light" ? null : "#fff",
    borderTopLeftRadius: "inherit",
    borderTopRightRadius: "inherit"
  }
}, e.vars && {
  "&:-webkit-autofill": {
    borderTopLeftRadius: "inherit",
    borderTopRightRadius: "inherit"
  },
  [e.getColorSchemeSelector("dark")]: {
    "&:-webkit-autofill": {
      WebkitBoxShadow: "0 0 0 100px #266798 inset",
      WebkitTextFillColor: "#fff",
      caretColor: "#fff"
    }
  }
}, o.size === "small" && {
  paddingTop: 21,
  paddingBottom: 4
}, o.hiddenLabel && {
  paddingTop: 16,
  paddingBottom: 17
}, o.startAdornment && {
  paddingLeft: 0
}, o.endAdornment && {
  paddingRight: 0
}, o.hiddenLabel && o.size === "small" && {
  paddingTop: 8,
  paddingBottom: 9
}, o.multiline && {
  paddingTop: 0,
  paddingBottom: 0,
  paddingLeft: 0,
  paddingRight: 0
})), ja = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s, a, i;
  const l = oe({
    props: o,
    name: "MuiFilledInput"
  }), {
    components: c = {},
    componentsProps: d,
    fullWidth: p = !1,
    // declare here to prevent spreading to DOM
    inputComponent: m = "input",
    multiline: b = !1,
    slotProps: h,
    slots: v = {},
    type: C = "text"
  } = l, g = z(l, v0), y = u({}, l, {
    fullWidth: p,
    inputComponent: m,
    multiline: b,
    type: C
  }), $ = y0(l), T = {
    root: {
      ownerState: y
    },
    input: {
      ownerState: y
    }
  }, O = h ?? d ? ds(T, h ?? d) : T, S = (r = (s = v.root) != null ? s : c.Root) != null ? r : C0, R = (a = (i = v.input) != null ? i : c.Input) != null ? a : x0;
  return /* @__PURE__ */ x(Rs, u({
    slots: {
      root: S,
      input: R
    },
    componentsProps: O,
    fullWidth: p,
    inputComponent: m,
    multiline: b,
    ref: n,
    type: C
  }, g, {
    classes: $
  }));
});
process.env.NODE_ENV !== "production" && (ja.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: t.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary"]), t.string]),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: t.shape({
    Input: t.elementType,
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: t.shape({
    input: t.object,
    root: t.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: t.bool,
  /**
   * If `true`, the input will not have an underline.
   */
  disableUnderline: t.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: t.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: t.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */
  hiddenLabel: t.bool,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: t.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: yt,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: t.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: t.oneOfType([t.number, t.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: t.oneOfType([t.number, t.string]),
  /**
   * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: t.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: t.string,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: t.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: t.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: t.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: t.oneOfType([t.number, t.string]),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: t.shape({
    input: t.object,
    root: t.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: t.shape({
    input: t.elementType,
    root: t.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: t.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: t.any
});
ja.muiName = "Input";
const rd = ja;
function T0(e) {
  return ee("MuiFormControl", e);
}
const O0 = ne("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]), qk = O0, $0 = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"], S0 = (e) => {
  const {
    classes: o,
    margin: n,
    fullWidth: r
  } = e, s = {
    root: ["root", n !== "none" && `margin${k(n)}`, r && "fullWidth"]
  };
  return te(s, T0, o);
}, R0 = P("div", {
  name: "MuiFormControl",
  slot: "Root",
  overridesResolver: ({
    ownerState: e
  }, o) => u({}, o.root, o[`margin${k(e.margin)}`], e.fullWidth && o.fullWidth)
})(({
  ownerState: e
}) => u({
  display: "inline-flex",
  flexDirection: "column",
  position: "relative",
  // Reset fieldset default style.
  minWidth: 0,
  padding: 0,
  margin: 0,
  border: 0,
  verticalAlign: "top"
}, e.margin === "normal" && {
  marginTop: 16,
  marginBottom: 8
}, e.margin === "dense" && {
  marginTop: 8,
  marginBottom: 4
}, e.fullWidth && {
  width: "100%"
})), sd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiFormControl"
  }), {
    children: s,
    className: a,
    color: i = "primary",
    component: l = "div",
    disabled: c = !1,
    error: d = !1,
    focused: p,
    fullWidth: m = !1,
    hiddenLabel: b = !1,
    margin: h = "none",
    required: v = !1,
    size: C = "medium",
    variant: g = "outlined"
  } = r, y = z(r, $0), $ = u({}, r, {
    color: i,
    component: l,
    disabled: c,
    error: d,
    fullWidth: m,
    hiddenLabel: b,
    margin: h,
    required: v,
    size: C,
    variant: g
  }), T = S0($), [O, S] = f.useState(() => {
    let A = !1;
    return s && f.Children.forEach(s, (B) => {
      if (!Co(B, ["Input", "Select"]))
        return;
      const j = Co(B, ["Select"]) ? B.props.input : B;
      j && gy(j.props) && (A = !0);
    }), A;
  }), [R, w] = f.useState(() => {
    let A = !1;
    return s && f.Children.forEach(s, (B) => {
      Co(B, ["Input", "Select"]) && (ns(B.props, !0) || ns(B.props.inputProps, !0)) && (A = !0);
    }), A;
  }), [E, N] = f.useState(!1);
  c && E && N(!1);
  const M = p !== void 0 && !c ? p : E;
  let I;
  if (process.env.NODE_ENV !== "production") {
    const A = f.useRef(!1);
    I = () => (A.current && console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join(`
`)), A.current = !0, () => {
      A.current = !1;
    });
  }
  const F = f.useMemo(() => ({
    adornedStart: O,
    setAdornedStart: S,
    color: i,
    disabled: c,
    error: d,
    filled: R,
    focused: M,
    fullWidth: m,
    hiddenLabel: b,
    size: C,
    onBlur: () => {
      N(!1);
    },
    onEmpty: () => {
      w(!1);
    },
    onFilled: () => {
      w(!0);
    },
    onFocus: () => {
      N(!0);
    },
    registerEffect: I,
    required: v,
    variant: g
  }), [O, i, c, d, R, M, m, b, I, v, C, g]);
  return /* @__PURE__ */ x(xs.Provider, {
    value: F,
    children: /* @__PURE__ */ x(R0, u({
      as: l,
      ownerState: $,
      className: D(T.root, a),
      ref: n
    }, y, {
      children: s
    }))
  });
});
process.env.NODE_ENV !== "production" && (sd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the label, input and helper text should be displayed in a disabled state.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */
  error: t.bool,
  /**
   * If `true`, the component is displayed in focused state.
   */
  focused: t.bool,
  /**
   * If `true`, the component will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * If `true`, the label is hidden.
   * This is used to increase density for a `FilledInput`.
   * Be sure to add `aria-label` to the `input` element.
   * @default false
   */
  hiddenLabel: t.bool,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: t.oneOf(["dense", "none", "normal"]),
  /**
   * If `true`, the label will indicate that the `input` is required.
   * @default false
   */
  required: t.bool,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: t.oneOf(["filled", "outlined", "standard"])
});
const w0 = sd, ad = eb({
  createStyledComponent: P("div", {
    name: "MuiStack",
    slot: "Root",
    overridesResolver: (e, o) => o.root
  }),
  useThemeProps: (e) => oe({
    props: e,
    name: "MuiStack"
  })
});
process.env.NODE_ENV !== "production" && (ad.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'column'
   */
  direction: t.oneOfType([t.oneOf(["column-reverse", "column", "row-reverse", "row"]), t.arrayOf(t.oneOf(["column-reverse", "column", "row-reverse", "row"])), t.object]),
  /**
   * Add an element between each child.
   */
  divider: t.node,
  /**
   * Defines the space between immediate children.
   * @default 0
   */
  spacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
  /**
   * The system prop, which allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
   *
   * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
   * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
   *
   * To enable this flag globally, follow the [theme's default props](https://mui.com/material-ui/customization/theme-components/#default-props) configuration.
   * @default false
   */
  useFlexGap: t.bool
});
const E0 = ad, P0 = ne("MuiStack", ["root"]), Gk = P0;
function N0(e) {
  return ee("MuiFormControlLabel", e);
}
const I0 = ne("MuiFormControlLabel", ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label", "error", "required", "asterisk"]), Gn = I0, k0 = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "required", "slotProps", "value"], M0 = (e) => {
  const {
    classes: o,
    disabled: n,
    labelPlacement: r,
    error: s,
    required: a
  } = e, i = {
    root: ["root", n && "disabled", `labelPlacement${k(r)}`, s && "error", a && "required"],
    label: ["label", n && "disabled"],
    asterisk: ["asterisk", s && "error"]
  };
  return te(i, N0, o);
}, B0 = P("label", {
  name: "MuiFormControlLabel",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${Gn.label}`]: o.label
    }, o.root, o[`labelPlacement${k(n.labelPlacement)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  display: "inline-flex",
  alignItems: "center",
  cursor: "pointer",
  // For correct alignment with the text.
  verticalAlign: "middle",
  WebkitTapHighlightColor: "transparent",
  marginLeft: -11,
  marginRight: 16,
  // used for row presentation of radio/checkbox
  [`&.${Gn.disabled}`]: {
    cursor: "default"
  }
}, o.labelPlacement === "start" && {
  flexDirection: "row-reverse",
  marginLeft: 16,
  // used for row presentation of radio/checkbox
  marginRight: -11
}, o.labelPlacement === "top" && {
  flexDirection: "column-reverse",
  marginLeft: 16
}, o.labelPlacement === "bottom" && {
  flexDirection: "column",
  marginLeft: 16
}, {
  [`& .${Gn.label}`]: {
    [`&.${Gn.disabled}`]: {
      color: (e.vars || e).palette.text.disabled
    }
  }
})), L0 = P("span", {
  name: "MuiFormControlLabel",
  slot: "Asterisk",
  overridesResolver: (e, o) => o.asterisk
})(({
  theme: e
}) => ({
  [`&.${Gn.error}`]: {
    color: (e.vars || e).palette.error.main
  }
})), id = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s;
  const a = oe({
    props: o,
    name: "MuiFormControlLabel"
  }), {
    className: i,
    componentsProps: l = {},
    control: c,
    disabled: d,
    disableTypography: p,
    label: m,
    labelPlacement: b = "end",
    required: h,
    slotProps: v = {}
  } = a, C = z(a, k0), g = oo(), y = (r = d ?? c.props.disabled) != null ? r : g == null ? void 0 : g.disabled, $ = h ?? c.props.required, T = {
    disabled: y,
    required: $
  };
  ["checked", "name", "onChange", "value", "inputRef"].forEach((N) => {
    typeof c.props[N] > "u" && typeof a[N] < "u" && (T[N] = a[N]);
  });
  const O = $o({
    props: a,
    muiFormControl: g,
    states: ["error"]
  }), S = u({}, a, {
    disabled: y,
    labelPlacement: b,
    required: $,
    error: O.error
  }), R = M0(S), w = (s = v.typography) != null ? s : l.typography;
  let E = m;
  return E != null && E.type !== xt && !p && (E = /* @__PURE__ */ x(xt, u({
    component: "span"
  }, w, {
    className: D(R.label, w == null ? void 0 : w.className),
    children: E
  }))), /* @__PURE__ */ Ce(B0, u({
    className: D(R.root, i),
    ownerState: S,
    ref: n
  }, C, {
    children: [/* @__PURE__ */ f.cloneElement(c, T), $ ? /* @__PURE__ */ Ce(E0, {
      display: "block",
      children: [E, /* @__PURE__ */ Ce(L0, {
        ownerState: S,
        "aria-hidden": !0,
        className: R.asterisk,
        children: [" ", "*"]
      })]
    }) : E]
  }));
});
process.env.NODE_ENV !== "production" && (id.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component appears selected.
   */
  checked: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  componentsProps: t.shape({
    typography: t.object
  }),
  /**
   * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
   */
  control: t.element.isRequired,
  /**
   * If `true`, the control is disabled.
   */
  disabled: t.bool,
  /**
   * If `true`, the label is rendered as it is passed without an additional typography node.
   */
  disableTypography: t.bool,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: yt,
  /**
   * A text or an element to be used in an enclosing label element.
   */
  label: t.node,
  /**
   * The position of the label.
   * @default 'end'
   */
  labelPlacement: t.oneOf(["bottom", "end", "start", "top"]),
  /**
   * @ignore
   */
  name: t.string,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: t.func,
  /**
   * If `true`, the label will indicate that the `input` is required.
   */
  required: t.bool,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    typography: t.object
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value of the component.
   */
  value: t.any
});
const Kk = id;
function D0(e) {
  return ee("MuiFormGroup", e);
}
const A0 = ne("MuiFormGroup", ["root", "row", "error"]), Yk = A0, F0 = ["className", "row"], j0 = (e) => {
  const {
    classes: o,
    row: n,
    error: r
  } = e;
  return te({
    root: ["root", n && "row", r && "error"]
  }, D0, o);
}, _0 = P("div", {
  name: "MuiFormGroup",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.row && o.row];
  }
})(({
  ownerState: e
}) => u({
  display: "flex",
  flexDirection: "column",
  flexWrap: "wrap"
}, e.row && {
  flexDirection: "row"
})), ld = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiFormGroup"
  }), {
    className: s,
    row: a = !1
  } = r, i = z(r, F0), l = oo(), c = $o({
    props: r,
    muiFormControl: l,
    states: ["error"]
  }), d = u({}, r, {
    row: a,
    error: c.error
  }), p = j0(d);
  return /* @__PURE__ */ x(_0, u({
    className: D(p.root, s),
    ownerState: d,
    ref: n
  }, i));
});
process.env.NODE_ENV !== "production" && (ld.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Display group of elements in a compact row.
   * @default false
   */
  row: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const z0 = ld;
function V0(e) {
  return ee("MuiFormHelperText", e);
}
const U0 = ne("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]), tl = U0;
var ol;
const W0 = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"], H0 = (e) => {
  const {
    classes: o,
    contained: n,
    size: r,
    disabled: s,
    error: a,
    filled: i,
    focused: l,
    required: c
  } = e, d = {
    root: ["root", s && "disabled", a && "error", r && `size${k(r)}`, n && "contained", l && "focused", i && "filled", c && "required"]
  };
  return te(d, V0, o);
}, q0 = P("p", {
  name: "MuiFormHelperText",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.size && o[`size${k(n.size)}`], n.contained && o.contained, n.filled && o.filled];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  color: (e.vars || e).palette.text.secondary
}, e.typography.caption, {
  textAlign: "left",
  marginTop: 3,
  marginRight: 0,
  marginBottom: 0,
  marginLeft: 0,
  [`&.${tl.disabled}`]: {
    color: (e.vars || e).palette.text.disabled
  },
  [`&.${tl.error}`]: {
    color: (e.vars || e).palette.error.main
  }
}, o.size === "small" && {
  marginTop: 4
}, o.contained && {
  marginLeft: 14,
  marginRight: 14
})), cd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiFormHelperText"
  }), {
    children: s,
    className: a,
    component: i = "p"
  } = r, l = z(r, W0), c = oo(), d = $o({
    props: r,
    muiFormControl: c,
    states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
  }), p = u({}, r, {
    component: i,
    contained: d.variant === "filled" || d.variant === "outlined",
    variant: d.variant,
    size: d.size,
    disabled: d.disabled,
    error: d.error,
    filled: d.filled,
    focused: d.focused,
    required: d.required
  }), m = H0(p);
  return /* @__PURE__ */ x(q0, u({
    as: i,
    ownerState: p,
    className: D(m.root, a),
    ref: n
  }, l, {
    children: s === " " ? (
      // notranslate needed while Google Translate will not fix zero-width space issue
      ol || (ol = /* @__PURE__ */ x("span", {
        className: "notranslate",
        children: "​"
      }))
    ) : s
  }));
});
process.env.NODE_ENV !== "production" && (cd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   *
   * If `' '` is provided, the component reserves one line height for displaying a future message.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the helper text should be displayed in a disabled state.
   */
  disabled: t.bool,
  /**
   * If `true`, helper text should be displayed in an error state.
   */
  error: t.bool,
  /**
   * If `true`, the helper text should use filled classes key.
   */
  filled: t.bool,
  /**
   * If `true`, the helper text should use focused classes key.
   */
  focused: t.bool,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: t.oneOf(["dense"]),
  /**
   * If `true`, the helper text should use required classes key.
   */
  required: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   */
  variant: t.oneOfType([t.oneOf(["filled", "outlined", "standard"]), t.string])
});
const G0 = cd;
function K0(e) {
  return ee("MuiFormLabel", e);
}
const Y0 = ne("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]), Qn = Y0, X0 = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"], Q0 = (e) => {
  const {
    classes: o,
    color: n,
    focused: r,
    disabled: s,
    error: a,
    filled: i,
    required: l
  } = e, c = {
    root: ["root", `color${k(n)}`, s && "disabled", a && "error", i && "filled", r && "focused", l && "required"],
    asterisk: ["asterisk", a && "error"]
  };
  return te(c, K0, o);
}, Z0 = P("label", {
  name: "MuiFormLabel",
  slot: "Root",
  overridesResolver: ({
    ownerState: e
  }, o) => u({}, o.root, e.color === "secondary" && o.colorSecondary, e.filled && o.filled)
})(({
  theme: e,
  ownerState: o
}) => u({
  color: (e.vars || e).palette.text.secondary
}, e.typography.body1, {
  lineHeight: "1.4375em",
  padding: 0,
  position: "relative",
  [`&.${Qn.focused}`]: {
    color: (e.vars || e).palette[o.color].main
  },
  [`&.${Qn.disabled}`]: {
    color: (e.vars || e).palette.text.disabled
  },
  [`&.${Qn.error}`]: {
    color: (e.vars || e).palette.error.main
  }
})), J0 = P("span", {
  name: "MuiFormLabel",
  slot: "Asterisk",
  overridesResolver: (e, o) => o.asterisk
})(({
  theme: e
}) => ({
  [`&.${Qn.error}`]: {
    color: (e.vars || e).palette.error.main
  }
})), ud = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiFormLabel"
  }), {
    children: s,
    className: a,
    component: i = "label"
  } = r, l = z(r, X0), c = oo(), d = $o({
    props: r,
    muiFormControl: c,
    states: ["color", "required", "focused", "disabled", "error", "filled"]
  }), p = u({}, r, {
    color: d.color || "primary",
    component: i,
    disabled: d.disabled,
    error: d.error,
    filled: d.filled,
    focused: d.focused,
    required: d.required
  }), m = Q0(p);
  return /* @__PURE__ */ Ce(Z0, u({
    as: i,
    ownerState: p,
    className: D(m.root, a),
    ref: n
  }, l, {
    children: [s, d.required && /* @__PURE__ */ Ce(J0, {
      ownerState: p,
      "aria-hidden": !0,
      className: m.asterisk,
      children: [" ", "*"]
    })]
  }));
});
process.env.NODE_ENV !== "production" && (ud.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: t.oneOfType([t.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the label should be displayed in a disabled state.
   */
  disabled: t.bool,
  /**
   * If `true`, the label is displayed in an error state.
   */
  error: t.bool,
  /**
   * If `true`, the label should use filled classes key.
   */
  filled: t.bool,
  /**
   * If `true`, the input of this label is focused (used by `FormGroup` components).
   */
  focused: t.bool,
  /**
   * If `true`, the label will indicate that the `input` is required.
   */
  required: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const eO = ud, dd = /* @__PURE__ */ f.createContext();
process.env.NODE_ENV !== "production" && (dd.displayName = "GridContext");
const nl = dd;
function tO(e) {
  return ee("MuiGrid", e);
}
const oO = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], nO = ["column-reverse", "column", "row-reverse", "row"], rO = ["nowrap", "wrap-reverse", "wrap"], Ln = ["auto", !0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], sO = ne("MuiGrid", [
  "root",
  "container",
  "item",
  "zeroMinWidth",
  // spacings
  ...oO.map((e) => `spacing-xs-${e}`),
  // direction values
  ...nO.map((e) => `direction-xs-${e}`),
  // wrap values
  ...rO.map((e) => `wrap-xs-${e}`),
  // grid sizes for all breakpoints
  ...Ln.map((e) => `grid-xs-${e}`),
  ...Ln.map((e) => `grid-sm-${e}`),
  ...Ln.map((e) => `grid-md-${e}`),
  ...Ln.map((e) => `grid-lg-${e}`),
  ...Ln.map((e) => `grid-xl-${e}`)
]), rr = sO, aO = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "rowSpacing", "spacing", "wrap", "zeroMinWidth"];
function gn(e) {
  const o = parseFloat(e);
  return `${o}${String(e).replace(String(o), "") || "px"}`;
}
function iO({
  theme: e,
  ownerState: o
}) {
  let n;
  return e.breakpoints.keys.reduce((r, s) => {
    let a = {};
    if (o[s] && (n = o[s]), !n)
      return r;
    if (n === !0)
      a = {
        flexBasis: 0,
        flexGrow: 1,
        maxWidth: "100%"
      };
    else if (n === "auto")
      a = {
        flexBasis: "auto",
        flexGrow: 0,
        flexShrink: 0,
        maxWidth: "none",
        width: "auto"
      };
    else {
      const i = on({
        values: o.columns,
        breakpoints: e.breakpoints.values
      }), l = typeof i == "object" ? i[s] : i;
      if (l == null)
        return r;
      const c = `${Math.round(n / l * 1e8) / 1e6}%`;
      let d = {};
      if (o.container && o.item && o.columnSpacing !== 0) {
        const p = e.spacing(o.columnSpacing);
        if (p !== "0px") {
          const m = `calc(${c} + ${gn(p)})`;
          d = {
            flexBasis: m,
            maxWidth: m
          };
        }
      }
      a = u({
        flexBasis: c,
        flexGrow: 0,
        maxWidth: c
      }, d);
    }
    return e.breakpoints.values[s] === 0 ? Object.assign(r, a) : r[e.breakpoints.up(s)] = a, r;
  }, {});
}
function lO({
  theme: e,
  ownerState: o
}) {
  const n = on({
    values: o.direction,
    breakpoints: e.breakpoints.values
  });
  return er({
    theme: e
  }, n, (r) => {
    const s = {
      flexDirection: r
    };
    return r.indexOf("column") === 0 && (s[`& > .${rr.item}`] = {
      maxWidth: "none"
    }), s;
  });
}
function pd({
  breakpoints: e,
  values: o
}) {
  let n = "";
  Object.keys(o).forEach((s) => {
    n === "" && o[s] !== 0 && (n = s);
  });
  const r = Object.keys(e).sort((s, a) => e[s] - e[a]);
  return r.slice(0, r.indexOf(n));
}
function cO({
  theme: e,
  ownerState: o
}) {
  const {
    container: n,
    rowSpacing: r
  } = o;
  let s = {};
  if (n && r !== 0) {
    const a = on({
      values: r,
      breakpoints: e.breakpoints.values
    });
    let i;
    typeof a == "object" && (i = pd({
      breakpoints: e.breakpoints.values,
      values: a
    })), s = er({
      theme: e
    }, a, (l, c) => {
      var d;
      const p = e.spacing(l);
      return p !== "0px" ? {
        marginTop: `-${gn(p)}`,
        [`& > .${rr.item}`]: {
          paddingTop: gn(p)
        }
      } : (d = i) != null && d.includes(c) ? {} : {
        marginTop: 0,
        [`& > .${rr.item}`]: {
          paddingTop: 0
        }
      };
    });
  }
  return s;
}
function uO({
  theme: e,
  ownerState: o
}) {
  const {
    container: n,
    columnSpacing: r
  } = o;
  let s = {};
  if (n && r !== 0) {
    const a = on({
      values: r,
      breakpoints: e.breakpoints.values
    });
    let i;
    typeof a == "object" && (i = pd({
      breakpoints: e.breakpoints.values,
      values: a
    })), s = er({
      theme: e
    }, a, (l, c) => {
      var d;
      const p = e.spacing(l);
      return p !== "0px" ? {
        width: `calc(100% + ${gn(p)})`,
        marginLeft: `-${gn(p)}`,
        [`& > .${rr.item}`]: {
          paddingLeft: gn(p)
        }
      } : (d = i) != null && d.includes(c) ? {} : {
        width: "100%",
        marginLeft: 0,
        [`& > .${rr.item}`]: {
          paddingLeft: 0
        }
      };
    });
  }
  return s;
}
function dO(e, o, n = {}) {
  if (!e || e <= 0)
    return [];
  if (typeof e == "string" && !Number.isNaN(Number(e)) || typeof e == "number")
    return [n[`spacing-xs-${String(e)}`]];
  const r = [];
  return o.forEach((s) => {
    const a = e[s];
    Number(a) > 0 && r.push(n[`spacing-${s}-${String(a)}`]);
  }), r;
}
const pO = P("div", {
  name: "MuiGrid",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e, {
      container: r,
      direction: s,
      item: a,
      spacing: i,
      wrap: l,
      zeroMinWidth: c,
      breakpoints: d
    } = n;
    let p = [];
    r && (p = dO(i, d, o));
    const m = [];
    return d.forEach((b) => {
      const h = n[b];
      h && m.push(o[`grid-${b}-${String(h)}`]);
    }), [o.root, r && o.container, a && o.item, c && o.zeroMinWidth, ...p, s !== "row" && o[`direction-xs-${String(s)}`], l !== "wrap" && o[`wrap-xs-${String(l)}`], ...m];
  }
})(({
  ownerState: e
}) => u({
  boxSizing: "border-box"
}, e.container && {
  display: "flex",
  flexWrap: "wrap",
  width: "100%"
}, e.item && {
  margin: 0
  // For instance, it's useful when used with a `figure` element.
}, e.zeroMinWidth && {
  minWidth: 0
}, e.wrap !== "wrap" && {
  flexWrap: e.wrap
}), lO, cO, uO, iO);
function fO(e, o) {
  if (!e || e <= 0)
    return [];
  if (typeof e == "string" && !Number.isNaN(Number(e)) || typeof e == "number")
    return [`spacing-xs-${String(e)}`];
  const n = [];
  return o.forEach((r) => {
    const s = e[r];
    if (Number(s) > 0) {
      const a = `spacing-${r}-${String(s)}`;
      n.push(a);
    }
  }), n;
}
const mO = (e) => {
  const {
    classes: o,
    container: n,
    direction: r,
    item: s,
    spacing: a,
    wrap: i,
    zeroMinWidth: l,
    breakpoints: c
  } = e;
  let d = [];
  n && (d = fO(a, c));
  const p = [];
  c.forEach((b) => {
    const h = e[b];
    h && p.push(`grid-${b}-${String(h)}`);
  });
  const m = {
    root: ["root", n && "container", s && "item", l && "zeroMinWidth", ...d, r !== "row" && `direction-xs-${String(r)}`, i !== "wrap" && `wrap-xs-${String(i)}`, ...p]
  };
  return te(m, tO, o);
}, Zn = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiGrid"
  }), {
    breakpoints: s
  } = rt(), a = us(r), {
    className: i,
    columns: l,
    columnSpacing: c,
    component: d = "div",
    container: p = !1,
    direction: m = "row",
    item: b = !1,
    rowSpacing: h,
    spacing: v = 0,
    wrap: C = "wrap",
    zeroMinWidth: g = !1
  } = a, y = z(a, aO), $ = h || v, T = c || v, O = f.useContext(nl), S = p ? l || 12 : O, R = {}, w = u({}, y);
  s.keys.forEach((M) => {
    y[M] != null && (R[M] = y[M], delete w[M]);
  });
  const E = u({}, a, {
    columns: S,
    container: p,
    direction: m,
    item: b,
    rowSpacing: $,
    columnSpacing: T,
    wrap: C,
    zeroMinWidth: g,
    spacing: v
  }, R, {
    breakpoints: s.keys
  }), N = mO(E);
  return /* @__PURE__ */ x(nl.Provider, {
    value: S,
    children: /* @__PURE__ */ x(pO, u({
      ownerState: E,
      className: D(N.root, i),
      as: d,
      ref: n
    }, w))
  });
});
process.env.NODE_ENV !== "production" && (Zn.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The number of columns.
   * @default 12
   */
  columns: t.oneOfType([t.arrayOf(t.number), t.number, t.object]),
  /**
   * Defines the horizontal space between the type `item` components.
   * It overrides the value of the `spacing` prop.
   */
  columnSpacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the component will have the flex *container* behavior.
   * You should be wrapping *items* with a *container*.
   * @default false
   */
  container: t.bool,
  /**
   * Defines the `flex-direction` style property.
   * It is applied for all screen sizes.
   * @default 'row'
   */
  direction: t.oneOfType([t.oneOf(["column-reverse", "column", "row-reverse", "row"]), t.arrayOf(t.oneOf(["column-reverse", "column", "row-reverse", "row"])), t.object]),
  /**
   * If `true`, the component will have the flex *item* behavior.
   * You should be wrapping *items* with a *container*.
   * @default false
   */
  item: t.bool,
  /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for the `lg` breakpoint and wider screens if not overridden.
   * @default false
   */
  lg: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
  /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for the `md` breakpoint and wider screens if not overridden.
   * @default false
   */
  md: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
  /**
   * Defines the vertical space between the type `item` components.
   * It overrides the value of the `spacing` prop.
   */
  rowSpacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
  /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for the `sm` breakpoint and wider screens if not overridden.
   * @default false
   */
  sm: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
  /**
   * Defines the space between the type `item` components.
   * It can only be used on a type `container` component.
   * @default 0
   */
  spacing: t.oneOfType([t.arrayOf(t.oneOfType([t.number, t.string])), t.number, t.object, t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Defines the `flex-wrap` style property.
   * It's applied for all screen sizes.
   * @default 'wrap'
   */
  wrap: t.oneOf(["nowrap", "wrap-reverse", "wrap"]),
  /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for the `xl` breakpoint and wider screens if not overridden.
   * @default false
   */
  xl: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
  /**
   * If a number, it sets the number of columns the grid item uses.
   * It can't be greater than the total number of columns of the container (12 by default).
   * If 'auto', the grid item's width matches its content.
   * If false, the prop is ignored.
   * If true, the grid item's width grows to use the space available in the grid container.
   * The value is applied for all the screen sizes with the lowest priority.
   * @default false
   */
  xs: t.oneOfType([t.oneOf(["auto"]), t.number, t.bool]),
  /**
   * If `true`, it sets `min-width: 0` on the item.
   * Refer to the limitations section of the documentation to better understand the use case.
   * @default false
   */
  zeroMinWidth: t.bool
});
if (process.env.NODE_ENV !== "production") {
  const e = im("Grid", Zn);
  Zn["propTypes"] = u({}, Zn.propTypes, {
    direction: e("container"),
    lg: e("item"),
    md: e("item"),
    sm: e("item"),
    spacing: e("container"),
    wrap: e("container"),
    xs: e("item"),
    zeroMinWidth: e("item")
  });
}
const Xk = Zn, fd = qm({
  createStyledComponent: P("div", {
    name: "MuiGrid2",
    slot: "Root",
    overridesResolver: (e, o) => o.root
  }),
  componentName: "MuiGrid2",
  useThemeProps: (e) => oe({
    props: e,
    name: "MuiGrid2"
  })
});
process.env.NODE_ENV !== "production" && (fd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │ To update them, edit the TypeScript types and run `pnpm proptypes`. │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * @ignore
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const Qk = fd;
function Zk(e) {
  return ee("MuiGrid2", e);
}
const bO = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], gO = ["column-reverse", "column", "row-reverse", "row"], hO = ["nowrap", "wrap-reverse", "wrap"], Dn = ["auto", !0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], vO = ne("MuiGrid2", [
  "root",
  "container",
  "item",
  "zeroMinWidth",
  // spacings
  ...bO.map((e) => `spacing-xs-${e}`),
  // direction values
  ...gO.map((e) => `direction-xs-${e}`),
  // wrap values
  ...hO.map((e) => `wrap-xs-${e}`),
  // grid sizes for all breakpoints
  ...Dn.map((e) => `grid-xs-${e}`),
  ...Dn.map((e) => `grid-sm-${e}`),
  ...Dn.map((e) => `grid-md-${e}`),
  ...Dn.map((e) => `grid-lg-${e}`),
  ...Dn.map((e) => `grid-xl-${e}`)
]), Jk = vO, yO = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
function la(e) {
  return `scale(${e}, ${e ** 2})`;
}
const CO = {
  entering: {
    opacity: 1,
    transform: la(1)
  },
  entered: {
    opacity: 1,
    transform: "none"
  }
}, _s = typeof navigator < "u" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent), _a = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const {
    addEndListener: r,
    appear: s = !0,
    children: a,
    easing: i,
    in: l,
    onEnter: c,
    onEntered: d,
    onEntering: p,
    onExit: m,
    onExited: b,
    onExiting: h,
    style: v,
    timeout: C = "auto",
    // eslint-disable-next-line react/prop-types
    TransitionComponent: g = hr
  } = o, y = z(o, yO), $ = yo(), T = f.useRef(), O = rt(), S = f.useRef(null), R = Ve(S, a.ref, n), w = (j) => (V) => {
    if (j) {
      const U = S.current;
      V === void 0 ? j(U) : j(U, V);
    }
  }, E = w(p), N = w((j, V) => {
    gs(j);
    const {
      duration: U,
      delay: _,
      easing: W
    } = eo({
      style: v,
      timeout: C,
      easing: i
    }, {
      mode: "enter"
    });
    let de;
    C === "auto" ? (de = O.transitions.getAutoHeightDuration(j.clientHeight), T.current = de) : de = U, j.style.transition = [O.transitions.create("opacity", {
      duration: de,
      delay: _
    }), O.transitions.create("transform", {
      duration: _s ? de : de * 0.666,
      delay: _,
      easing: W
    })].join(","), c && c(j, V);
  }), M = w(d), I = w(h), F = w((j) => {
    const {
      duration: V,
      delay: U,
      easing: _
    } = eo({
      style: v,
      timeout: C,
      easing: i
    }, {
      mode: "exit"
    });
    let W;
    C === "auto" ? (W = O.transitions.getAutoHeightDuration(j.clientHeight), T.current = W) : W = V, j.style.transition = [O.transitions.create("opacity", {
      duration: W,
      delay: U
    }), O.transitions.create("transform", {
      duration: _s ? W : W * 0.666,
      delay: _s ? U : U || W * 0.333,
      easing: _
    })].join(","), j.style.opacity = 0, j.style.transform = la(0.75), m && m(j);
  }), A = w(b);
  return /* @__PURE__ */ x(g, u({
    appear: s,
    in: l,
    nodeRef: S,
    onEnter: N,
    onEntered: M,
    onEntering: E,
    onExit: F,
    onExited: A,
    onExiting: I,
    addEndListener: (j) => {
      C === "auto" && $.start(T.current || 0, j), r && r(S.current, j);
    },
    timeout: C === "auto" ? null : C
  }, y, {
    children: (j, V) => /* @__PURE__ */ f.cloneElement(a, u({
      style: u({
        opacity: 0,
        transform: la(0.75),
        visibility: j === "exited" && !l ? "hidden" : void 0
      }, CO[j], v, a.props.style),
      ref: R
    }, V))
  }));
});
process.env.NODE_ENV !== "production" && (_a.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: t.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: t.bool,
  /**
   * A single child content element.
   */
  children: _o.isRequired,
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: t.oneOfType([t.shape({
    enter: t.string,
    exit: t.string
  }), t.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: t.bool,
  /**
   * @ignore
   */
  onEnter: t.func,
  /**
   * @ignore
   */
  onEntered: t.func,
  /**
   * @ignore
   */
  onEntering: t.func,
  /**
   * @ignore
   */
  onExit: t.func,
  /**
   * @ignore
   */
  onExited: t.func,
  /**
   * @ignore
   */
  onExiting: t.func,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   *
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */
  timeout: t.oneOfType([t.oneOf(["auto"]), t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })])
});
_a.muiSupportAuto = !0;
const rs = _a, xO = ["initialWidth", "width"], Do = ["xs", "sm", "md", "lg", "xl"], TO = (e, o, n = !0) => n ? Do.indexOf(e) <= Do.indexOf(o) : Do.indexOf(e) < Do.indexOf(o), OO = (e, o, n = !1) => n ? Do.indexOf(o) <= Do.indexOf(e) : Do.indexOf(o) < Do.indexOf(e), $O = (e = {}) => (o) => {
  const {
    withTheme: n = !1,
    noSSR: r = !1,
    initialWidth: s
  } = e;
  function a(i) {
    const l = rt(), c = i.theme || l, d = uc({
      theme: c,
      name: "MuiWithWidth",
      props: i
    }), {
      initialWidth: p,
      width: m
    } = d, b = z(d, xO), [h, v] = f.useState(!1);
    bt(() => {
      v(!0);
    }, []);
    const g = c.breakpoints.keys.slice().reverse().reduce(($, T) => {
      const O = om(c.breakpoints.up(T));
      return !$ && O ? T : $;
    }, null), y = u({
      width: m || (h || r ? g : void 0) || p || s
    }, n ? {
      theme: c
    } : {}, b);
    return y.width === void 0 ? null : /* @__PURE__ */ x(o, u({}, y));
  }
  return process.env.NODE_ENV !== "production" && (a.propTypes = {
    /**
     * As `window.innerWidth` is unavailable on the server,
     * we default to rendering an empty component during the first mount.
     * You might want to use a heuristic to approximate
     * the screen width of the client browser screen width.
     *
     * For instance, you could be using the user-agent or the client-hints.
     * https://caniuse.com/#search=client%20hint
     */
    initialWidth: t.oneOf(["xs", "sm", "md", "lg", "xl"]),
    /**
     * @ignore
     */
    theme: t.object,
    /**
     * Bypass the width calculation logic.
     */
    width: t.oneOf(["xs", "sm", "md", "lg", "xl"])
  }), process.env.NODE_ENV !== "production" && (a.displayName = `WithWidth(${cc(o)})`), a;
}, SO = $O;
function ss(e) {
  const {
    children: o,
    only: n,
    width: r
  } = e, s = rt();
  let a = !0;
  if (n)
    if (Array.isArray(n))
      for (let i = 0; i < n.length; i += 1) {
        const l = n[i];
        if (r === l) {
          a = !1;
          break;
        }
      }
    else
      n && r === n && (a = !1);
  if (a)
    for (let i = 0; i < s.breakpoints.keys.length; i += 1) {
      const l = s.breakpoints.keys[i], c = e[`${l}Up`], d = e[`${l}Down`];
      if (c && TO(l, r) || d && OO(l, r)) {
        a = !1;
        break;
      }
    }
  return a ? /* @__PURE__ */ x(f.Fragment, {
    children: o
  }) : null;
}
process.env.NODE_ENV !== "production" && (ss.propTypes = {
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * If `true`, screens this size and down are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  lgDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  lgUp: t.bool,
  /**
   * If `true`, screens this size and down are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  mdDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  mdUp: t.bool,
  /**
   * Hide the given breakpoint(s).
   */
  only: t.oneOfType([t.oneOf(["xs", "sm", "md", "lg", "xl"]), t.arrayOf(t.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
  /**
   * If `true`, screens this size and down are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  smDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  smUp: t.bool,
  /**
   * @ignore
   * width prop provided by withWidth decorator.
   */
  width: t.string.isRequired,
  /**
   * If `true`, screens this size and down are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  xlDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  xlUp: t.bool,
  /**
   * If `true`, screens this size and down are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  xsDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  // eslint-disable-next-line react/no-unused-prop-types
  xsUp: t.bool
});
process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "production" && (ss.propTypes = dr(ss.propTypes));
const RO = SO()(ss);
function wO(e) {
  return ee("PrivateHiddenCss", e);
}
ne("PrivateHiddenCss", ["root", "xlDown", "xlUp", "onlyXl", "lgDown", "lgUp", "onlyLg", "mdDown", "mdUp", "onlyMd", "smDown", "smUp", "onlySm", "xsDown", "xsUp", "onlyXs"]);
const EO = ["children", "className", "only"], PO = (e) => {
  const {
    classes: o,
    breakpoints: n
  } = e, r = {
    root: ["root", ...n.map(({
      breakpoint: s,
      dir: a
    }) => a === "only" ? `${a}${k(s)}` : `${s}${k(a)}`)]
  };
  return te(r, wO, o);
}, NO = P("div", {
  name: "PrivateHiddenCss",
  slot: "Root"
})(({
  theme: e,
  ownerState: o
}) => {
  const n = {
    display: "none"
  };
  return u({}, o.breakpoints.map(({
    breakpoint: r,
    dir: s
  }) => s === "only" ? {
    [e.breakpoints.only(r)]: n
  } : s === "up" ? {
    [e.breakpoints.up(r)]: n
  } : {
    [e.breakpoints.down(r)]: n
  }).reduce((r, s) => (Object.keys(s).forEach((a) => {
    r[a] = s[a];
  }), r), {}));
});
function md(e) {
  const {
    children: o,
    className: n,
    only: r
  } = e, s = z(e, EO), a = rt();
  if (process.env.NODE_ENV !== "production") {
    const d = Object.keys(s).filter((p) => {
      const m = !a.breakpoints.keys.some((b) => `${b}Up` === p || `${b}Down` === p);
      return !["classes", "theme", "isRtl", "sx"].includes(p) && m;
    });
    d.length > 0 && console.error(`MUI: Unsupported props received by \`<Hidden implementation="css" />\`: ${d.join(", ")}. Did you forget to wrap this component in a ThemeProvider declaring these breakpoints?`);
  }
  const i = [];
  for (let d = 0; d < a.breakpoints.keys.length; d += 1) {
    const p = a.breakpoints.keys[d], m = s[`${p}Up`], b = s[`${p}Down`];
    m && i.push({
      breakpoint: p,
      dir: "up"
    }), b && i.push({
      breakpoint: p,
      dir: "down"
    });
  }
  r && (Array.isArray(r) ? r : [r]).forEach((p) => {
    i.push({
      breakpoint: p,
      dir: "only"
    });
  });
  const l = u({}, e, {
    breakpoints: i
  }), c = PO(l);
  return /* @__PURE__ */ x(NO, {
    className: D(c.root, n),
    ownerState: l,
    children: o
  });
}
process.env.NODE_ENV !== "production" && (md.propTypes = {
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Specify which implementation to use.  'js' is the default, 'css' works better for
   * server-side rendering.
   */
  implementation: t.oneOf(["js", "css"]),
  /**
   * If `true`, screens this size and down are hidden.
   */
  lgDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  lgUp: t.bool,
  /**
   * If `true`, screens this size and down are hidden.
   */
  mdDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  mdUp: t.bool,
  /**
   * Hide the given breakpoint(s).
   */
  only: t.oneOfType([t.oneOf(["xs", "sm", "md", "lg", "xl"]), t.arrayOf(t.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
  /**
   * If `true`, screens this size and down are hidden.
   */
  smDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  smUp: t.bool,
  /**
   * If `true`, screens this size and down are hidden.
   */
  xlDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  xlUp: t.bool,
  /**
   * If `true`, screens this size and down are hidden.
   */
  xsDown: t.bool,
  /**
   * If `true`, screens this size and up are hidden.
   */
  xsUp: t.bool
});
const IO = ["implementation", "lgDown", "lgUp", "mdDown", "mdUp", "smDown", "smUp", "xlDown", "xlUp", "xsDown", "xsUp"];
function kO(e) {
  const {
    implementation: o = "js",
    lgDown: n = !1,
    lgUp: r = !1,
    mdDown: s = !1,
    mdUp: a = !1,
    smDown: i = !1,
    smUp: l = !1,
    xlDown: c = !1,
    xlUp: d = !1,
    xsDown: p = !1,
    xsUp: m = !1
  } = e, b = z(e, IO);
  return o === "js" ? /* @__PURE__ */ x(RO, u({
    lgDown: n,
    lgUp: r,
    mdDown: s,
    mdUp: a,
    smDown: i,
    smUp: l,
    xlDown: c,
    xlUp: d,
    xsDown: p,
    xsUp: m
  }, b)) : /* @__PURE__ */ x(md, u({
    lgDown: n,
    lgUp: r,
    mdDown: s,
    mdUp: a,
    smDown: i,
    smUp: l,
    xlDown: c,
    xlUp: d,
    xsDown: p,
    xsUp: m
  }, b));
}
process.env.NODE_ENV !== "production" && (kO.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Specify which implementation to use.  'js' is the default, 'css' works better for
   * server-side rendering.
   * @default 'js'
   */
  implementation: t.oneOf(["css", "js"]),
  /**
   * You can use this prop when choosing the `js` implementation with server-side rendering.
   *
   * As `window.innerWidth` is unavailable on the server,
   * we default to rendering an empty component during the first mount.
   * You might want to use a heuristic to approximate
   * the screen width of the client browser screen width.
   *
   * For instance, you could be using the user-agent or the client-hints.
   * https://caniuse.com/#search=client%20hint
   */
  initialWidth: t.oneOf(["xs", "sm", "md", "lg", "xl"]),
  /**
   * If `true`, component is hidden on screens below (but not including) this size.
   * @default false
   */
  lgDown: t.bool,
  /**
   * If `true`, component is hidden on screens this size and above.
   * @default false
   */
  lgUp: t.bool,
  /**
   * If `true`, component is hidden on screens below (but not including) this size.
   * @default false
   */
  mdDown: t.bool,
  /**
   * If `true`, component is hidden on screens this size and above.
   * @default false
   */
  mdUp: t.bool,
  /**
   * Hide the given breakpoint(s).
   */
  only: t.oneOfType([t.oneOf(["xs", "sm", "md", "lg", "xl"]), t.arrayOf(t.oneOf(["xs", "sm", "md", "lg", "xl"]).isRequired)]),
  /**
   * If `true`, component is hidden on screens below (but not including) this size.
   * @default false
   */
  smDown: t.bool,
  /**
   * If `true`, component is hidden on screens this size and above.
   * @default false
   */
  smUp: t.bool,
  /**
   * If `true`, component is hidden on screens below (but not including) this size.
   * @default false
   */
  xlDown: t.bool,
  /**
   * If `true`, component is hidden on screens this size and above.
   * @default false
   */
  xlUp: t.bool,
  /**
   * If `true`, component is hidden on screens below (but not including) this size.
   * @default false
   */
  xsDown: t.bool,
  /**
   * If `true`, component is hidden on screens this size and above.
   * @default false
   */
  xsUp: t.bool
});
function MO(e) {
  return ee("MuiIcon", e);
}
const BO = ne("MuiIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]), eM = BO, LO = ["baseClassName", "className", "color", "component", "fontSize"], DO = (e) => {
  const {
    color: o,
    fontSize: n,
    classes: r
  } = e, s = {
    root: ["root", o !== "inherit" && `color${k(o)}`, `fontSize${k(n)}`]
  };
  return te(s, MO, r);
}, AO = P("span", {
  name: "MuiIcon",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.color !== "inherit" && o[`color${k(n.color)}`], o[`fontSize${k(n.fontSize)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => ({
  userSelect: "none",
  width: "1em",
  height: "1em",
  // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541
  // To remove at some point.
  overflow: "hidden",
  display: "inline-block",
  // allow overflow hidden to take action
  textAlign: "center",
  // support non-square icon
  flexShrink: 0,
  fontSize: {
    inherit: "inherit",
    small: e.typography.pxToRem(20),
    medium: e.typography.pxToRem(24),
    large: e.typography.pxToRem(36)
  }[o.fontSize],
  // TODO v5 deprecate, v6 remove for sx
  color: {
    primary: (e.vars || e).palette.primary.main,
    secondary: (e.vars || e).palette.secondary.main,
    info: (e.vars || e).palette.info.main,
    success: (e.vars || e).palette.success.main,
    warning: (e.vars || e).palette.warning.main,
    action: (e.vars || e).palette.action.active,
    error: (e.vars || e).palette.error.main,
    disabled: (e.vars || e).palette.action.disabled,
    inherit: void 0
  }[o.color]
})), za = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiIcon"
  }), {
    baseClassName: s = "material-icons",
    className: a,
    color: i = "inherit",
    component: l = "span",
    fontSize: c = "medium"
  } = r, d = z(r, LO), p = u({}, r, {
    baseClassName: s,
    color: i,
    component: l,
    fontSize: c
  }), m = DO(p);
  return /* @__PURE__ */ x(AO, u({
    as: l,
    className: D(
      s,
      // Prevent the translation of the text content.
      // The font relies on the exact text content to render the icon.
      "notranslate",
      m.root,
      a
    ),
    ownerState: p,
    "aria-hidden": !0,
    ref: n
  }, d));
});
process.env.NODE_ENV !== "production" && (za.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The base class applied to the icon. Defaults to 'material-icons', but can be changed to any
   * other base class that suits the icon font you're using (e.g. material-icons-rounded, fas, etc).
   * @default 'material-icons'
   */
  baseClassName: t.string,
  /**
   * The name of the icon font ligature.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'inherit'
   */
  color: t.oneOfType([t.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
   * @default 'medium'
   */
  fontSize: t.oneOfType([t.oneOf(["inherit", "large", "medium", "small"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
za.muiName = "Icon";
const tM = za;
function FO(e) {
  return ee("MuiImageList", e);
}
const jO = ne("MuiImageList", ["root", "masonry", "quilted", "standard", "woven"]), oM = jO, bd = /* @__PURE__ */ f.createContext({});
process.env.NODE_ENV !== "production" && (bd.displayName = "ImageListContext");
const gd = bd, _O = ["children", "className", "cols", "component", "rowHeight", "gap", "style", "variant"], zO = (e) => {
  const {
    classes: o,
    variant: n
  } = e;
  return te({
    root: ["root", n]
  }, FO, o);
}, VO = P("ul", {
  name: "MuiImageList",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant]];
  }
})(({
  ownerState: e
}) => u({
  display: "grid",
  overflowY: "auto",
  listStyle: "none",
  padding: 0,
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch"
}, e.variant === "masonry" && {
  display: "block"
})), hd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiImageList"
  }), {
    children: s,
    className: a,
    cols: i = 2,
    component: l = "ul",
    rowHeight: c = "auto",
    gap: d = 4,
    style: p,
    variant: m = "standard"
  } = r, b = z(r, _O), h = f.useMemo(() => ({
    rowHeight: c,
    gap: d,
    variant: m
  }), [c, d, m]);
  f.useEffect(() => {
    process.env.NODE_ENV !== "production" && document !== void 0 && !("objectFit" in document.documentElement.style) && console.error(["MUI: ImageList v5+ no longer natively supports Internet Explorer.", "Use v4 of this component instead, or polyfill CSS object-fit."].join(`
`));
  }, []);
  const v = m === "masonry" ? u({
    columnCount: i,
    columnGap: d
  }, p) : u({
    gridTemplateColumns: `repeat(${i}, 1fr)`,
    gap: d
  }, p), C = u({}, r, {
    component: l,
    gap: d,
    rowHeight: c,
    variant: m
  }), g = zO(C);
  return /* @__PURE__ */ x(VO, u({
    as: l,
    className: D(g.root, g[m], a),
    ref: n,
    style: v,
    ownerState: C
  }, b, {
    children: /* @__PURE__ */ x(gd.Provider, {
      value: h,
      children: s
    })
  }));
});
process.env.NODE_ENV !== "production" && (hd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally `ImageListItem`s.
   */
  children: t.node.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Number of columns.
   * @default 2
   */
  cols: lt,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The gap between items in px.
   * @default 4
   */
  gap: t.number,
  /**
   * The height of one row in px.
   * @default 'auto'
   */
  rowHeight: t.oneOfType([t.oneOf(["auto"]), t.number]),
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'standard'
   */
  variant: t.oneOfType([t.oneOf(["masonry", "quilted", "standard", "woven"]), t.string])
});
const nM = hd;
function UO(e) {
  return ee("MuiImageListItem", e);
}
const WO = ne("MuiImageListItem", ["root", "img", "standard", "woven", "masonry", "quilted"]), rl = WO, HO = ["children", "className", "cols", "component", "rows", "style"], qO = (e) => {
  const {
    classes: o,
    variant: n
  } = e;
  return te({
    root: ["root", n],
    img: ["img"]
  }, UO, o);
}, GO = P("li", {
  name: "MuiImageListItem",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${rl.img}`]: o.img
    }, o.root, o[n.variant]];
  }
})(({
  ownerState: e
}) => u({
  display: "block",
  position: "relative"
}, e.variant === "standard" && {
  // For titlebar under list item
  display: "flex",
  flexDirection: "column"
}, e.variant === "woven" && {
  height: "100%",
  alignSelf: "center",
  "&:nth-of-type(even)": {
    height: "70%"
  }
}, {
  [`& .${rl.img}`]: u({
    objectFit: "cover",
    width: "100%",
    height: "100%",
    display: "block"
  }, e.variant === "standard" && {
    height: "auto",
    flexGrow: 1
  })
})), vd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiImageListItem"
  }), {
    children: s,
    className: a,
    cols: i = 1,
    component: l = "li",
    rows: c = 1,
    style: d
  } = r, p = z(r, HO), {
    rowHeight: m = "auto",
    gap: b,
    variant: h
  } = f.useContext(gd);
  let v = "auto";
  h === "woven" ? v = void 0 : m !== "auto" && (v = m * c + b * (c - 1));
  const C = u({}, r, {
    cols: i,
    component: l,
    gap: b,
    rowHeight: m,
    rows: c,
    variant: h
  }), g = qO(C);
  return /* @__PURE__ */ x(GO, u({
    as: l,
    className: D(g.root, g[h], a),
    ref: n,
    style: u({
      height: v,
      gridColumnEnd: h !== "masonry" ? `span ${i}` : void 0,
      gridRowEnd: h !== "masonry" ? `span ${c}` : void 0,
      marginBottom: h === "masonry" ? b : void 0,
      breakInside: h === "masonry" ? "avoid" : void 0
    }, d),
    ownerState: C
  }, p, {
    children: f.Children.map(s, (y) => /* @__PURE__ */ f.isValidElement(y) ? (process.env.NODE_ENV !== "production" && to.isFragment(y) && console.error(["MUI: The ImageListItem component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), y.type === "img" || Co(y, ["Image"]) ? /* @__PURE__ */ f.cloneElement(y, {
      className: D(g.img, y.props.className)
    }) : y) : null)
  }));
});
process.env.NODE_ENV !== "production" && (vd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally an `<img>`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Width of the item in number of grid columns.
   * @default 1
   */
  cols: lt,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Height of the item in number of grid rows.
   * @default 1
   */
  rows: lt,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const rM = vd;
function KO(e) {
  return ee("MuiImageListItemBar", e);
}
const YO = ne("MuiImageListItemBar", ["root", "positionBottom", "positionTop", "positionBelow", "titleWrap", "titleWrapBottom", "titleWrapTop", "titleWrapBelow", "titleWrapActionPosLeft", "titleWrapActionPosRight", "title", "subtitle", "actionIcon", "actionIconActionPosLeft", "actionIconActionPosRight"]), sM = YO, XO = ["actionIcon", "actionPosition", "className", "subtitle", "title", "position"], QO = (e) => {
  const {
    classes: o,
    position: n,
    actionIcon: r,
    actionPosition: s
  } = e, a = {
    root: ["root", `position${k(n)}`],
    titleWrap: ["titleWrap", `titleWrap${k(n)}`, r && `titleWrapActionPos${k(s)}`],
    title: ["title"],
    subtitle: ["subtitle"],
    actionIcon: ["actionIcon", `actionIconActionPos${k(s)}`]
  };
  return te(a, KO, o);
}, ZO = P("div", {
  name: "MuiImageListItemBar",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`position${k(n.position)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  position: "absolute",
  left: 0,
  right: 0,
  background: "rgba(0, 0, 0, 0.5)",
  display: "flex",
  alignItems: "center",
  fontFamily: e.typography.fontFamily
}, o.position === "bottom" && {
  bottom: 0
}, o.position === "top" && {
  top: 0
}, o.position === "below" && {
  position: "relative",
  background: "transparent",
  alignItems: "normal"
})), JO = P("div", {
  name: "MuiImageListItemBar",
  slot: "TitleWrap",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.titleWrap, o[`titleWrap${k(n.position)}`], n.actionIcon && o[`titleWrapActionPos${k(n.actionPosition)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  flexGrow: 1,
  padding: "12px 16px",
  color: (e.vars || e).palette.common.white,
  overflow: "hidden"
}, o.position === "below" && {
  padding: "6px 0 12px",
  color: "inherit"
}, o.actionIcon && o.actionPosition === "left" && {
  paddingLeft: 0
}, o.actionIcon && o.actionPosition === "right" && {
  paddingRight: 0
})), e$ = P("div", {
  name: "MuiImageListItemBar",
  slot: "Title",
  overridesResolver: (e, o) => o.title
})(({
  theme: e
}) => ({
  fontSize: e.typography.pxToRem(16),
  lineHeight: "24px",
  textOverflow: "ellipsis",
  overflow: "hidden",
  whiteSpace: "nowrap"
})), t$ = P("div", {
  name: "MuiImageListItemBar",
  slot: "Subtitle",
  overridesResolver: (e, o) => o.subtitle
})(({
  theme: e
}) => ({
  fontSize: e.typography.pxToRem(12),
  lineHeight: 1,
  textOverflow: "ellipsis",
  overflow: "hidden",
  whiteSpace: "nowrap"
})), o$ = P("div", {
  name: "MuiImageListItemBar",
  slot: "ActionIcon",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.actionIcon, o[`actionIconActionPos${k(n.actionPosition)}`]];
  }
})(({
  ownerState: e
}) => u({}, e.actionPosition === "left" && {
  order: -1
})), yd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiImageListItemBar"
  }), {
    actionIcon: s,
    actionPosition: a = "right",
    className: i,
    subtitle: l,
    title: c,
    position: d = "bottom"
  } = r, p = z(r, XO), m = u({}, r, {
    position: d,
    actionPosition: a
  }), b = QO(m);
  return /* @__PURE__ */ Ce(ZO, u({
    ownerState: m,
    className: D(b.root, i),
    ref: n
  }, p, {
    children: [/* @__PURE__ */ Ce(JO, {
      ownerState: m,
      className: b.titleWrap,
      children: [/* @__PURE__ */ x(e$, {
        className: b.title,
        children: c
      }), l ? /* @__PURE__ */ x(t$, {
        className: b.subtitle,
        children: l
      }) : null]
    }), s ? /* @__PURE__ */ x(o$, {
      ownerState: m,
      className: b.actionIcon,
      children: s
    }) : null]
  }));
});
process.env.NODE_ENV !== "production" && (yd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An IconButton element to be used as secondary action target
   * (primary action target is the item itself).
   */
  actionIcon: t.node,
  /**
   * Position of secondary action IconButton.
   * @default 'right'
   */
  actionPosition: t.oneOf(["left", "right"]),
  /**
   * @ignore
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Position of the title bar.
   * @default 'bottom'
   */
  position: t.oneOf(["below", "bottom", "top"]),
  /**
   * String or element serving as subtitle (support text).
   */
  subtitle: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Title to be displayed.
   */
  title: t.node
});
const aM = yd, n$ = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"], r$ = (e) => {
  const {
    classes: o,
    disableUnderline: n
  } = e, s = te({
    root: ["root", !n && "underline"],
    input: ["input"]
  }, Ty, o);
  return u({}, o, s);
}, s$ = P($s, {
  shouldForwardProp: (e) => dt(e) || e === "classes",
  name: "MuiInput",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [...Ts(e, o), !n.disableUnderline && o.underline];
  }
})(({
  theme: e,
  ownerState: o
}) => {
  let r = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
  return e.vars && (r = `rgba(${e.vars.palette.common.onBackgroundChannel} / ${e.vars.opacity.inputUnderline})`), u({
    position: "relative"
  }, o.formControl && {
    "label + &": {
      marginTop: 16
    }
  }, !o.disableUnderline && {
    "&::after": {
      borderBottom: `2px solid ${(e.vars || e).palette[o.color].main}`,
      left: 0,
      bottom: 0,
      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
      content: '""',
      position: "absolute",
      right: 0,
      transform: "scaleX(0)",
      transition: e.transitions.create("transform", {
        duration: e.transitions.duration.shorter,
        easing: e.transitions.easing.easeOut
      }),
      pointerEvents: "none"
      // Transparent to the hover style.
    },
    [`&.${No.focused}:after`]: {
      // translateX(0) is a workaround for Safari transform scale bug
      // See https://github.com/mui/material-ui/issues/31766
      transform: "scaleX(1) translateX(0)"
    },
    [`&.${No.error}`]: {
      "&::before, &::after": {
        borderBottomColor: (e.vars || e).palette.error.main
      }
    },
    "&::before": {
      borderBottom: `1px solid ${r}`,
      left: 0,
      bottom: 0,
      // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
      content: '"\\00a0"',
      position: "absolute",
      right: 0,
      transition: e.transitions.create("border-bottom-color", {
        duration: e.transitions.duration.shorter
      }),
      pointerEvents: "none"
      // Transparent to the hover style.
    },
    [`&:hover:not(.${No.disabled}, .${No.error}):before`]: {
      borderBottom: `2px solid ${(e.vars || e).palette.text.primary}`,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        borderBottom: `1px solid ${r}`
      }
    },
    [`&.${No.disabled}:before`]: {
      borderBottomStyle: "dotted"
    }
  });
}), a$ = P(Ss, {
  name: "MuiInput",
  slot: "Input",
  overridesResolver: Os
})({}), Va = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s, a, i;
  const l = oe({
    props: o,
    name: "MuiInput"
  }), {
    disableUnderline: c,
    components: d = {},
    componentsProps: p,
    fullWidth: m = !1,
    inputComponent: b = "input",
    multiline: h = !1,
    slotProps: v,
    slots: C = {},
    type: g = "text"
  } = l, y = z(l, n$), $ = r$(l), O = {
    root: {
      ownerState: {
        disableUnderline: c
      }
    }
  }, S = v ?? p ? ds(v ?? p, O) : O, R = (r = (s = C.root) != null ? s : d.Root) != null ? r : s$, w = (a = (i = C.input) != null ? i : d.Input) != null ? a : a$;
  return /* @__PURE__ */ x(Rs, u({
    slots: {
      root: R,
      input: w
    },
    slotProps: S,
    fullWidth: m,
    inputComponent: b,
    multiline: h,
    ref: n,
    type: g
  }, y, {
    classes: $
  }));
});
process.env.NODE_ENV !== "production" && (Va.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: t.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary"]), t.string]),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: t.shape({
    Input: t.elementType,
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: t.shape({
    input: t.object,
    root: t.object
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: t.bool,
  /**
   * If `true`, the `input` will not have an underline.
   */
  disableUnderline: t.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: t.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: t.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: t.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: yt,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: t.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: t.oneOfType([t.number, t.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: t.oneOfType([t.number, t.string]),
  /**
   * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: t.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: t.string,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: t.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: t.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: t.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: t.oneOfType([t.number, t.string]),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: t.shape({
    input: t.object,
    root: t.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: t.shape({
    input: t.elementType,
    root: t.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: t.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: t.any
});
Va.muiName = "Input";
const Ua = Va;
function i$(e) {
  return ee("MuiInputAdornment", e);
}
const l$ = ne("MuiInputAdornment", ["root", "filled", "standard", "outlined", "positionStart", "positionEnd", "disablePointerEvents", "hiddenLabel", "sizeSmall"]), sl = l$;
var al;
const c$ = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"], u$ = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.root, o[`position${k(n.position)}`], n.disablePointerEvents === !0 && o.disablePointerEvents, o[n.variant]];
}, d$ = (e) => {
  const {
    classes: o,
    disablePointerEvents: n,
    hiddenLabel: r,
    position: s,
    size: a,
    variant: i
  } = e, l = {
    root: ["root", n && "disablePointerEvents", s && `position${k(s)}`, i, r && "hiddenLabel", a && `size${k(a)}`]
  };
  return te(l, i$, o);
}, p$ = P("div", {
  name: "MuiInputAdornment",
  slot: "Root",
  overridesResolver: u$
})(({
  theme: e,
  ownerState: o
}) => u({
  display: "flex",
  height: "0.01em",
  // Fix IE11 flexbox alignment. To remove at some point.
  maxHeight: "2em",
  alignItems: "center",
  whiteSpace: "nowrap",
  color: (e.vars || e).palette.action.active
}, o.variant === "filled" && {
  // Styles applied to the root element if `variant="filled"`.
  [`&.${sl.positionStart}&:not(.${sl.hiddenLabel})`]: {
    marginTop: 16
  }
}, o.position === "start" && {
  // Styles applied to the root element if `position="start"`.
  marginRight: 8
}, o.position === "end" && {
  // Styles applied to the root element if `position="end"`.
  marginLeft: 8
}, o.disablePointerEvents === !0 && {
  // Styles applied to the root element if `disablePointerEvents={true}`.
  pointerEvents: "none"
})), Cd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiInputAdornment"
  }), {
    children: s,
    className: a,
    component: i = "div",
    disablePointerEvents: l = !1,
    disableTypography: c = !1,
    position: d,
    variant: p
  } = r, m = z(r, c$), b = oo() || {};
  let h = p;
  p && b.variant && process.env.NODE_ENV !== "production" && p === b.variant && console.error("MUI: The `InputAdornment` variant infers the variant prop you do not have to provide one."), b && !h && (h = b.variant);
  const v = u({}, r, {
    hiddenLabel: b.hiddenLabel,
    size: b.size,
    disablePointerEvents: l,
    position: d,
    variant: h
  }), C = d$(v);
  return /* @__PURE__ */ x(xs.Provider, {
    value: null,
    children: /* @__PURE__ */ x(p$, u({
      as: i,
      ownerState: v,
      className: D(C.root, a),
      ref: n
    }, m, {
      children: typeof s == "string" && !c ? /* @__PURE__ */ x(xt, {
        color: "text.secondary",
        children: s
      }) : /* @__PURE__ */ Ce(f.Fragment, {
        children: [d === "start" ? (
          /* notranslate needed while Google Translate will not fix zero-width space issue */
          al || (al = /* @__PURE__ */ x("span", {
            className: "notranslate",
            children: "​"
          }))
        ) : null, s]
      })
    }))
  });
});
process.env.NODE_ENV !== "production" && (Cd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally an `IconButton` or string.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Disable pointer events on the root.
   * This allows for the content of the adornment to focus the `input` on click.
   * @default false
   */
  disablePointerEvents: t.bool,
  /**
   * If children is a string then disable wrapping in a Typography component.
   * @default false
   */
  disableTypography: t.bool,
  /**
   * The position this adornment should appear relative to the `Input`.
   */
  position: t.oneOf(["end", "start"]).isRequired,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * Note: If you are using the `TextField` component or the `FormControl` component
   * you do not have to set this manually.
   */
  variant: t.oneOf(["filled", "outlined", "standard"])
});
const iM = Cd;
function f$(e) {
  return ee("MuiInputLabel", e);
}
const m$ = ne("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]), lM = m$, b$ = ["disableAnimation", "margin", "shrink", "variant", "className"], g$ = (e) => {
  const {
    classes: o,
    formControl: n,
    size: r,
    shrink: s,
    disableAnimation: a,
    variant: i,
    required: l
  } = e, c = {
    root: ["root", n && "formControl", !a && "animated", s && "shrink", r && r !== "normal" && `size${k(r)}`, i],
    asterisk: [l && "asterisk"]
  }, d = te(c, f$, o);
  return u({}, o, d);
}, h$ = P(eO, {
  shouldForwardProp: (e) => dt(e) || e === "classes",
  name: "MuiInputLabel",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${Qn.asterisk}`]: o.asterisk
    }, o.root, n.formControl && o.formControl, n.size === "small" && o.sizeSmall, n.shrink && o.shrink, !n.disableAnimation && o.animated, n.focused && o.focused, o[n.variant]];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  display: "block",
  transformOrigin: "top left",
  whiteSpace: "nowrap",
  overflow: "hidden",
  textOverflow: "ellipsis",
  maxWidth: "100%"
}, o.formControl && {
  position: "absolute",
  left: 0,
  top: 0,
  // slight alteration to spec spacing to match visual spec result
  transform: "translate(0, 20px) scale(1)"
}, o.size === "small" && {
  // Compensation for the `Input.inputSizeSmall` style.
  transform: "translate(0, 17px) scale(1)"
}, o.shrink && {
  transform: "translate(0, -1.5px) scale(0.75)",
  transformOrigin: "top left",
  maxWidth: "133%"
}, !o.disableAnimation && {
  transition: e.transitions.create(["color", "transform", "max-width"], {
    duration: e.transitions.duration.shorter,
    easing: e.transitions.easing.easeOut
  })
}, o.variant === "filled" && u({
  // Chrome's autofill feature gives the input field a yellow background.
  // Since the input field is behind the label in the HTML tree,
  // the input field is drawn last and hides the label with an opaque background color.
  // zIndex: 1 will raise the label above opaque background-colors of input.
  zIndex: 1,
  pointerEvents: "none",
  transform: "translate(12px, 16px) scale(1)",
  maxWidth: "calc(100% - 24px)"
}, o.size === "small" && {
  transform: "translate(12px, 13px) scale(1)"
}, o.shrink && u({
  userSelect: "none",
  pointerEvents: "auto",
  transform: "translate(12px, 7px) scale(0.75)",
  maxWidth: "calc(133% - 24px)"
}, o.size === "small" && {
  transform: "translate(12px, 4px) scale(0.75)"
})), o.variant === "outlined" && u({
  // see comment above on filled.zIndex
  zIndex: 1,
  pointerEvents: "none",
  transform: "translate(14px, 16px) scale(1)",
  maxWidth: "calc(100% - 24px)"
}, o.size === "small" && {
  transform: "translate(14px, 9px) scale(1)"
}, o.shrink && {
  userSelect: "none",
  pointerEvents: "auto",
  // Theoretically, we should have (8+5)*2/0.75 = 34px
  // but it feels a better when it bleeds a bit on the left, so 32px.
  maxWidth: "calc(133% - 32px)",
  transform: "translate(14px, -9px) scale(0.75)"
}))), xd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    name: "MuiInputLabel",
    props: o
  }), {
    disableAnimation: s = !1,
    shrink: a,
    className: i
  } = r, l = z(r, b$), c = oo();
  let d = a;
  typeof d > "u" && c && (d = c.filled || c.focused || c.adornedStart);
  const p = $o({
    props: r,
    muiFormControl: c,
    states: ["size", "variant", "required", "focused"]
  }), m = u({}, r, {
    disableAnimation: s,
    formControl: c,
    shrink: d,
    size: p.size,
    variant: p.variant,
    required: p.required,
    focused: p.focused
  }), b = g$(m);
  return /* @__PURE__ */ x(h$, u({
    "data-shrink": d,
    ownerState: m,
    ref: n,
    className: D(b.root, i)
  }, l, {
    classes: b
  }));
});
process.env.NODE_ENV !== "production" && (xd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   */
  color: t.oneOfType([t.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), t.string]),
  /**
   * If `true`, the transition animation is disabled.
   * @default false
   */
  disableAnimation: t.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: t.bool,
  /**
   * If `true`, the label is displayed in an error state.
   */
  error: t.bool,
  /**
   * If `true`, the `input` of this label is focused.
   */
  focused: t.bool,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   */
  margin: t.oneOf(["dense"]),
  /**
   * if `true`, the label will indicate that the `input` is required.
   */
  required: t.bool,
  /**
   * If `true`, the label is shrunk.
   */
  shrink: t.bool,
  /**
   * The size of the component.
   * @default 'normal'
   */
  size: t.oneOfType([t.oneOf(["normal", "small"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   */
  variant: t.oneOf(["filled", "outlined", "standard"])
});
const v$ = xd;
function y$(e) {
  return ee("MuiLinearProgress", e);
}
const C$ = ne("MuiLinearProgress", ["root", "colorPrimary", "colorSecondary", "determinate", "indeterminate", "buffer", "query", "dashed", "dashedColorPrimary", "dashedColorSecondary", "bar", "barColorPrimary", "barColorSecondary", "bar1Indeterminate", "bar1Determinate", "bar1Buffer", "bar2Indeterminate", "bar2Buffer"]), cM = C$, x$ = ["className", "color", "value", "valueBuffer", "variant"];
let kn = (e) => e, il, ll, cl, ul, dl, pl;
const ca = 4, T$ = go(il || (il = kn`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`)), O$ = go(ll || (ll = kn`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`)), $$ = go(cl || (cl = kn`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`)), S$ = (e) => {
  const {
    classes: o,
    variant: n,
    color: r
  } = e, s = {
    root: ["root", `color${k(r)}`, n],
    dashed: ["dashed", `dashedColor${k(r)}`],
    bar1: ["bar", `barColor${k(r)}`, (n === "indeterminate" || n === "query") && "bar1Indeterminate", n === "determinate" && "bar1Determinate", n === "buffer" && "bar1Buffer"],
    bar2: ["bar", n !== "buffer" && `barColor${k(r)}`, n === "buffer" && `color${k(r)}`, (n === "indeterminate" || n === "query") && "bar2Indeterminate", n === "buffer" && "bar2Buffer"]
  };
  return te(s, y$, o);
}, Wa = (e, o) => o === "inherit" ? "currentColor" : e.vars ? e.vars.palette.LinearProgress[`${o}Bg`] : e.palette.mode === "light" ? ps(e.palette[o].main, 0.62) : fs(e.palette[o].main, 0.5), R$ = P("span", {
  name: "MuiLinearProgress",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`color${k(n.color)}`], o[n.variant]];
  }
})(({
  ownerState: e,
  theme: o
}) => u({
  position: "relative",
  overflow: "hidden",
  display: "block",
  height: 4,
  zIndex: 0,
  // Fix Safari's bug during composition of different paint.
  "@media print": {
    colorAdjust: "exact"
  },
  backgroundColor: Wa(o, e.color)
}, e.color === "inherit" && e.variant !== "buffer" && {
  backgroundColor: "none",
  "&::before": {
    content: '""',
    position: "absolute",
    left: 0,
    top: 0,
    right: 0,
    bottom: 0,
    backgroundColor: "currentColor",
    opacity: 0.3
  }
}, e.variant === "buffer" && {
  backgroundColor: "transparent"
}, e.variant === "query" && {
  transform: "rotate(180deg)"
})), w$ = P("span", {
  name: "MuiLinearProgress",
  slot: "Dashed",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.dashed, o[`dashedColor${k(n.color)}`]];
  }
})(({
  ownerState: e,
  theme: o
}) => {
  const n = Wa(o, e.color);
  return u({
    position: "absolute",
    marginTop: 0,
    height: "100%",
    width: "100%"
  }, e.color === "inherit" && {
    opacity: 0.3
  }, {
    backgroundImage: `radial-gradient(${n} 0%, ${n} 16%, transparent 42%)`,
    backgroundSize: "10px 10px",
    backgroundPosition: "0 -23px"
  });
}, sn(ul || (ul = kn`
    animation: ${0} 3s infinite linear;
  `), $$)), E$ = P("span", {
  name: "MuiLinearProgress",
  slot: "Bar1",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.bar, o[`barColor${k(n.color)}`], (n.variant === "indeterminate" || n.variant === "query") && o.bar1Indeterminate, n.variant === "determinate" && o.bar1Determinate, n.variant === "buffer" && o.bar1Buffer];
  }
})(({
  ownerState: e,
  theme: o
}) => u({
  width: "100%",
  position: "absolute",
  left: 0,
  bottom: 0,
  top: 0,
  transition: "transform 0.2s linear",
  transformOrigin: "left",
  backgroundColor: e.color === "inherit" ? "currentColor" : (o.vars || o).palette[e.color].main
}, e.variant === "determinate" && {
  transition: `transform .${ca}s linear`
}, e.variant === "buffer" && {
  zIndex: 1,
  transition: `transform .${ca}s linear`
}), ({
  ownerState: e
}) => (e.variant === "indeterminate" || e.variant === "query") && sn(dl || (dl = kn`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    `), T$)), P$ = P("span", {
  name: "MuiLinearProgress",
  slot: "Bar2",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.bar, o[`barColor${k(n.color)}`], (n.variant === "indeterminate" || n.variant === "query") && o.bar2Indeterminate, n.variant === "buffer" && o.bar2Buffer];
  }
})(({
  ownerState: e,
  theme: o
}) => u({
  width: "100%",
  position: "absolute",
  left: 0,
  bottom: 0,
  top: 0,
  transition: "transform 0.2s linear",
  transformOrigin: "left"
}, e.variant !== "buffer" && {
  backgroundColor: e.color === "inherit" ? "currentColor" : (o.vars || o).palette[e.color].main
}, e.color === "inherit" && {
  opacity: 0.3
}, e.variant === "buffer" && {
  backgroundColor: Wa(o, e.color),
  transition: `transform .${ca}s linear`
}), ({
  ownerState: e
}) => (e.variant === "indeterminate" || e.variant === "query") && sn(pl || (pl = kn`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
    `), O$)), Td = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiLinearProgress"
  }), {
    className: s,
    color: a = "primary",
    value: i,
    valueBuffer: l,
    variant: c = "indeterminate"
  } = r, d = z(r, x$), p = u({}, r, {
    color: a,
    variant: c
  }), m = S$(p), b = rt(), h = {}, v = {
    bar1: {},
    bar2: {}
  };
  if (c === "determinate" || c === "buffer")
    if (i !== void 0) {
      h["aria-valuenow"] = Math.round(i), h["aria-valuemin"] = 0, h["aria-valuemax"] = 100;
      let C = i - 100;
      b.direction === "rtl" && (C = -C), v.bar1.transform = `translateX(${C}%)`;
    } else
      process.env.NODE_ENV !== "production" && console.error("MUI: You need to provide a value prop when using the determinate or buffer variant of LinearProgress .");
  if (c === "buffer")
    if (l !== void 0) {
      let C = (l || 0) - 100;
      b.direction === "rtl" && (C = -C), v.bar2.transform = `translateX(${C}%)`;
    } else
      process.env.NODE_ENV !== "production" && console.error("MUI: You need to provide a valueBuffer prop when using the buffer variant of LinearProgress.");
  return /* @__PURE__ */ Ce(R$, u({
    className: D(m.root, s),
    ownerState: p,
    role: "progressbar"
  }, h, {
    ref: n
  }, d, {
    children: [c === "buffer" ? /* @__PURE__ */ x(w$, {
      className: m.dashed,
      ownerState: p
    }) : null, /* @__PURE__ */ x(E$, {
      className: m.bar1,
      ownerState: p,
      style: v.bar1
    }), c === "determinate" ? null : /* @__PURE__ */ x(P$, {
      className: m.bar2,
      ownerState: p,
      style: v.bar2
    })]
  }));
});
process.env.NODE_ENV !== "production" && (Td.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["inherit", "primary", "secondary"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value of the progress indicator for the determinate and buffer variants.
   * Value between 0 and 100.
   */
  value: t.number,
  /**
   * The value for the buffer variant.
   * Value between 0 and 100.
   */
  valueBuffer: t.number,
  /**
   * The variant to use.
   * Use indeterminate or query when there is no progress value.
   * @default 'indeterminate'
   */
  variant: t.oneOf(["buffer", "determinate", "indeterminate", "query"])
});
const N$ = Td;
function I$(e) {
  return ee("MuiLink", e);
}
const k$ = ne("MuiLink", ["root", "underlineNone", "underlineHover", "underlineAlways", "button", "focusVisible"]), M$ = k$, Od = {
  primary: "primary.main",
  textPrimary: "text.primary",
  secondary: "secondary.main",
  textSecondary: "text.secondary",
  error: "error.main"
}, B$ = (e) => Od[e] || e, L$ = ({
  theme: e,
  ownerState: o
}) => {
  const n = B$(o.color), r = si(e, `palette.${n}`, !1) || o.color, s = si(e, `palette.${n}Channel`);
  return "vars" in e && s ? `rgba(${s} / 0.4)` : Pe(r, 0.4);
}, D$ = L$, A$ = ["className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant", "sx"], F$ = (e) => {
  const {
    classes: o,
    component: n,
    focusVisible: r,
    underline: s
  } = e, a = {
    root: ["root", `underline${k(s)}`, n === "button" && "button", r && "focusVisible"]
  };
  return te(a, I$, o);
}, j$ = P(xt, {
  name: "MuiLink",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`underline${k(n.underline)}`], n.component === "button" && o.button];
  }
})(({
  theme: e,
  ownerState: o
}) => u({}, o.underline === "none" && {
  textDecoration: "none"
}, o.underline === "hover" && {
  textDecoration: "none",
  "&:hover": {
    textDecoration: "underline"
  }
}, o.underline === "always" && u({
  textDecoration: "underline"
}, o.color !== "inherit" && {
  textDecorationColor: D$({
    theme: e,
    ownerState: o
  })
}, {
  "&:hover": {
    textDecorationColor: "inherit"
  }
}), o.component === "button" && {
  position: "relative",
  WebkitTapHighlightColor: "transparent",
  backgroundColor: "transparent",
  // Reset default value
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0,
  border: 0,
  margin: 0,
  // Remove the margin in Safari
  borderRadius: 0,
  padding: 0,
  // Remove the padding in Firefox
  cursor: "pointer",
  userSelect: "none",
  verticalAlign: "middle",
  MozAppearance: "none",
  // Reset
  WebkitAppearance: "none",
  // Reset
  "&::-moz-focus-inner": {
    borderStyle: "none"
    // Remove Firefox dotted outline.
  },
  [`&.${M$.focusVisible}`]: {
    outline: "auto"
  }
})), $d = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiLink"
  }), {
    className: s,
    color: a = "primary",
    component: i = "a",
    onBlur: l,
    onFocus: c,
    TypographyClasses: d,
    underline: p = "always",
    variant: m = "inherit",
    sx: b
  } = r, h = z(r, A$), {
    isFocusVisibleRef: v,
    onBlur: C,
    onFocus: g,
    ref: y
  } = br(), [$, T] = f.useState(!1), O = Ve(n, y), S = (N) => {
    C(N), v.current === !1 && T(!1), l && l(N);
  }, R = (N) => {
    g(N), v.current === !0 && T(!0), c && c(N);
  }, w = u({}, r, {
    color: a,
    component: i,
    focusVisible: $,
    underline: p,
    variant: m
  }), E = F$(w);
  return /* @__PURE__ */ x(j$, u({
    color: a,
    className: D(E.root, s),
    classes: d,
    component: i,
    onBlur: S,
    onFocus: R,
    ref: O,
    ownerState: w,
    variant: m,
    sx: [...Object.keys(Od).includes(a) ? [] : [{
      color: a
    }], ...Array.isArray(b) ? b : [b]]
  }, h));
});
process.env.NODE_ENV !== "production" && ($d.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the link.
   * @default 'primary'
   */
  color: t.any,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: jo,
  /**
   * @ignore
   */
  onBlur: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * `classes` prop applied to the [`Typography`](/material-ui/api/typography/) element.
   */
  TypographyClasses: t.object,
  /**
   * Controls when the link should have an underline.
   * @default 'always'
   */
  underline: t.oneOf(["always", "hover", "none"]),
  /**
   * Applies the theme typography styles.
   * @default 'inherit'
   */
  variant: t.oneOfType([t.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), t.string])
});
const uM = $d, Sd = /* @__PURE__ */ f.createContext({});
process.env.NODE_ENV !== "production" && (Sd.displayName = "ListContext");
const Wt = Sd;
function _$(e) {
  return ee("MuiList", e);
}
const z$ = ne("MuiList", ["root", "padding", "dense", "subheader"]), dM = z$, V$ = ["children", "className", "component", "dense", "disablePadding", "subheader"], U$ = (e) => {
  const {
    classes: o,
    disablePadding: n,
    dense: r,
    subheader: s
  } = e;
  return te({
    root: ["root", !n && "padding", r && "dense", s && "subheader"]
  }, _$, o);
}, W$ = P("ul", {
  name: "MuiList",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, !n.disablePadding && o.padding, n.dense && o.dense, n.subheader && o.subheader];
  }
})(({
  ownerState: e
}) => u({
  listStyle: "none",
  margin: 0,
  padding: 0,
  position: "relative"
}, !e.disablePadding && {
  paddingTop: 8,
  paddingBottom: 8
}, e.subheader && {
  paddingTop: 0
})), Rd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiList"
  }), {
    children: s,
    className: a,
    component: i = "ul",
    dense: l = !1,
    disablePadding: c = !1,
    subheader: d
  } = r, p = z(r, V$), m = f.useMemo(() => ({
    dense: l
  }), [l]), b = u({}, r, {
    component: i,
    dense: l,
    disablePadding: c
  }), h = U$(b);
  return /* @__PURE__ */ x(Wt.Provider, {
    value: m,
    children: /* @__PURE__ */ Ce(W$, u({
      as: i,
      className: D(h.root, a),
      ref: n,
      ownerState: b
    }, p, {
      children: [d, s]
    }))
  });
});
process.env.NODE_ENV !== "production" && (Rd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used for
   * the list and list items.
   * The prop is available to descendant components as the `dense` context.
   * @default false
   */
  dense: t.bool,
  /**
   * If `true`, vertical padding is removed from the list.
   * @default false
   */
  disablePadding: t.bool,
  /**
   * The content of the subheader, normally `ListSubheader`.
   */
  subheader: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const H$ = Rd;
function q$(e) {
  return ee("MuiListItem", e);
}
const G$ = ne("MuiListItem", ["root", "container", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "padding", "button", "secondaryAction", "selected"]), dn = G$;
function K$(e) {
  return ee("MuiListItemButton", e);
}
const Y$ = ne("MuiListItemButton", ["root", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "selected"]), pn = Y$, X$ = ["alignItems", "autoFocus", "component", "children", "dense", "disableGutters", "divider", "focusVisibleClassName", "selected", "className"], Q$ = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.root, n.dense && o.dense, n.alignItems === "flex-start" && o.alignItemsFlexStart, n.divider && o.divider, !n.disableGutters && o.gutters];
}, Z$ = (e) => {
  const {
    alignItems: o,
    classes: n,
    dense: r,
    disabled: s,
    disableGutters: a,
    divider: i,
    selected: l
  } = e, d = te({
    root: ["root", r && "dense", !a && "gutters", i && "divider", s && "disabled", o === "flex-start" && "alignItemsFlexStart", l && "selected"]
  }, K$, n);
  return u({}, n, d);
}, J$ = P(pt, {
  shouldForwardProp: (e) => dt(e) || e === "classes",
  name: "MuiListItemButton",
  slot: "Root",
  overridesResolver: Q$
})(({
  theme: e,
  ownerState: o
}) => u({
  display: "flex",
  flexGrow: 1,
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  textDecoration: "none",
  minWidth: 0,
  boxSizing: "border-box",
  textAlign: "left",
  paddingTop: 8,
  paddingBottom: 8,
  transition: e.transitions.create("background-color", {
    duration: e.transitions.duration.shortest
  }),
  "&:hover": {
    textDecoration: "none",
    backgroundColor: (e.vars || e).palette.action.hover,
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  [`&.${pn.selected}`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity),
    [`&.${pn.focusVisible}`]: {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
    }
  },
  [`&.${pn.selected}:hover`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity)
    }
  },
  [`&.${pn.focusVisible}`]: {
    backgroundColor: (e.vars || e).palette.action.focus
  },
  [`&.${pn.disabled}`]: {
    opacity: (e.vars || e).palette.action.disabledOpacity
  }
}, o.divider && {
  borderBottom: `1px solid ${(e.vars || e).palette.divider}`,
  backgroundClip: "padding-box"
}, o.alignItems === "flex-start" && {
  alignItems: "flex-start"
}, !o.disableGutters && {
  paddingLeft: 16,
  paddingRight: 16
}, o.dense && {
  paddingTop: 4,
  paddingBottom: 4
})), wd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiListItemButton"
  }), {
    alignItems: s = "center",
    autoFocus: a = !1,
    component: i = "div",
    children: l,
    dense: c = !1,
    disableGutters: d = !1,
    divider: p = !1,
    focusVisibleClassName: m,
    selected: b = !1,
    className: h
  } = r, v = z(r, X$), C = f.useContext(Wt), g = f.useMemo(() => ({
    dense: c || C.dense || !1,
    alignItems: s,
    disableGutters: d
  }), [s, C.dense, c, d]), y = f.useRef(null);
  bt(() => {
    a && (y.current ? y.current.focus() : process.env.NODE_ENV !== "production" && console.error("MUI: Unable to set focus to a ListItemButton whose component has not been rendered."));
  }, [a]);
  const $ = u({}, r, {
    alignItems: s,
    dense: g.dense,
    disableGutters: d,
    divider: p,
    selected: b
  }), T = Z$($), O = Ve(y, n);
  return /* @__PURE__ */ x(Wt.Provider, {
    value: g,
    children: /* @__PURE__ */ x(J$, u({
      ref: O,
      href: v.href || v.to,
      component: (v.href || v.to) && i === "div" ? "button" : i,
      focusVisibleClassName: D(T.focusVisible, m),
      ownerState: $,
      className: D(T.root, h)
    }, v, {
      classes: T,
      children: l
    }))
  });
});
process.env.NODE_ENV !== "production" && (wd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Defines the `align-items` style property.
   * @default 'center'
   */
  alignItems: t.oneOf(["center", "flex-start"]),
  /**
   * If `true`, the list item is focused during the first mount.
   * Focus will also be triggered if the value changes from false to true.
   * @default false
   */
  autoFocus: t.bool,
  /**
   * The content of the component if a `ListItemSecondaryAction` is used it must
   * be the last child.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
   * The prop defaults to the value inherited from the parent List component.
   * @default false
   */
  dense: t.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * If `true`, a 1px light border is added to the bottom of the list item.
   * @default false
   */
  divider: t.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: t.string,
  /**
   * @ignore
   */
  href: t.string,
  /**
   * Use to apply selected styling.
   * @default false
   */
  selected: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const pM = wd;
function e1(e) {
  return ee("MuiListItemSecondaryAction", e);
}
const t1 = ne("MuiListItemSecondaryAction", ["root", "disableGutters"]), fM = t1, o1 = ["className"], n1 = (e) => {
  const {
    disableGutters: o,
    classes: n
  } = e;
  return te({
    root: ["root", o && "disableGutters"]
  }, e1, n);
}, r1 = P("div", {
  name: "MuiListItemSecondaryAction",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.disableGutters && o.disableGutters];
  }
})(({
  ownerState: e
}) => u({
  position: "absolute",
  right: 16,
  top: "50%",
  transform: "translateY(-50%)"
}, e.disableGutters && {
  right: 0
})), Ha = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiListItemSecondaryAction"
  }), {
    className: s
  } = r, a = z(r, o1), i = f.useContext(Wt), l = u({}, r, {
    disableGutters: i.disableGutters
  }), c = n1(l);
  return /* @__PURE__ */ x(r1, u({
    className: D(c.root, s),
    ownerState: l,
    ref: n
  }, a));
});
process.env.NODE_ENV !== "production" && (Ha.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally an `IconButton` or selection control.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
Ha.muiName = "ListItemSecondaryAction";
const s1 = Ha, a1 = ["className"], i1 = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected", "slotProps", "slots"], l1 = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.root, n.dense && o.dense, n.alignItems === "flex-start" && o.alignItemsFlexStart, n.divider && o.divider, !n.disableGutters && o.gutters, !n.disablePadding && o.padding, n.button && o.button, n.hasSecondaryAction && o.secondaryAction];
}, c1 = (e) => {
  const {
    alignItems: o,
    button: n,
    classes: r,
    dense: s,
    disabled: a,
    disableGutters: i,
    disablePadding: l,
    divider: c,
    hasSecondaryAction: d,
    selected: p
  } = e;
  return te({
    root: ["root", s && "dense", !i && "gutters", !l && "padding", c && "divider", a && "disabled", n && "button", o === "flex-start" && "alignItemsFlexStart", d && "secondaryAction", p && "selected"],
    container: ["container"]
  }, q$, r);
}, u1 = P("div", {
  name: "MuiListItem",
  slot: "Root",
  overridesResolver: l1
})(({
  theme: e,
  ownerState: o
}) => u({
  display: "flex",
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  textDecoration: "none",
  width: "100%",
  boxSizing: "border-box",
  textAlign: "left"
}, !o.disablePadding && u({
  paddingTop: 8,
  paddingBottom: 8
}, o.dense && {
  paddingTop: 4,
  paddingBottom: 4
}, !o.disableGutters && {
  paddingLeft: 16,
  paddingRight: 16
}, !!o.secondaryAction && {
  // Add some space to avoid collision as `ListItemSecondaryAction`
  // is absolutely positioned.
  paddingRight: 48
}), !!o.secondaryAction && {
  [`& > .${pn.root}`]: {
    paddingRight: 48
  }
}, {
  [`&.${dn.focusVisible}`]: {
    backgroundColor: (e.vars || e).palette.action.focus
  },
  [`&.${dn.selected}`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity),
    [`&.${dn.focusVisible}`]: {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
    }
  },
  [`&.${dn.disabled}`]: {
    opacity: (e.vars || e).palette.action.disabledOpacity
  }
}, o.alignItems === "flex-start" && {
  alignItems: "flex-start"
}, o.divider && {
  borderBottom: `1px solid ${(e.vars || e).palette.divider}`,
  backgroundClip: "padding-box"
}, o.button && {
  transition: e.transitions.create("background-color", {
    duration: e.transitions.duration.shortest
  }),
  "&:hover": {
    textDecoration: "none",
    backgroundColor: (e.vars || e).palette.action.hover,
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  [`&.${dn.selected}:hover`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity)
    }
  }
}, o.hasSecondaryAction && {
  // Add some space to avoid collision as `ListItemSecondaryAction`
  // is absolutely positioned.
  paddingRight: 48
})), d1 = P("li", {
  name: "MuiListItem",
  slot: "Container",
  overridesResolver: (e, o) => o.container
})({
  position: "relative"
}), Ed = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiListItem"
  }), {
    alignItems: s = "center",
    autoFocus: a = !1,
    button: i = !1,
    children: l,
    className: c,
    component: d,
    components: p = {},
    componentsProps: m = {},
    ContainerComponent: b = "li",
    ContainerProps: {
      className: h
    } = {},
    dense: v = !1,
    disabled: C = !1,
    disableGutters: g = !1,
    disablePadding: y = !1,
    divider: $ = !1,
    focusVisibleClassName: T,
    secondaryAction: O,
    selected: S = !1,
    slotProps: R = {},
    slots: w = {}
  } = r, E = z(r.ContainerProps, a1), N = z(r, i1), M = f.useContext(Wt), I = f.useMemo(() => ({
    dense: v || M.dense || !1,
    alignItems: s,
    disableGutters: g
  }), [s, M.dense, v, g]), F = f.useRef(null);
  bt(() => {
    a && (F.current ? F.current.focus() : process.env.NODE_ENV !== "production" && console.error("MUI: Unable to set focus to a ListItem whose component has not been rendered."));
  }, [a]);
  const A = f.Children.toArray(l), B = A.length && Co(A[A.length - 1], ["ListItemSecondaryAction"]), j = u({}, r, {
    alignItems: s,
    autoFocus: a,
    button: i,
    dense: I.dense,
    disabled: C,
    disableGutters: g,
    disablePadding: y,
    divider: $,
    hasSecondaryAction: B,
    selected: S
  }), V = c1(j), U = Ve(F, n), _ = w.root || p.Root || u1, W = R.root || m.root || {}, de = u({
    className: D(V.root, W.className, c),
    disabled: C
  }, N);
  let Te = d || "li";
  return i && (de.component = d || "div", de.focusVisibleClassName = D(dn.focusVisible, T), Te = pt), B ? (Te = !de.component && !d ? "div" : Te, b === "li" && (Te === "li" ? Te = "div" : de.component === "li" && (de.component = "div")), /* @__PURE__ */ x(Wt.Provider, {
    value: I,
    children: /* @__PURE__ */ Ce(d1, u({
      as: b,
      className: D(V.container, h),
      ref: U,
      ownerState: j
    }, E, {
      children: [/* @__PURE__ */ x(_, u({}, W, !Jt(_) && {
        as: Te,
        ownerState: u({}, j, W.ownerState)
      }, de, {
        children: A
      })), A.pop()]
    }))
  })) : /* @__PURE__ */ x(Wt.Provider, {
    value: I,
    children: /* @__PURE__ */ Ce(_, u({}, W, {
      as: Te,
      ref: U
    }, !Jt(_) && {
      ownerState: u({}, j, W.ownerState)
    }, de, {
      children: [A, O && /* @__PURE__ */ x(s1, {
        children: O
      })]
    }))
  });
});
process.env.NODE_ENV !== "production" && (Ed.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Defines the `align-items` style property.
   * @default 'center'
   */
  alignItems: t.oneOf(["center", "flex-start"]),
  /**
   * If `true`, the list item is focused during the first mount.
   * Focus will also be triggered if the value changes from false to true.
   * @default false
   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
   */
  autoFocus: t.bool,
  /**
   * If `true`, the list item is a button (using `ButtonBase`). Props intended
   * for `ButtonBase` can then be applied to `ListItem`.
   * @default false
   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
   */
  button: t.bool,
  /**
   * The content of the component if a `ListItemSecondaryAction` is used it must
   * be the last child.
   */
  children: ut(t.node, (e) => {
    const o = f.Children.toArray(e.children);
    let n = -1;
    for (let r = o.length - 1; r >= 0; r -= 1) {
      const s = o[r];
      if (Co(s, ["ListItemSecondaryAction"])) {
        n = r;
        break;
      }
    }
    return n !== -1 && n !== o.length - 1 ? new Error("MUI: You used an element after ListItemSecondaryAction. For ListItem to detect that it has a secondary action you must pass it as the last child to ListItem.") : null;
  }),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: t.shape({
    Root: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: t.shape({
    root: t.object
  }),
  /**
   * The container component used when a `ListItemSecondaryAction` is the last child.
   * @default 'li'
   * @deprecated
   */
  ContainerComponent: jo,
  /**
   * Props applied to the container component if used.
   * @default {}
   * @deprecated
   */
  ContainerProps: t.object,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
   * The prop defaults to the value inherited from the parent List component.
   * @default false
   */
  dense: t.bool,
  /**
   * If `true`, the component is disabled.
   * @default false
   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
   */
  disabled: t.bool,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * If `true`, all padding is removed.
   * @default false
   */
  disablePadding: t.bool,
  /**
   * If `true`, a 1px light border is added to the bottom of the list item.
   * @default false
   */
  divider: t.bool,
  /**
   * @ignore
   */
  focusVisibleClassName: t.string,
  /**
   * The element to display at the end of ListItem.
   */
  secondaryAction: t.node,
  /**
   * Use to apply selected styling.
   * @default false
   * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
   */
  selected: t.bool,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: t.shape({
    root: t.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: t.shape({
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const mM = Ed;
function p1(e) {
  return ee("MuiListItemAvatar", e);
}
const f1 = ne("MuiListItemAvatar", ["root", "alignItemsFlexStart"]), bM = f1, m1 = ["className"], b1 = (e) => {
  const {
    alignItems: o,
    classes: n
  } = e;
  return te({
    root: ["root", o === "flex-start" && "alignItemsFlexStart"]
  }, p1, n);
}, g1 = P("div", {
  name: "MuiListItemAvatar",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.alignItems === "flex-start" && o.alignItemsFlexStart];
  }
})(({
  ownerState: e
}) => u({
  minWidth: 56,
  flexShrink: 0
}, e.alignItems === "flex-start" && {
  marginTop: 8
})), Pd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiListItemAvatar"
  }), {
    className: s
  } = r, a = z(r, m1), i = f.useContext(Wt), l = u({}, r, {
    alignItems: i.alignItems
  }), c = b1(l);
  return /* @__PURE__ */ x(g1, u({
    className: D(c.root, s),
    ownerState: l,
    ref: n
  }, a));
});
process.env.NODE_ENV !== "production" && (Pd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally an `Avatar`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const gM = Pd;
function h1(e) {
  return ee("MuiListItemIcon", e);
}
const v1 = ne("MuiListItemIcon", ["root", "alignItemsFlexStart"]), fl = v1, y1 = ["className"], C1 = (e) => {
  const {
    alignItems: o,
    classes: n
  } = e;
  return te({
    root: ["root", o === "flex-start" && "alignItemsFlexStart"]
  }, h1, n);
}, x1 = P("div", {
  name: "MuiListItemIcon",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.alignItems === "flex-start" && o.alignItemsFlexStart];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  minWidth: 56,
  color: (e.vars || e).palette.action.active,
  flexShrink: 0,
  display: "inline-flex"
}, o.alignItems === "flex-start" && {
  marginTop: 8
})), Nd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiListItemIcon"
  }), {
    className: s
  } = r, a = z(r, y1), i = f.useContext(Wt), l = u({}, r, {
    alignItems: i.alignItems
  }), c = C1(l);
  return /* @__PURE__ */ x(x1, u({
    className: D(c.root, s),
    ownerState: l,
    ref: n
  }, a));
});
process.env.NODE_ENV !== "production" && (Nd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally `Icon`, `SvgIcon`,
   * or a `@mui/icons-material` SVG icon element.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const hM = Nd;
function T1(e) {
  return ee("MuiListItemText", e);
}
const O1 = ne("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]), as = O1, $1 = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"], S1 = (e) => {
  const {
    classes: o,
    inset: n,
    primary: r,
    secondary: s,
    dense: a
  } = e;
  return te({
    root: ["root", n && "inset", a && "dense", r && s && "multiline"],
    primary: ["primary"],
    secondary: ["secondary"]
  }, T1, o);
}, R1 = P("div", {
  name: "MuiListItemText",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${as.primary}`]: o.primary
    }, {
      [`& .${as.secondary}`]: o.secondary
    }, o.root, n.inset && o.inset, n.primary && n.secondary && o.multiline, n.dense && o.dense];
  }
})(({
  ownerState: e
}) => u({
  flex: "1 1 auto",
  minWidth: 0,
  marginTop: 4,
  marginBottom: 4
}, e.primary && e.secondary && {
  marginTop: 6,
  marginBottom: 6
}, e.inset && {
  paddingLeft: 56
})), Id = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiListItemText"
  }), {
    children: s,
    className: a,
    disableTypography: i = !1,
    inset: l = !1,
    primary: c,
    primaryTypographyProps: d,
    secondary: p,
    secondaryTypographyProps: m
  } = r, b = z(r, $1), {
    dense: h
  } = f.useContext(Wt);
  let v = c ?? s, C = p;
  const g = u({}, r, {
    disableTypography: i,
    inset: l,
    primary: !!v,
    secondary: !!C,
    dense: h
  }), y = S1(g);
  return v != null && v.type !== xt && !i && (v = /* @__PURE__ */ x(xt, u({
    variant: h ? "body2" : "body1",
    className: y.primary,
    component: d != null && d.variant ? void 0 : "span",
    display: "block"
  }, d, {
    children: v
  }))), C != null && C.type !== xt && !i && (C = /* @__PURE__ */ x(xt, u({
    variant: "body2",
    className: y.secondary,
    color: "text.secondary",
    display: "block"
  }, m, {
    children: C
  }))), /* @__PURE__ */ Ce(R1, u({
    className: D(y.root, a),
    ownerState: g,
    ref: n
  }, b, {
    children: [v, C]
  }));
});
process.env.NODE_ENV !== "production" && (Id.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Alias for the `primary` prop.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the children won't be wrapped by a Typography component.
   * This can be useful to render an alternative Typography variant by wrapping
   * the `children` (or `primary`) text, and optional `secondary` text
   * with the Typography component.
   * @default false
   */
  disableTypography: t.bool,
  /**
   * If `true`, the children are indented.
   * This should be used if there is no left avatar or left icon.
   * @default false
   */
  inset: t.bool,
  /**
   * The main content element.
   */
  primary: t.node,
  /**
   * These props will be forwarded to the primary typography component
   * (as long as disableTypography is not `true`).
   */
  primaryTypographyProps: t.object,
  /**
   * The secondary content element.
   */
  secondary: t.node,
  /**
   * These props will be forwarded to the secondary typography component
   * (as long as disableTypography is not `true`).
   */
  secondaryTypographyProps: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const vM = Id, w1 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
function zs(e, o, n) {
  return e === o ? e.firstChild : o && o.nextElementSibling ? o.nextElementSibling : n ? null : e.firstChild;
}
function ml(e, o, n) {
  return e === o ? n ? e.firstChild : e.lastChild : o && o.previousElementSibling ? o.previousElementSibling : n ? null : e.lastChild;
}
function kd(e, o) {
  if (o === void 0)
    return !0;
  let n = e.innerText;
  return n === void 0 && (n = e.textContent), n = n.trim().toLowerCase(), n.length === 0 ? !1 : o.repeating ? n[0] === o.keys[0] : n.indexOf(o.keys.join("")) === 0;
}
function An(e, o, n, r, s, a) {
  let i = !1, l = s(e, o, o ? n : !1);
  for (; l; ) {
    if (l === e.firstChild) {
      if (i)
        return !1;
      i = !0;
    }
    const c = r ? !1 : l.disabled || l.getAttribute("aria-disabled") === "true";
    if (!l.hasAttribute("tabindex") || !kd(l, a) || c)
      l = s(e, l, n);
    else
      return l.focus(), !0;
  }
  return !1;
}
const Md = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const {
    // private
    // eslint-disable-next-line react/prop-types
    actions: r,
    autoFocus: s = !1,
    autoFocusItem: a = !1,
    children: i,
    className: l,
    disabledItemsFocusable: c = !1,
    disableListWrap: d = !1,
    onKeyDown: p,
    variant: m = "selectedMenu"
  } = o, b = z(o, w1), h = f.useRef(null), v = f.useRef({
    keys: [],
    repeating: !0,
    previousKeyMatched: !0,
    lastTime: null
  });
  bt(() => {
    s && h.current.focus();
  }, [s]), f.useImperativeHandle(r, () => ({
    adjustStyleForScrollbar: (T, O) => {
      const S = !h.current.style.width;
      if (T.clientHeight < h.current.clientHeight && S) {
        const R = `${gc(Xe(T))}px`;
        h.current.style[O.direction === "rtl" ? "paddingLeft" : "paddingRight"] = R, h.current.style.width = `calc(100% + ${R})`;
      }
      return h.current;
    }
  }), []);
  const C = (T) => {
    const O = h.current, S = T.key, R = Xe(O).activeElement;
    if (S === "ArrowDown")
      T.preventDefault(), An(O, R, d, c, zs);
    else if (S === "ArrowUp")
      T.preventDefault(), An(O, R, d, c, ml);
    else if (S === "Home")
      T.preventDefault(), An(O, null, d, c, zs);
    else if (S === "End")
      T.preventDefault(), An(O, null, d, c, ml);
    else if (S.length === 1) {
      const w = v.current, E = S.toLowerCase(), N = performance.now();
      w.keys.length > 0 && (N - w.lastTime > 500 ? (w.keys = [], w.repeating = !0, w.previousKeyMatched = !0) : w.repeating && E !== w.keys[0] && (w.repeating = !1)), w.lastTime = N, w.keys.push(E);
      const M = R && !w.repeating && kd(R, w);
      w.previousKeyMatched && (M || An(O, R, !1, c, zs, w)) ? T.preventDefault() : w.previousKeyMatched = !1;
    }
    p && p(T);
  }, g = Ve(h, n);
  let y = -1;
  f.Children.forEach(i, (T, O) => {
    if (!/* @__PURE__ */ f.isValidElement(T)) {
      y === O && (y += 1, y >= i.length && (y = -1));
      return;
    }
    process.env.NODE_ENV !== "production" && to.isFragment(T) && console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), T.props.disabled || (m === "selectedMenu" && T.props.selected || y === -1) && (y = O), y === O && (T.props.disabled || T.props.muiSkipListHighlight || T.type.muiSkipListHighlight) && (y += 1, y >= i.length && (y = -1));
  });
  const $ = f.Children.map(i, (T, O) => {
    if (O === y) {
      const S = {};
      return a && (S.autoFocus = !0), T.props.tabIndex === void 0 && m === "selectedMenu" && (S.tabIndex = 0), /* @__PURE__ */ f.cloneElement(T, S);
    }
    return T;
  });
  return /* @__PURE__ */ x(H$, u({
    role: "menu",
    ref: g,
    className: l,
    onKeyDown: C,
    tabIndex: s ? 0 : -1
  }, b, {
    children: $
  }));
});
process.env.NODE_ENV !== "production" && (Md.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, will focus the `[role="menu"]` container and move into tab order.
   * @default false
   */
  autoFocus: t.bool,
  /**
   * If `true`, will focus the first menuitem if `variant="menu"` or selected item
   * if `variant="selectedMenu"`.
   * @default false
   */
  autoFocusItem: t.bool,
  /**
   * MenuList contents, normally `MenuItem`s.
   */
  children: t.node,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, will allow focus on disabled items.
   * @default false
   */
  disabledItemsFocusable: t.bool,
  /**
   * If `true`, the menu items will not wrap focus.
   * @default false
   */
  disableListWrap: t.bool,
  /**
   * @ignore
   */
  onKeyDown: t.func,
  /**
   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
   * and the vertical alignment relative to the anchor element.
   * @default 'selectedMenu'
   */
  variant: t.oneOf(["menu", "selectedMenu"])
});
const E1 = Md;
function P1(e) {
  return ee("MuiPopover", e);
}
const N1 = ne("MuiPopover", ["root", "paper"]), yM = N1, I1 = ["onEntering"], k1 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "slots", "slotProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps", "disableScrollLock"], M1 = ["slotProps"];
function bl(e, o) {
  let n = 0;
  return typeof o == "number" ? n = o : o === "center" ? n = e.height / 2 : o === "bottom" && (n = e.height), n;
}
function gl(e, o) {
  let n = 0;
  return typeof o == "number" ? n = o : o === "center" ? n = e.width / 2 : o === "right" && (n = e.width), n;
}
function hl(e) {
  return [e.horizontal, e.vertical].map((o) => typeof o == "number" ? `${o}px` : o).join(" ");
}
function qr(e) {
  return typeof e == "function" ? e() : e;
}
const B1 = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"],
    paper: ["paper"]
  }, P1, o);
}, L1 = P(Aa, {
  name: "MuiPopover",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({}), Bd = P(Gt, {
  name: "MuiPopover",
  slot: "Paper",
  overridesResolver: (e, o) => o.paper
})({
  position: "absolute",
  overflowY: "auto",
  overflowX: "hidden",
  // So we see the popover when it's empty.
  // It's most likely on issue on userland.
  minWidth: 16,
  minHeight: 16,
  maxWidth: "calc(100% - 32px)",
  maxHeight: "calc(100% - 32px)",
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0
}), Ld = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s, a;
  const i = oe({
    props: o,
    name: "MuiPopover"
  }), {
    action: l,
    anchorEl: c,
    anchorOrigin: d = {
      vertical: "top",
      horizontal: "left"
    },
    anchorPosition: p,
    anchorReference: m = "anchorEl",
    children: b,
    className: h,
    container: v,
    elevation: C = 8,
    marginThreshold: g = 16,
    open: y,
    PaperProps: $ = {},
    slots: T,
    slotProps: O,
    transformOrigin: S = {
      vertical: "top",
      horizontal: "left"
    },
    TransitionComponent: R = rs,
    transitionDuration: w = "auto",
    TransitionProps: {
      onEntering: E
    } = {},
    disableScrollLock: N = !1
  } = i, M = z(i.TransitionProps, I1), I = z(i, k1), F = (r = O == null ? void 0 : O.paper) != null ? r : $, A = f.useRef(), B = Ve(A, F.ref), j = u({}, i, {
    anchorOrigin: d,
    anchorReference: m,
    elevation: C,
    marginThreshold: g,
    externalPaperSlotProps: F,
    transformOrigin: S,
    TransitionComponent: R,
    transitionDuration: w,
    TransitionProps: M
  }), V = B1(j), U = f.useCallback(() => {
    if (m === "anchorPosition")
      return process.env.NODE_ENV !== "production" && (p || console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.')), p;
    const ve = qr(c), Y = ve && ve.nodeType === 1 ? ve : Xe(A.current).body, re = Y.getBoundingClientRect();
    if (process.env.NODE_ENV !== "production") {
      const X = Y.getBoundingClientRect();
      process.env.NODE_ENV !== "test" && X.top === 0 && X.left === 0 && X.right === 0 && X.bottom === 0 && console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
    }
    return {
      top: re.top + bl(re, d.vertical),
      left: re.left + gl(re, d.horizontal)
    };
  }, [c, d.horizontal, d.vertical, p, m]), _ = f.useCallback((ve) => ({
    vertical: bl(ve, S.vertical),
    horizontal: gl(ve, S.horizontal)
  }), [S.horizontal, S.vertical]), W = f.useCallback((ve) => {
    const Y = {
      width: ve.offsetWidth,
      height: ve.offsetHeight
    }, re = _(Y);
    if (m === "none")
      return {
        top: null,
        left: null,
        transformOrigin: hl(re)
      };
    const X = U();
    let Ee = X.top - re.vertical, be = X.left - re.horizontal;
    const De = Ee + Y.height, Ie = be + Y.width, Se = Rt(qr(c)), Me = Se.innerHeight - g, Fe = Se.innerWidth - g;
    if (g !== null && Ee < g) {
      const Ae = Ee - g;
      Ee -= Ae, re.vertical += Ae;
    } else if (g !== null && De > Me) {
      const Ae = De - Me;
      Ee -= Ae, re.vertical += Ae;
    }
    if (process.env.NODE_ENV !== "production" && Y.height > Me && Y.height && Me && console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${Y.height - Me}px).`, "Please consider adding a `max-height` to improve the user-experience."].join(`
`)), g !== null && be < g) {
      const Ae = be - g;
      be -= Ae, re.horizontal += Ae;
    } else if (Ie > Fe) {
      const Ae = Ie - Fe;
      be -= Ae, re.horizontal += Ae;
    }
    return {
      top: `${Math.round(Ee)}px`,
      left: `${Math.round(be)}px`,
      transformOrigin: hl(re)
    };
  }, [c, m, U, _, g]), [de, Te] = f.useState(y), $e = f.useCallback(() => {
    const ve = A.current;
    if (!ve)
      return;
    const Y = W(ve);
    Y.top !== null && (ve.style.top = Y.top), Y.left !== null && (ve.style.left = Y.left), ve.style.transformOrigin = Y.transformOrigin, Te(!0);
  }, [W]);
  f.useEffect(() => (N && window.addEventListener("scroll", $e), () => window.removeEventListener("scroll", $e)), [c, N, $e]);
  const ie = (ve, Y) => {
    E && E(ve, Y), $e();
  }, se = () => {
    Te(!1);
  };
  f.useEffect(() => {
    y && $e();
  }), f.useImperativeHandle(l, () => y ? {
    updatePosition: () => {
      $e();
    }
  } : null, [y, $e]), f.useEffect(() => {
    if (!y)
      return;
    const ve = fr(() => {
      $e();
    }), Y = Rt(c);
    return Y.addEventListener("resize", ve), () => {
      ve.clear(), Y.removeEventListener("resize", ve);
    };
  }, [c, y, $e]);
  let ue = w;
  w === "auto" && !R.muiSupportAuto && (ue = void 0);
  const Z = v || (c ? Xe(qr(c)).body : void 0), he = (s = T == null ? void 0 : T.root) != null ? s : L1, q = (a = T == null ? void 0 : T.paper) != null ? a : Bd, le = at({
    elementType: q,
    externalSlotProps: u({}, F, {
      style: de ? F.style : u({}, F.style, {
        opacity: 0
      })
    }),
    additionalProps: {
      elevation: C,
      ref: B
    },
    ownerState: j,
    className: D(V.paper, F == null ? void 0 : F.className)
  }), Oe = at({
    elementType: he,
    externalSlotProps: (O == null ? void 0 : O.root) || {},
    externalForwardedProps: I,
    additionalProps: {
      ref: n,
      slotProps: {
        backdrop: {
          invisible: !0
        }
      },
      container: Z,
      open: y
    },
    ownerState: j,
    className: D(V.root, h)
  }), {
    slotProps: fe
  } = Oe, me = z(Oe, M1);
  return /* @__PURE__ */ x(he, u({}, me, !Jt(he) && {
    slotProps: fe,
    disableScrollLock: N
  }, {
    children: /* @__PURE__ */ x(R, u({
      appear: !0,
      in: y,
      onEntering: ie,
      onExited: se,
      timeout: ue
    }, M, {
      children: /* @__PURE__ */ x(q, u({}, le, {
        children: b
      }))
    }))
  }));
});
process.env.NODE_ENV !== "production" && (Ld.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * A ref for imperative actions.
   * It currently only supports updatePosition() action.
   */
  action: yt,
  /**
   * An HTML element, [PopoverVirtualElement](/material-ui/react-popover/#virtual-element),
   * or a function that returns either.
   * It's used to set the position of the popover.
   */
  anchorEl: ut(t.oneOfType([fo, t.func]), (e) => {
    if (e.open && (!e.anchorReference || e.anchorReference === "anchorEl")) {
      const o = qr(e.anchorEl);
      if (o && o.nodeType === 1) {
        const n = o.getBoundingClientRect();
        if (process.env.NODE_ENV !== "test" && n.top === 0 && n.left === 0 && n.right === 0 && n.bottom === 0)
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join(`
`));
      } else
        return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element or PopoverVirtualElement instance but it's \`${o}\` instead.`].join(`
`));
    }
    return null;
  }),
  /**
   * This is the point on the anchor where the popover's
   * `anchorEl` will attach to. This is not used when the
   * anchorReference is 'anchorPosition'.
   *
   * Options:
   * vertical: [top, center, bottom];
   * horizontal: [left, center, right].
   * @default {
   *   vertical: 'top',
   *   horizontal: 'left',
   * }
   */
  anchorOrigin: t.shape({
    horizontal: t.oneOfType([t.oneOf(["center", "left", "right"]), t.number]).isRequired,
    vertical: t.oneOfType([t.oneOf(["bottom", "center", "top"]), t.number]).isRequired
  }),
  /**
   * This is the position that may be used to set the position of the popover.
   * The coordinates are relative to the application's client area.
   */
  anchorPosition: t.shape({
    left: t.number.isRequired,
    top: t.number.isRequired
  }),
  /**
   * This determines which anchor prop to refer to when setting
   * the position of the popover.
   * @default 'anchorEl'
   */
  anchorReference: t.oneOf(["anchorEl", "anchorPosition", "none"]),
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * An HTML element, component instance, or function that returns either.
   * The `container` will passed to the Modal component.
   *
   * By default, it uses the body of the anchorEl's top-level document object,
   * so it's simply `document.body` most of the time.
   */
  container: t.oneOfType([fo, t.func]),
  /**
   * Disable the scroll lock behavior.
   * @default false
   */
  disableScrollLock: t.bool,
  /**
   * The elevation of the popover.
   * @default 8
   */
  elevation: lt,
  /**
   * Specifies how close to the edge of the window the popover can appear.
   * If null, the popover will not be constrained by the window.
   * @default 16
   */
  marginThreshold: t.number,
  /**
   * Callback fired when the component requests to be closed.
   * The `reason` parameter can optionally be used to control the response to `onClose`.
   */
  onClose: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool.isRequired,
  /**
   * Props applied to the [`Paper`](/material-ui/api/paper/) element.
   *
   * This prop is an alias for `slotProps.paper` and will be overriden by it if both are used.
   * @deprecated Use `slotProps.paper` instead.
   *
   * @default {}
   */
  PaperProps: t.shape({
    component: jo
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @default {}
   */
  slotProps: t.shape({
    paper: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   *
   * @default {}
   */
  slots: t.shape({
    paper: t.elementType,
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * This is the point on the popover which
   * will attach to the anchor's origin.
   *
   * Options:
   * vertical: [top, center, bottom, x(px)];
   * horizontal: [left, center, right, x(px)].
   * @default {
   *   vertical: 'top',
   *   horizontal: 'left',
   * }
   */
  transformOrigin: t.shape({
    horizontal: t.oneOfType([t.oneOf(["center", "left", "right"]), t.number]).isRequired,
    vertical: t.oneOfType([t.oneOf(["bottom", "center", "top"]), t.number]).isRequired
  }),
  /**
   * The component used for the transition.
   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Grow
   */
  TransitionComponent: t.elementType,
  /**
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */
  transitionDuration: t.oneOfType([t.oneOf(["auto"]), t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @default {}
   */
  TransitionProps: t.object
});
const D1 = Ld;
function A1(e) {
  return ee("MuiMenu", e);
}
const F1 = ne("MuiMenu", ["root", "paper", "list"]), CM = F1, j1 = ["onEntering"], _1 = ["autoFocus", "children", "className", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant", "slots", "slotProps"], z1 = {
  vertical: "top",
  horizontal: "right"
}, V1 = {
  vertical: "top",
  horizontal: "left"
}, U1 = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"],
    paper: ["paper"],
    list: ["list"]
  }, A1, o);
}, W1 = P(D1, {
  shouldForwardProp: (e) => dt(e) || e === "classes",
  name: "MuiMenu",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({}), H1 = P(Bd, {
  name: "MuiMenu",
  slot: "Paper",
  overridesResolver: (e, o) => o.paper
})({
  // specZ: The maximum height of a simple menu should be one or more rows less than the view
  // height. This ensures a tappable area outside of the simple menu with which to dismiss
  // the menu.
  maxHeight: "calc(100% - 96px)",
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch"
}), q1 = P(E1, {
  name: "MuiMenu",
  slot: "List",
  overridesResolver: (e, o) => o.list
})({
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0
}), Dd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s;
  const a = oe({
    props: o,
    name: "MuiMenu"
  }), {
    autoFocus: i = !0,
    children: l,
    className: c,
    disableAutoFocusItem: d = !1,
    MenuListProps: p = {},
    onClose: m,
    open: b,
    PaperProps: h = {},
    PopoverClasses: v,
    transitionDuration: C = "auto",
    TransitionProps: {
      onEntering: g
    } = {},
    variant: y = "selectedMenu",
    slots: $ = {},
    slotProps: T = {}
  } = a, O = z(a.TransitionProps, j1), S = z(a, _1), R = rt(), w = R.direction === "rtl", E = u({}, a, {
    autoFocus: i,
    disableAutoFocusItem: d,
    MenuListProps: p,
    onEntering: g,
    PaperProps: h,
    transitionDuration: C,
    TransitionProps: O,
    variant: y
  }), N = U1(E), M = i && !d && b, I = f.useRef(null), F = (W, de) => {
    I.current && I.current.adjustStyleForScrollbar(W, R), g && g(W, de);
  }, A = (W) => {
    W.key === "Tab" && (W.preventDefault(), m && m(W, "tabKeyDown"));
  };
  let B = -1;
  f.Children.map(l, (W, de) => {
    /* @__PURE__ */ f.isValidElement(W) && (process.env.NODE_ENV !== "production" && to.isFragment(W) && console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), W.props.disabled || (y === "selectedMenu" && W.props.selected || B === -1) && (B = de));
  });
  const j = (r = $.paper) != null ? r : H1, V = (s = T.paper) != null ? s : h, U = at({
    elementType: $.root,
    externalSlotProps: T.root,
    ownerState: E,
    className: [N.root, c]
  }), _ = at({
    elementType: j,
    externalSlotProps: V,
    ownerState: E,
    className: N.paper
  });
  return /* @__PURE__ */ x(W1, u({
    onClose: m,
    anchorOrigin: {
      vertical: "bottom",
      horizontal: w ? "right" : "left"
    },
    transformOrigin: w ? z1 : V1,
    slots: {
      paper: j,
      root: $.root
    },
    slotProps: {
      root: U,
      paper: _
    },
    open: b,
    ref: n,
    transitionDuration: C,
    TransitionProps: u({
      onEntering: F
    }, O),
    ownerState: E
  }, S, {
    classes: v,
    children: /* @__PURE__ */ x(q1, u({
      onKeyDown: A,
      actions: I,
      autoFocus: i && (B === -1 || d),
      autoFocusItem: M,
      variant: y
    }, p, {
      className: D(N.list, p.className),
      children: l
    }))
  }));
});
process.env.NODE_ENV !== "production" && (Dd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * An HTML element, or a function that returns one.
   * It's used to set the position of the menu.
   */
  anchorEl: t.oneOfType([fo, t.func]),
  /**
   * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
   * children are not focusable. If you set this prop to `false` focus will be placed
   * on the parent modal container. This has severe accessibility implications
   * and should only be considered if you manage focus otherwise.
   * @default true
   */
  autoFocus: t.bool,
  /**
   * Menu contents, normally `MenuItem`s.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * When opening the menu will not focus the active item but the `[role="menu"]`
   * unless `autoFocus` is also set to `false`. Not using the default means not
   * following WAI-ARIA authoring practices. Please be considerate about possible
   * accessibility implications.
   * @default false
   */
  disableAutoFocusItem: t.bool,
  /**
   * Props applied to the [`MenuList`](/material-ui/api/menu-list/) element.
   * @default {}
   */
  MenuListProps: t.object,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
   */
  onClose: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool.isRequired,
  /**
   * @ignore
   */
  PaperProps: t.object,
  /**
   * `classes` prop applied to the [`Popover`](/material-ui/api/popover/) element.
   */
  PopoverClasses: t.object,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * @default {}
   */
  slotProps: t.shape({
    paper: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   *
   * @default {}
   */
  slots: t.shape({
    paper: t.elementType,
    root: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The length of the transition in `ms`, or 'auto'
   * @default 'auto'
   */
  transitionDuration: t.oneOfType([t.oneOf(["auto"]), t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @default {}
   */
  TransitionProps: t.object,
  /**
   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
   * @default 'selectedMenu'
   */
  variant: t.oneOf(["menu", "selectedMenu"])
});
const G1 = Dd;
function K1(e) {
  return ee("MuiMenuItem", e);
}
const Y1 = ne("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]), Fn = Y1, X1 = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"], Q1 = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.root, n.dense && o.dense, n.divider && o.divider, !n.disableGutters && o.gutters];
}, Z1 = (e) => {
  const {
    disabled: o,
    dense: n,
    divider: r,
    disableGutters: s,
    selected: a,
    classes: i
  } = e, c = te({
    root: ["root", n && "dense", o && "disabled", !s && "gutters", r && "divider", a && "selected"]
  }, K1, i);
  return u({}, i, c);
}, J1 = P(pt, {
  shouldForwardProp: (e) => dt(e) || e === "classes",
  name: "MuiMenuItem",
  slot: "Root",
  overridesResolver: Q1
})(({
  theme: e,
  ownerState: o
}) => u({}, e.typography.body1, {
  display: "flex",
  justifyContent: "flex-start",
  alignItems: "center",
  position: "relative",
  textDecoration: "none",
  minHeight: 48,
  paddingTop: 6,
  paddingBottom: 6,
  boxSizing: "border-box",
  whiteSpace: "nowrap"
}, !o.disableGutters && {
  paddingLeft: 16,
  paddingRight: 16
}, o.divider && {
  borderBottom: `1px solid ${(e.vars || e).palette.divider}`,
  backgroundClip: "padding-box"
}, {
  "&:hover": {
    textDecoration: "none",
    backgroundColor: (e.vars || e).palette.action.hover,
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  [`&.${Fn.selected}`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity),
    [`&.${Fn.focusVisible}`]: {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
    }
  },
  [`&.${Fn.selected}:hover`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity)
    }
  },
  [`&.${Fn.focusVisible}`]: {
    backgroundColor: (e.vars || e).palette.action.focus
  },
  [`&.${Fn.disabled}`]: {
    opacity: (e.vars || e).palette.action.disabledOpacity
  },
  [`& + .${Zi.root}`]: {
    marginTop: e.spacing(1),
    marginBottom: e.spacing(1)
  },
  [`& + .${Zi.inset}`]: {
    marginLeft: 52
  },
  [`& .${as.root}`]: {
    marginTop: 0,
    marginBottom: 0
  },
  [`& .${as.inset}`]: {
    paddingLeft: 36
  },
  [`& .${fl.root}`]: {
    minWidth: 36
  }
}, !o.dense && {
  [e.breakpoints.up("sm")]: {
    minHeight: "auto"
  }
}, o.dense && u({
  minHeight: 32,
  // https://m2.material.io/components/menus#specs > Dense
  paddingTop: 4,
  paddingBottom: 4
}, e.typography.body2, {
  [`& .${fl.root} svg`]: {
    fontSize: "1.25rem"
  }
}))), Ad = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiMenuItem"
  }), {
    autoFocus: s = !1,
    component: a = "li",
    dense: i = !1,
    divider: l = !1,
    disableGutters: c = !1,
    focusVisibleClassName: d,
    role: p = "menuitem",
    tabIndex: m,
    className: b
  } = r, h = z(r, X1), v = f.useContext(Wt), C = f.useMemo(() => ({
    dense: i || v.dense || !1,
    disableGutters: c
  }), [v.dense, i, c]), g = f.useRef(null);
  bt(() => {
    s && (g.current ? g.current.focus() : process.env.NODE_ENV !== "production" && console.error("MUI: Unable to set focus to a MenuItem whose component has not been rendered."));
  }, [s]);
  const y = u({}, r, {
    dense: C.dense,
    divider: l,
    disableGutters: c
  }), $ = Z1(r), T = Ve(g, n);
  let O;
  return r.disabled || (O = m !== void 0 ? m : -1), /* @__PURE__ */ x(Wt.Provider, {
    value: C,
    children: /* @__PURE__ */ x(J1, u({
      ref: T,
      role: p,
      tabIndex: O,
      component: a,
      focusVisibleClassName: D($.focusVisible, d),
      className: D($.root, b)
    }, h, {
      ownerState: y,
      classes: $
    }))
  });
});
process.env.NODE_ENV !== "production" && (Ad.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the list item is focused during the first mount.
   * Focus will also be triggered if the value changes from false to true.
   * @default false
   */
  autoFocus: t.bool,
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, compact vertical padding designed for keyboard and mouse input is used.
   * The prop defaults to the value inherited from the parent Menu component.
   * @default false
   */
  dense: t.bool,
  /**
   * @ignore
   */
  disabled: t.bool,
  /**
   * If `true`, the left and right padding is removed.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * If `true`, a 1px light border is added to the bottom of the menu item.
   * @default false
   */
  divider: t.bool,
  /**
   * This prop can help identify which element has keyboard focus.
   * The class name will be applied when the element gains the focus through keyboard interaction.
   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
   * if needed.
   */
  focusVisibleClassName: t.string,
  /**
   * @ignore
   */
  role: t.string,
  /**
   * If `true`, the component is selected.
   * @default false
   */
  selected: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * @default 0
   */
  tabIndex: t.number
});
const eS = Ad;
function tS(e) {
  return ee("MuiMobileStepper", e);
}
const oS = ne("MuiMobileStepper", ["root", "positionBottom", "positionTop", "positionStatic", "dots", "dot", "dotActive", "progress"]), xM = oS, nS = ["activeStep", "backButton", "className", "LinearProgressProps", "nextButton", "position", "steps", "variant"], rS = (e) => {
  const {
    classes: o,
    position: n
  } = e, r = {
    root: ["root", `position${k(n)}`],
    dots: ["dots"],
    dot: ["dot"],
    dotActive: ["dotActive"],
    progress: ["progress"]
  };
  return te(r, tS, o);
}, sS = P(Gt, {
  name: "MuiMobileStepper",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`position${k(n.position)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  display: "flex",
  flexDirection: "row",
  justifyContent: "space-between",
  alignItems: "center",
  background: (e.vars || e).palette.background.default,
  padding: 8
}, o.position === "bottom" && {
  position: "fixed",
  bottom: 0,
  left: 0,
  right: 0,
  zIndex: (e.vars || e).zIndex.mobileStepper
}, o.position === "top" && {
  position: "fixed",
  top: 0,
  left: 0,
  right: 0,
  zIndex: (e.vars || e).zIndex.mobileStepper
})), aS = P("div", {
  name: "MuiMobileStepper",
  slot: "Dots",
  overridesResolver: (e, o) => o.dots
})(({
  ownerState: e
}) => u({}, e.variant === "dots" && {
  display: "flex",
  flexDirection: "row"
})), iS = P("div", {
  name: "MuiMobileStepper",
  slot: "Dot",
  shouldForwardProp: (e) => pr(e) && e !== "dotActive",
  overridesResolver: (e, o) => {
    const {
      dotActive: n
    } = e;
    return [o.dot, n && o.dotActive];
  }
})(({
  theme: e,
  ownerState: o,
  dotActive: n
}) => u({}, o.variant === "dots" && u({
  transition: e.transitions.create("background-color", {
    duration: e.transitions.duration.shortest
  }),
  backgroundColor: (e.vars || e).palette.action.disabled,
  borderRadius: "50%",
  width: 8,
  height: 8,
  margin: "0 2px"
}, n && {
  backgroundColor: (e.vars || e).palette.primary.main
}))), lS = P(N$, {
  name: "MuiMobileStepper",
  slot: "Progress",
  overridesResolver: (e, o) => o.progress
})(({
  ownerState: e
}) => u({}, e.variant === "progress" && {
  width: "50%"
})), Fd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiMobileStepper"
  }), {
    activeStep: s = 0,
    backButton: a,
    className: i,
    LinearProgressProps: l,
    nextButton: c,
    position: d = "bottom",
    steps: p,
    variant: m = "dots"
  } = r, b = z(r, nS), h = u({}, r, {
    activeStep: s,
    position: d,
    variant: m
  });
  let v;
  m === "progress" && (p === 1 ? v = 100 : v = Math.ceil(s / (p - 1) * 100));
  const C = rS(h);
  return /* @__PURE__ */ Ce(sS, u({
    square: !0,
    elevation: 0,
    className: D(C.root, i),
    ref: n,
    ownerState: h
  }, b, {
    children: [a, m === "text" && /* @__PURE__ */ Ce(f.Fragment, {
      children: [s + 1, " / ", p]
    }), m === "dots" && /* @__PURE__ */ x(aS, {
      ownerState: h,
      className: C.dots,
      children: [...new Array(p)].map((g, y) => /* @__PURE__ */ x(iS, {
        className: D(C.dot, y === s && C.dotActive),
        ownerState: h,
        dotActive: y === s
      }, y))
    }), m === "progress" && /* @__PURE__ */ x(lS, u({
      ownerState: h,
      className: C.progress,
      variant: "determinate",
      value: v
    }, l)), c]
  }));
});
process.env.NODE_ENV !== "production" && (Fd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the active step (zero based index).
   * Defines which dot is highlighted when the variant is 'dots'.
   * @default 0
   */
  activeStep: lt,
  /**
   * A back button element. For instance, it can be a `Button` or an `IconButton`.
   */
  backButton: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Props applied to the `LinearProgress` element.
   */
  LinearProgressProps: t.object,
  /**
   * A next button element. For instance, it can be a `Button` or an `IconButton`.
   */
  nextButton: t.node,
  /**
   * Set the positioning type.
   * @default 'bottom'
   */
  position: t.oneOf(["bottom", "static", "top"]),
  /**
   * The total steps.
   */
  steps: lt.isRequired,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'dots'
   */
  variant: t.oneOf(["dots", "progress", "text"])
});
const TM = Fd;
function jd(e) {
  return ee("MuiNativeSelect", e);
}
const cS = ne("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]), qa = cS, uS = ["className", "disabled", "error", "IconComponent", "inputRef", "variant"], dS = (e) => {
  const {
    classes: o,
    variant: n,
    disabled: r,
    multiple: s,
    open: a,
    error: i
  } = e, l = {
    select: ["select", n, r && "disabled", s && "multiple", i && "error"],
    icon: ["icon", `icon${k(n)}`, a && "iconOpen", r && "disabled"]
  };
  return te(l, jd, o);
}, _d = ({
  ownerState: e,
  theme: o
}) => u({
  MozAppearance: "none",
  // Reset
  WebkitAppearance: "none",
  // Reset
  // When interacting quickly, the text can end up selected.
  // Native select can't be selected either.
  userSelect: "none",
  borderRadius: 0,
  // Reset
  cursor: "pointer",
  "&:focus": u({}, o.vars ? {
    backgroundColor: `rgba(${o.vars.palette.common.onBackgroundChannel} / 0.05)`
  } : {
    backgroundColor: o.palette.mode === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)"
  }, {
    borderRadius: 0
    // Reset Chrome style
  }),
  // Remove IE11 arrow
  "&::-ms-expand": {
    display: "none"
  },
  [`&.${qa.disabled}`]: {
    cursor: "default"
  },
  "&[multiple]": {
    height: "auto"
  },
  "&:not([multiple]) option, &:not([multiple]) optgroup": {
    backgroundColor: (o.vars || o).palette.background.paper
  },
  // Bump specificity to allow extending custom inputs
  "&&&": {
    paddingRight: 24,
    minWidth: 16
    // So it doesn't collapse.
  }
}, e.variant === "filled" && {
  "&&&": {
    paddingRight: 32
  }
}, e.variant === "outlined" && {
  borderRadius: (o.vars || o).shape.borderRadius,
  "&:focus": {
    borderRadius: (o.vars || o).shape.borderRadius
    // Reset the reset for Chrome style
  },
  "&&&": {
    paddingRight: 32
  }
}), pS = P("select", {
  name: "MuiNativeSelect",
  slot: "Select",
  shouldForwardProp: dt,
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.select, o[n.variant], n.error && o.error, {
      [`&.${qa.multiple}`]: o.multiple
    }];
  }
})(_d), zd = ({
  ownerState: e,
  theme: o
}) => u({
  // We use a position absolute over a flexbox in order to forward the pointer events
  // to the input and to support wrapping tags..
  position: "absolute",
  right: 0,
  top: "calc(50% - .5em)",
  // Center vertically, height is 1em
  pointerEvents: "none",
  // Don't block pointer events on the select under the icon.
  color: (o.vars || o).palette.action.active,
  [`&.${qa.disabled}`]: {
    color: (o.vars || o).palette.action.disabled
  }
}, e.open && {
  transform: "rotate(180deg)"
}, e.variant === "filled" && {
  right: 7
}, e.variant === "outlined" && {
  right: 7
}), fS = P("svg", {
  name: "MuiNativeSelect",
  slot: "Icon",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.icon, n.variant && o[`icon${k(n.variant)}`], n.open && o.iconOpen];
  }
})(zd), Vd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const {
    className: r,
    disabled: s,
    error: a,
    IconComponent: i,
    inputRef: l,
    variant: c = "standard"
  } = o, d = z(o, uS), p = u({}, o, {
    disabled: s,
    variant: c,
    error: a
  }), m = dS(p);
  return /* @__PURE__ */ Ce(f.Fragment, {
    children: [/* @__PURE__ */ x(pS, u({
      ownerState: p,
      className: D(m.select, r),
      disabled: s,
      ref: l || n
    }, d)), o.multiple ? null : /* @__PURE__ */ x(fS, {
      as: i,
      ownerState: p,
      className: m.icon
    })]
  });
});
process.env.NODE_ENV !== "production" && (Vd.propTypes = {
  /**
   * The option elements to populate the select with.
   * Can be some `<option>` elements.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The CSS class name of the select element.
   */
  className: t.string,
  /**
   * If `true`, the select is disabled.
   */
  disabled: t.bool,
  /**
   * If `true`, the `select input` will indicate an error.
   */
  error: t.bool,
  /**
   * The icon that displays the arrow.
   */
  IconComponent: t.elementType.isRequired,
  /**
   * Use that prop to pass a ref to the native select element.
   * @deprecated
   */
  inputRef: yt,
  /**
   * @ignore
   */
  multiple: t.bool,
  /**
   * Name attribute of the `select` or hidden `input` element.
   */
  name: t.string,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * The input value.
   */
  value: t.any,
  /**
   * The variant to use.
   */
  variant: t.oneOf(["standard", "outlined", "filled"])
});
const Ud = Vd, mS = ["className", "children", "classes", "IconComponent", "input", "inputProps", "variant"], bS = ["root"], gS = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"]
  }, jd, o);
}, hS = /* @__PURE__ */ x(Ua, {}), Ga = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    name: "MuiNativeSelect",
    props: o
  }), {
    className: s,
    children: a,
    classes: i = {},
    IconComponent: l = La,
    input: c = hS,
    inputProps: d
  } = r, p = z(r, mS), m = oo(), b = $o({
    props: r,
    muiFormControl: m,
    states: ["variant"]
  }), h = u({}, r, {
    classes: i
  }), v = gS(h), C = z(i, bS);
  return /* @__PURE__ */ x(f.Fragment, {
    children: /* @__PURE__ */ f.cloneElement(c, u({
      // Most of the logic is implemented in `NativeSelectInput`.
      // The `Select` component is a simple API wrapper to expose something better to play with.
      inputComponent: Ud,
      inputProps: u({
        children: a,
        classes: C,
        IconComponent: l,
        variant: b.variant,
        type: void 0
      }, d, c ? c.props.inputProps : {}),
      ref: n
    }, p, {
      className: D(v.root, c.props.className, s)
    }))
  });
});
process.env.NODE_ENV !== "production" && (Ga.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The option elements to populate the select with.
   * Can be some `<option>` elements.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   * @default {}
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The icon that displays the arrow.
   * @default ArrowDropDownIcon
   */
  IconComponent: t.elementType,
  /**
   * An `Input` element; does not have to be a material-ui specific `Input`.
   * @default <Input />
   */
  input: t.element,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.
   */
  inputProps: t.object,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The `input` value. The DOM API casts this to a string.
   */
  value: t.any,
  /**
   * The variant to use.
   */
  variant: t.oneOf(["filled", "outlined", "standard"])
});
Ga.muiName = "Select";
const OM = Ga;
var vl;
const vS = ["children", "classes", "className", "label", "notched"], yS = P("fieldset", {
  shouldForwardProp: dt
})({
  textAlign: "left",
  position: "absolute",
  bottom: 0,
  right: 0,
  top: -5,
  left: 0,
  margin: 0,
  padding: "0 8px",
  pointerEvents: "none",
  borderRadius: "inherit",
  borderStyle: "solid",
  borderWidth: 1,
  overflow: "hidden",
  minWidth: "0%"
}), CS = P("legend", {
  shouldForwardProp: dt
})(({
  ownerState: e,
  theme: o
}) => u({
  float: "unset",
  // Fix conflict with bootstrap
  width: "auto",
  // Fix conflict with bootstrap
  overflow: "hidden"
}, !e.withLabel && {
  padding: 0,
  lineHeight: "11px",
  // sync with `height` in `legend` styles
  transition: o.transitions.create("width", {
    duration: 150,
    easing: o.transitions.easing.easeOut
  })
}, e.withLabel && u({
  display: "block",
  // Fix conflict with normalize.css and sanitize.css
  padding: 0,
  height: 11,
  // sync with `lineHeight` in `legend` styles
  fontSize: "0.75em",
  visibility: "hidden",
  maxWidth: 0.01,
  transition: o.transitions.create("max-width", {
    duration: 50,
    easing: o.transitions.easing.easeOut
  }),
  whiteSpace: "nowrap",
  "& > span": {
    paddingLeft: 5,
    paddingRight: 5,
    display: "inline-block",
    opacity: 0,
    visibility: "visible"
  }
}, e.notched && {
  maxWidth: "100%",
  transition: o.transitions.create("max-width", {
    duration: 100,
    easing: o.transitions.easing.easeOut,
    delay: 50
  })
})));
function Wd(e) {
  const {
    className: o,
    label: n,
    notched: r
  } = e, s = z(e, vS), a = n != null && n !== "", i = u({}, e, {
    notched: r,
    withLabel: a
  });
  return /* @__PURE__ */ x(yS, u({
    "aria-hidden": !0,
    className: o,
    ownerState: i
  }, s, {
    children: /* @__PURE__ */ x(CS, {
      ownerState: i,
      children: a ? /* @__PURE__ */ x("span", {
        children: n
      }) : (
        // notranslate needed while Google Translate will not fix zero-width space issue
        vl || (vl = /* @__PURE__ */ x("span", {
          className: "notranslate",
          children: "​"
        }))
      )
    })
  }));
}
process.env.NODE_ENV !== "production" && (Wd.propTypes = {
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The label.
   */
  label: t.node,
  /**
   * If `true`, the outline is notched to accommodate the label.
   */
  notched: t.bool.isRequired,
  /**
   * @ignore
   */
  style: t.object
});
const xS = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"], TS = (e) => {
  const {
    classes: o
  } = e, r = te({
    root: ["root"],
    notchedOutline: ["notchedOutline"],
    input: ["input"]
  }, $y, o);
  return u({}, o, r);
}, OS = P($s, {
  shouldForwardProp: (e) => dt(e) || e === "classes",
  name: "MuiOutlinedInput",
  slot: "Root",
  overridesResolver: Ts
})(({
  theme: e,
  ownerState: o
}) => {
  const n = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
  return u({
    position: "relative",
    borderRadius: (e.vars || e).shape.borderRadius,
    [`&:hover .${ao.notchedOutline}`]: {
      borderColor: (e.vars || e).palette.text.primary
    },
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      [`&:hover .${ao.notchedOutline}`]: {
        borderColor: e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : n
      }
    },
    [`&.${ao.focused} .${ao.notchedOutline}`]: {
      borderColor: (e.vars || e).palette[o.color].main,
      borderWidth: 2
    },
    [`&.${ao.error} .${ao.notchedOutline}`]: {
      borderColor: (e.vars || e).palette.error.main
    },
    [`&.${ao.disabled} .${ao.notchedOutline}`]: {
      borderColor: (e.vars || e).palette.action.disabled
    }
  }, o.startAdornment && {
    paddingLeft: 14
  }, o.endAdornment && {
    paddingRight: 14
  }, o.multiline && u({
    padding: "16.5px 14px"
  }, o.size === "small" && {
    padding: "8.5px 14px"
  }));
}), $S = P(Wd, {
  name: "MuiOutlinedInput",
  slot: "NotchedOutline",
  overridesResolver: (e, o) => o.notchedOutline
})(({
  theme: e
}) => {
  const o = e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
  return {
    borderColor: e.vars ? `rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : o
  };
}), SS = P(Ss, {
  name: "MuiOutlinedInput",
  slot: "Input",
  overridesResolver: Os
})(({
  theme: e,
  ownerState: o
}) => u({
  padding: "16.5px 14px"
}, !e.vars && {
  "&:-webkit-autofill": {
    WebkitBoxShadow: e.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
    WebkitTextFillColor: e.palette.mode === "light" ? null : "#fff",
    caretColor: e.palette.mode === "light" ? null : "#fff",
    borderRadius: "inherit"
  }
}, e.vars && {
  "&:-webkit-autofill": {
    borderRadius: "inherit"
  },
  [e.getColorSchemeSelector("dark")]: {
    "&:-webkit-autofill": {
      WebkitBoxShadow: "0 0 0 100px #266798 inset",
      WebkitTextFillColor: "#fff",
      caretColor: "#fff"
    }
  }
}, o.size === "small" && {
  padding: "8.5px 14px"
}, o.multiline && {
  padding: 0
}, o.startAdornment && {
  paddingLeft: 0
}, o.endAdornment && {
  paddingRight: 0
})), Ka = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s, a, i, l;
  const c = oe({
    props: o,
    name: "MuiOutlinedInput"
  }), {
    components: d = {},
    fullWidth: p = !1,
    inputComponent: m = "input",
    label: b,
    multiline: h = !1,
    notched: v,
    slots: C = {},
    type: g = "text"
  } = c, y = z(c, xS), $ = TS(c), T = oo(), O = $o({
    props: c,
    muiFormControl: T,
    states: ["color", "disabled", "error", "focused", "hiddenLabel", "size", "required"]
  }), S = u({}, c, {
    color: O.color || "primary",
    disabled: O.disabled,
    error: O.error,
    focused: O.focused,
    formControl: T,
    fullWidth: p,
    hiddenLabel: O.hiddenLabel,
    multiline: h,
    size: O.size,
    type: g
  }), R = (r = (s = C.root) != null ? s : d.Root) != null ? r : OS, w = (a = (i = C.input) != null ? i : d.Input) != null ? a : SS;
  return /* @__PURE__ */ x(Rs, u({
    slots: {
      root: R,
      input: w
    },
    renderSuffix: (E) => /* @__PURE__ */ x($S, {
      ownerState: S,
      className: $.notchedOutline,
      label: b != null && b !== "" && O.required ? l || (l = /* @__PURE__ */ Ce(f.Fragment, {
        children: [b, " ", "*"]
      })) : b,
      notched: typeof v < "u" ? v : !!(E.startAdornment || E.filled || E.focused)
    }),
    fullWidth: p,
    inputComponent: m,
    multiline: h,
    ref: n,
    type: g
  }, y, {
    classes: u({}, $, {
      notchedOutline: null
    })
  }));
});
process.env.NODE_ENV !== "production" && (Ka.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: t.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   */
  autoFocus: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary"]), t.string]),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: t.shape({
    Input: t.elementType,
    Root: t.elementType
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * If `true`, the component is disabled.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  disabled: t.bool,
  /**
   * End `InputAdornment` for this component.
   */
  endAdornment: t.node,
  /**
   * If `true`, the `input` will indicate an error.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  error: t.bool,
  /**
   * If `true`, the `input` will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * The component used for the `input` element.
   * Either a string to use a HTML element or a component.
   * @default 'input'
   */
  inputComponent: t.elementType,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * @default {}
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: yt,
  /**
   * The label of the `input`. It is only used for layout. The actual labelling
   * is handled by `InputLabel`.
   */
  label: t.node,
  /**
   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
   * FormControl.
   * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
   */
  margin: t.oneOf(["dense", "none"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: t.oneOfType([t.number, t.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: t.oneOfType([t.number, t.string]),
  /**
   * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
   * @default false
   */
  multiline: t.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: t.string,
  /**
   * If `true`, the outline is notched to accommodate the label.
   */
  notched: t.bool,
  /**
   * Callback fired when the value is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: t.string,
  /**
   * It prevents the user from changing the value of the field
   * (not from interacting with the field).
   */
  readOnly: t.bool,
  /**
   * If `true`, the `input` element is required.
   * The prop defaults to the value (`false`) inherited from the parent FormControl component.
   */
  required: t.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: t.oneOfType([t.number, t.string]),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: t.shape({
    input: t.elementType,
    root: t.elementType
  }),
  /**
   * Start `InputAdornment` for this component.
   */
  startAdornment: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   * @default 'text'
   */
  type: t.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: t.any
});
Ka.muiName = "Input";
const Hd = Ka;
function RS(e) {
  return ee("MuiPagination", e);
}
const wS = ne("MuiPagination", ["root", "ul", "outlined", "text"]), $M = wS, ES = ["boundaryCount", "componentName", "count", "defaultPage", "disabled", "hideNextButton", "hidePrevButton", "onChange", "page", "showFirstButton", "showLastButton", "siblingCount"];
function PS(e = {}) {
  const {
    boundaryCount: o = 1,
    componentName: n = "usePagination",
    count: r = 1,
    defaultPage: s = 1,
    disabled: a = !1,
    hideNextButton: i = !1,
    hidePrevButton: l = !1,
    onChange: c,
    page: d,
    showFirstButton: p = !1,
    showLastButton: m = !1,
    siblingCount: b = 1
  } = e, h = z(e, ES), [v, C] = Dt({
    controlled: d,
    default: s,
    name: n,
    state: "page"
  }), g = (N, M) => {
    d || C(M), c && c(N, M);
  }, y = (N, M) => {
    const I = M - N + 1;
    return Array.from({
      length: I
    }, (F, A) => N + A);
  }, $ = y(1, Math.min(o, r)), T = y(Math.max(r - o + 1, o + 1), r), O = Math.max(
    Math.min(
      // Natural start
      v - b,
      // Lower boundary when page is high
      r - o - b * 2 - 1
    ),
    // Greater than startPages
    o + 2
  ), S = Math.min(
    Math.max(
      // Natural end
      v + b,
      // Upper boundary when page is low
      o + b * 2 + 2
    ),
    // Less than endPages
    T.length > 0 ? T[0] - 2 : r - 1
  ), R = [
    ...p ? ["first"] : [],
    ...l ? [] : ["previous"],
    ...$,
    // Start ellipsis
    // eslint-disable-next-line no-nested-ternary
    ...O > o + 2 ? ["start-ellipsis"] : o + 1 < r - o ? [o + 1] : [],
    // Sibling pages
    ...y(O, S),
    // End ellipsis
    // eslint-disable-next-line no-nested-ternary
    ...S < r - o - 1 ? ["end-ellipsis"] : r - o > o ? [r - o] : [],
    ...T,
    ...i ? [] : ["next"],
    ...m ? ["last"] : []
  ], w = (N) => {
    switch (N) {
      case "first":
        return 1;
      case "previous":
        return v - 1;
      case "next":
        return v + 1;
      case "last":
        return r;
      default:
        return null;
    }
  }, E = R.map((N) => typeof N == "number" ? {
    onClick: (M) => {
      g(M, N);
    },
    type: "page",
    page: N,
    selected: N === v,
    disabled: a,
    "aria-current": N === v ? "true" : void 0
  } : {
    onClick: (M) => {
      g(M, w(N));
    },
    type: N,
    page: w(N),
    selected: !1,
    disabled: a || N.indexOf("ellipsis") === -1 && (N === "next" || N === "last" ? v >= r : v <= 1)
  });
  return u({
    items: E
  }, h);
}
function NS(e) {
  return ee("MuiPaginationItem", e);
}
const IS = ne("MuiPaginationItem", ["root", "page", "sizeSmall", "sizeLarge", "text", "textPrimary", "textSecondary", "outlined", "outlinedPrimary", "outlinedSecondary", "rounded", "ellipsis", "firstLast", "previousNext", "focusVisible", "disabled", "selected", "icon", "colorPrimary", "colorSecondary"]), jt = IS, ua = Je(/* @__PURE__ */ x("path", {
  d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
}), "FirstPage"), da = Je(/* @__PURE__ */ x("path", {
  d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
}), "LastPage"), yl = Je(/* @__PURE__ */ x("path", {
  d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
}), "NavigateBefore"), Cl = Je(/* @__PURE__ */ x("path", {
  d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
}), "NavigateNext"), kS = ["className", "color", "component", "components", "disabled", "page", "selected", "shape", "size", "slots", "type", "variant"], qd = (e, o) => {
  const {
    ownerState: n
  } = e;
  return [o.root, o[n.variant], o[`size${k(n.size)}`], n.variant === "text" && o[`text${k(n.color)}`], n.variant === "outlined" && o[`outlined${k(n.color)}`], n.shape === "rounded" && o.rounded, n.type === "page" && o.page, (n.type === "start-ellipsis" || n.type === "end-ellipsis") && o.ellipsis, (n.type === "previous" || n.type === "next") && o.previousNext, (n.type === "first" || n.type === "last") && o.firstLast];
}, MS = (e) => {
  const {
    classes: o,
    color: n,
    disabled: r,
    selected: s,
    size: a,
    shape: i,
    type: l,
    variant: c
  } = e, d = {
    root: ["root", `size${k(a)}`, c, i, n !== "standard" && `color${k(n)}`, n !== "standard" && `${c}${k(n)}`, r && "disabled", s && "selected", {
      page: "page",
      first: "firstLast",
      last: "firstLast",
      "start-ellipsis": "ellipsis",
      "end-ellipsis": "ellipsis",
      previous: "previousNext",
      next: "previousNext"
    }[l]],
    icon: ["icon"]
  };
  return te(d, NS, o);
}, BS = P("div", {
  name: "MuiPaginationItem",
  slot: "Root",
  overridesResolver: qd
})(({
  theme: e,
  ownerState: o
}) => u({}, e.typography.body2, {
  borderRadius: 32 / 2,
  textAlign: "center",
  boxSizing: "border-box",
  minWidth: 32,
  padding: "0 6px",
  margin: "0 3px",
  color: (e.vars || e).palette.text.primary,
  height: "auto",
  [`&.${jt.disabled}`]: {
    opacity: (e.vars || e).palette.action.disabledOpacity
  }
}, o.size === "small" && {
  minWidth: 26,
  borderRadius: 26 / 2,
  margin: "0 1px",
  padding: "0 4px"
}, o.size === "large" && {
  minWidth: 40,
  borderRadius: 40 / 2,
  padding: "0 10px",
  fontSize: e.typography.pxToRem(15)
})), LS = P(pt, {
  name: "MuiPaginationItem",
  slot: "Root",
  overridesResolver: qd
})(({
  theme: e,
  ownerState: o
}) => u({}, e.typography.body2, {
  borderRadius: 32 / 2,
  textAlign: "center",
  boxSizing: "border-box",
  minWidth: 32,
  height: 32,
  padding: "0 6px",
  margin: "0 3px",
  color: (e.vars || e).palette.text.primary,
  [`&.${jt.focusVisible}`]: {
    backgroundColor: (e.vars || e).palette.action.focus
  },
  [`&.${jt.disabled}`]: {
    opacity: (e.vars || e).palette.action.disabledOpacity
  },
  transition: e.transitions.create(["color", "background-color"], {
    duration: e.transitions.duration.short
  }),
  "&:hover": {
    backgroundColor: (e.vars || e).palette.action.hover,
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  },
  [`&.${jt.selected}`]: {
    backgroundColor: (e.vars || e).palette.action.selected,
    "&:hover": {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Pe(e.palette.action.selected, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: (e.vars || e).palette.action.selected
      }
    },
    [`&.${jt.focusVisible}`]: {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.action.selectedChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Pe(e.palette.action.selected, e.palette.action.selectedOpacity + e.palette.action.focusOpacity)
    },
    [`&.${jt.disabled}`]: {
      opacity: 1,
      color: (e.vars || e).palette.action.disabled,
      backgroundColor: (e.vars || e).palette.action.selected
    }
  }
}, o.size === "small" && {
  minWidth: 26,
  height: 26,
  borderRadius: 26 / 2,
  margin: "0 1px",
  padding: "0 4px"
}, o.size === "large" && {
  minWidth: 40,
  height: 40,
  borderRadius: 40 / 2,
  padding: "0 10px",
  fontSize: e.typography.pxToRem(15)
}, o.shape === "rounded" && {
  borderRadius: (e.vars || e).shape.borderRadius
}), ({
  theme: e,
  ownerState: o
}) => u({}, o.variant === "text" && {
  [`&.${jt.selected}`]: u({}, o.color !== "standard" && {
    color: (e.vars || e).palette[o.color].contrastText,
    backgroundColor: (e.vars || e).palette[o.color].main,
    "&:hover": {
      backgroundColor: (e.vars || e).palette[o.color].dark,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: (e.vars || e).palette[o.color].main
      }
    },
    [`&.${jt.focusVisible}`]: {
      backgroundColor: (e.vars || e).palette[o.color].dark
    }
  }, {
    [`&.${jt.disabled}`]: {
      color: (e.vars || e).palette.action.disabled
    }
  })
}, o.variant === "outlined" && {
  border: e.vars ? `1px solid rgba(${e.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${e.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
  [`&.${jt.selected}`]: u({}, o.color !== "standard" && {
    color: (e.vars || e).palette[o.color].main,
    border: `1px solid ${e.vars ? `rgba(${e.vars.palette[o.color].mainChannel} / 0.5)` : Pe(e.palette[o.color].main, 0.5)}`,
    backgroundColor: e.vars ? `rgba(${e.vars.palette[o.color].mainChannel} / ${e.vars.palette.action.activatedOpacity})` : Pe(e.palette[o.color].main, e.palette.action.activatedOpacity),
    "&:hover": {
      backgroundColor: e.vars ? `rgba(${e.vars.palette[o.color].mainChannel} / calc(${e.vars.palette.action.activatedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Pe(e.palette[o.color].main, e.palette.action.activatedOpacity + e.palette.action.focusOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${jt.focusVisible}`]: {
      backgroundColor: e.vars ? `rgba(${e.vars.palette[o.color].mainChannel} / calc(${e.vars.palette.action.activatedOpacity} + ${e.vars.palette.action.focusOpacity}))` : Pe(e.palette[o.color].main, e.palette.action.activatedOpacity + e.palette.action.focusOpacity)
    }
  }, {
    [`&.${jt.disabled}`]: {
      borderColor: (e.vars || e).palette.action.disabledBackground,
      color: (e.vars || e).palette.action.disabled
    }
  })
})), DS = P("div", {
  name: "MuiPaginationItem",
  slot: "Icon",
  overridesResolver: (e, o) => o.icon
})(({
  theme: e,
  ownerState: o
}) => u({
  fontSize: e.typography.pxToRem(20),
  margin: "0 -8px"
}, o.size === "small" && {
  fontSize: e.typography.pxToRem(18)
}, o.size === "large" && {
  fontSize: e.typography.pxToRem(22)
})), Gd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiPaginationItem"
  }), {
    className: s,
    color: a = "standard",
    component: i,
    components: l = {},
    disabled: c = !1,
    page: d,
    selected: p = !1,
    shape: m = "circular",
    size: b = "medium",
    slots: h = {},
    type: v = "page",
    variant: C = "text"
  } = r, g = z(r, kS), y = u({}, r, {
    color: a,
    disabled: c,
    selected: p,
    shape: m,
    size: b,
    type: v,
    variant: C
  }), $ = rt(), T = MS(y), S = ($.direction === "rtl" ? {
    previous: h.next || l.next || Cl,
    next: h.previous || l.previous || yl,
    last: h.first || l.first || ua,
    first: h.last || l.last || da
  } : {
    previous: h.previous || l.previous || yl,
    next: h.next || l.next || Cl,
    first: h.first || l.first || ua,
    last: h.last || l.last || da
  })[v];
  return v === "start-ellipsis" || v === "end-ellipsis" ? /* @__PURE__ */ x(BS, {
    ref: n,
    ownerState: y,
    className: D(T.root, s),
    children: "…"
  }) : /* @__PURE__ */ Ce(LS, u({
    ref: n,
    ownerState: y,
    component: i,
    disabled: c,
    className: D(T.root, s)
  }, g, {
    children: [v === "page" && d, S ? /* @__PURE__ */ x(DS, {
      as: S,
      ownerState: y,
      className: T.icon
    }) : null]
  }));
});
process.env.NODE_ENV !== "production" && (Gd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * @ignore
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The active color.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'standard'
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary", "standard"]), t.string]),
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: t.shape({
    first: t.elementType,
    last: t.elementType,
    next: t.elementType,
    previous: t.elementType
  }),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * The current page number.
   */
  page: t.node,
  /**
   * If `true` the pagination item is selected.
   * @default false
   */
  selected: t.bool,
  /**
   * The shape of the pagination item.
   * @default 'circular'
   */
  shape: t.oneOf(["circular", "rounded"]),
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: t.shape({
    first: t.elementType,
    last: t.elementType,
    next: t.elementType,
    previous: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The type of pagination item.
   * @default 'page'
   */
  type: t.oneOf(["end-ellipsis", "first", "last", "next", "page", "previous", "start-ellipsis"]),
  /**
   * The variant to use.
   * @default 'text'
   */
  variant: t.oneOfType([t.oneOf(["outlined", "text"]), t.string])
});
const AS = Gd, FS = ["boundaryCount", "className", "color", "count", "defaultPage", "disabled", "getItemAriaLabel", "hideNextButton", "hidePrevButton", "onChange", "page", "renderItem", "shape", "showFirstButton", "showLastButton", "siblingCount", "size", "variant"], jS = (e) => {
  const {
    classes: o,
    variant: n
  } = e;
  return te({
    root: ["root", n],
    ul: ["ul"]
  }, RS, o);
}, _S = P("nav", {
  name: "MuiPagination",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant]];
  }
})({}), zS = P("ul", {
  name: "MuiPagination",
  slot: "Ul",
  overridesResolver: (e, o) => o.ul
})({
  display: "flex",
  flexWrap: "wrap",
  alignItems: "center",
  padding: 0,
  margin: 0,
  listStyle: "none"
});
function VS(e, o, n) {
  return e === "page" ? `${n ? "" : "Go to "}page ${o}` : `Go to ${e} page`;
}
const Kd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiPagination"
  }), {
    boundaryCount: s = 1,
    className: a,
    color: i = "standard",
    count: l = 1,
    defaultPage: c = 1,
    disabled: d = !1,
    getItemAriaLabel: p = VS,
    hideNextButton: m = !1,
    hidePrevButton: b = !1,
    renderItem: h = (E) => /* @__PURE__ */ x(AS, u({}, E)),
    shape: v = "circular",
    showFirstButton: C = !1,
    showLastButton: g = !1,
    siblingCount: y = 1,
    size: $ = "medium",
    variant: T = "text"
  } = r, O = z(r, FS), {
    items: S
  } = PS(u({}, r, {
    componentName: "Pagination"
  })), R = u({}, r, {
    boundaryCount: s,
    color: i,
    count: l,
    defaultPage: c,
    disabled: d,
    getItemAriaLabel: p,
    hideNextButton: m,
    hidePrevButton: b,
    renderItem: h,
    shape: v,
    showFirstButton: C,
    showLastButton: g,
    siblingCount: y,
    size: $,
    variant: T
  }), w = jS(R);
  return /* @__PURE__ */ x(_S, u({
    "aria-label": "pagination navigation",
    className: D(w.root, a),
    ownerState: R,
    ref: n
  }, O, {
    children: /* @__PURE__ */ x(zS, {
      className: w.ul,
      ownerState: R,
      children: S.map((E, N) => /* @__PURE__ */ x("li", {
        children: h(u({}, E, {
          color: i,
          "aria-label": p(E.type, E.page, E.selected),
          shape: v,
          size: $,
          variant: T
        }))
      }, N))
    })
  }));
});
process.env.NODE_ENV !== "production" && (Kd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Number of always visible pages at the beginning and end.
   * @default 1
   */
  boundaryCount: lt,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The active color.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'standard'
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary", "standard"]), t.string]),
  /**
   * The total number of pages.
   * @default 1
   */
  count: lt,
  /**
   * The page selected by default when the component is uncontrolled.
   * @default 1
   */
  defaultPage: lt,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   * This is important for screen reader users.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous' | 'start-ellipsis' | 'end-ellipsis'). Defaults to 'page'.
   * @param {number} page The page number to format.
   * @param {bool} selected If true, the current page is selected.
   * @returns {string}
   */
  getItemAriaLabel: t.func,
  /**
   * If `true`, hide the next-page button.
   * @default false
   */
  hideNextButton: t.bool,
  /**
   * If `true`, hide the previous-page button.
   * @default false
   */
  hidePrevButton: t.bool,
  /**
   * Callback fired when the page is changed.
   *
   * @param {React.ChangeEvent<unknown>} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onChange: t.func,
  /**
   * The current page.
   */
  page: lt,
  /**
   * Render the item.
   * @param {PaginationRenderItemParams} params The props to spread on a PaginationItem.
   * @returns {ReactNode}
   * @default (item) => <PaginationItem {...item} />
   */
  renderItem: t.func,
  /**
   * The shape of the pagination items.
   * @default 'circular'
   */
  shape: t.oneOf(["circular", "rounded"]),
  /**
   * If `true`, show the first-page button.
   * @default false
   */
  showFirstButton: t.bool,
  /**
   * If `true`, show the last-page button.
   * @default false
   */
  showLastButton: t.bool,
  /**
   * Number of always visible pages before and after the current page.
   * @default 1
   */
  siblingCount: lt,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'text'
   */
  variant: t.oneOfType([t.oneOf(["outlined", "text"]), t.string])
});
const SM = Kd, US = Je(/* @__PURE__ */ x("path", {
  d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
}), "RadioButtonUnchecked"), WS = Je(/* @__PURE__ */ x("path", {
  d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
}), "RadioButtonChecked"), HS = P("span", {
  shouldForwardProp: dt
})({
  position: "relative",
  display: "flex"
}), qS = P(US)({
  // Scale applied to prevent dot misalignment in Safari
  transform: "scale(1)"
}), GS = P(WS)(({
  theme: e,
  ownerState: o
}) => u({
  left: 0,
  position: "absolute",
  transform: "scale(0)",
  transition: e.transitions.create("transform", {
    easing: e.transitions.easing.easeIn,
    duration: e.transitions.duration.shortest
  })
}, o.checked && {
  transform: "scale(1)",
  transition: e.transitions.create("transform", {
    easing: e.transitions.easing.easeOut,
    duration: e.transitions.duration.shortest
  })
}));
function Ya(e) {
  const {
    checked: o = !1,
    classes: n = {},
    fontSize: r
  } = e, s = u({}, e, {
    checked: o
  });
  return /* @__PURE__ */ Ce(HS, {
    className: n.root,
    ownerState: s,
    children: [/* @__PURE__ */ x(qS, {
      fontSize: r,
      className: n.background,
      ownerState: s
    }), /* @__PURE__ */ x(GS, {
      fontSize: r,
      className: n.dot,
      ownerState: s
    })]
  });
}
process.env.NODE_ENV !== "production" && (Ya.propTypes = {
  /**
   * If `true`, the component is checked.
   */
  checked: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The size of the component.
   * `small` is equivalent to the dense radio styling.
   */
  fontSize: t.oneOf(["small", "medium"])
});
const Yd = /* @__PURE__ */ f.createContext(void 0);
process.env.NODE_ENV !== "production" && (Yd.displayName = "RadioGroupContext");
const Xd = Yd;
function KS() {
  return f.useContext(Xd);
}
function YS(e) {
  return ee("MuiRadio", e);
}
const XS = ne("MuiRadio", ["root", "checked", "disabled", "colorPrimary", "colorSecondary", "sizeSmall"]), xl = XS, QS = ["checked", "checkedIcon", "color", "icon", "name", "onChange", "size", "className"], ZS = (e) => {
  const {
    classes: o,
    color: n,
    size: r
  } = e, s = {
    root: ["root", `color${k(n)}`, r !== "medium" && `size${k(r)}`]
  };
  return u({}, o, te(s, YS, o));
}, JS = P(Da, {
  shouldForwardProp: (e) => dt(e) || e === "classes",
  name: "MuiRadio",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.size !== "medium" && o[`size${k(n.size)}`], o[`color${k(n.color)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  color: (e.vars || e).palette.text.secondary
}, !o.disableRipple && {
  "&:hover": {
    backgroundColor: e.vars ? `rgba(${o.color === "default" ? e.vars.palette.action.activeChannel : e.vars.palette[o.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Pe(o.color === "default" ? e.palette.action.active : e.palette[o.color].main, e.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }
}, o.color !== "default" && {
  [`&.${xl.checked}`]: {
    color: (e.vars || e).palette[o.color].main
  }
}, {
  [`&.${xl.disabled}`]: {
    color: (e.vars || e).palette.action.disabled
  }
}));
function eR(e, o) {
  return typeof o == "object" && o !== null ? e === o : String(e) === String(o);
}
const Tl = /* @__PURE__ */ x(Ya, {
  checked: !0
}), Ol = /* @__PURE__ */ x(Ya, {}), Qd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s;
  const a = oe({
    props: o,
    name: "MuiRadio"
  }), {
    checked: i,
    checkedIcon: l = Tl,
    color: c = "primary",
    icon: d = Ol,
    name: p,
    onChange: m,
    size: b = "medium",
    className: h
  } = a, v = z(a, QS), C = u({}, a, {
    color: c,
    size: b
  }), g = ZS(C), y = KS();
  let $ = i;
  const T = Zs(m, y && y.onChange);
  let O = p;
  return y && (typeof $ > "u" && ($ = eR(y.value, a.value)), typeof O > "u" && (O = y.name)), /* @__PURE__ */ x(JS, u({
    type: "radio",
    icon: /* @__PURE__ */ f.cloneElement(d, {
      fontSize: (r = Ol.props.fontSize) != null ? r : b
    }),
    checkedIcon: /* @__PURE__ */ f.cloneElement(l, {
      fontSize: (s = Tl.props.fontSize) != null ? s : b
    }),
    ownerState: C,
    classes: g,
    name: O,
    checked: $,
    onChange: T,
    ref: n,
    className: D(g.root, h)
  }, v));
});
process.env.NODE_ENV !== "production" && (Qd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component is checked.
   */
  checked: t.bool,
  /**
   * The icon to display when the component is checked.
   * @default <RadioButtonIcon checked />
   */
  checkedIcon: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * If `true`, the component is disabled.
   */
  disabled: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * The icon to display when the component is unchecked.
   * @default <RadioButtonIcon />
   */
  icon: t.node,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: yt,
  /**
   * Name attribute of the `input` element.
   */
  name: t.string,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: t.func,
  /**
   * If `true`, the `input` element is required.
   * @default false
   */
  required: t.bool,
  /**
   * The size of the component.
   * `small` is equivalent to the dense radio styling.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value of the component. The DOM API casts this to a string.
   */
  value: t.any
});
const RM = Qd, tR = ["actions", "children", "defaultValue", "name", "onChange", "value"], Zd = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const {
    // private
    // eslint-disable-next-line react/prop-types
    actions: r,
    children: s,
    defaultValue: a,
    name: i,
    onChange: l,
    value: c
  } = o, d = z(o, tR), p = f.useRef(null), [m, b] = Dt({
    controlled: c,
    default: a,
    name: "RadioGroup"
  });
  f.useImperativeHandle(r, () => ({
    focus: () => {
      let g = p.current.querySelector("input:not(:disabled):checked");
      g || (g = p.current.querySelector("input:not(:disabled)")), g && g.focus();
    }
  }), []);
  const h = Ve(n, p), v = mo(i), C = f.useMemo(() => ({
    name: v,
    onChange(g) {
      b(g.target.value), l && l(g, g.target.value);
    },
    value: m
  }), [v, l, b, m]);
  return /* @__PURE__ */ x(Xd.Provider, {
    value: C,
    children: /* @__PURE__ */ x(z0, u({
      role: "radiogroup",
      ref: h
    }, d, {
      children: s
    }))
  });
});
process.env.NODE_ENV !== "production" && (Zd.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * The name used to reference the value of the control.
   * If you don't provide this prop, it falls back to a randomly generated name.
   */
  name: t.string,
  /**
   * Callback fired when a radio button is selected.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * @param {string} value The value of the selected radio button.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * Value of the selected radio button. The DOM API casts this to a string.
   */
  value: t.any
});
const wM = Zd, oR = Je(/* @__PURE__ */ x("path", {
  d: "M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
}), "Star"), nR = Je(/* @__PURE__ */ x("path", {
  d: "M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"
}), "StarBorder");
function rR(e) {
  return ee("MuiRating", e);
}
const sR = ne("MuiRating", ["root", "sizeSmall", "sizeMedium", "sizeLarge", "readOnly", "disabled", "focusVisible", "visuallyHidden", "pristine", "label", "labelEmptyValueActive", "icon", "iconEmpty", "iconFilled", "iconHover", "iconFocus", "iconActive", "decimal"]), jn = sR, aR = ["value"], iR = ["className", "defaultValue", "disabled", "emptyIcon", "emptyLabelText", "getLabelText", "highlightSelectedOnly", "icon", "IconContainerComponent", "max", "name", "onChange", "onChangeActive", "onMouseLeave", "onMouseMove", "precision", "readOnly", "size", "value"];
function lR(e) {
  const o = e.toString().split(".")[1];
  return o ? o.length : 0;
}
function Vs(e, o) {
  if (e == null)
    return e;
  const n = Math.round(e / o) * o;
  return Number(n.toFixed(lR(o)));
}
const cR = (e) => {
  const {
    classes: o,
    size: n,
    readOnly: r,
    disabled: s,
    emptyValueFocused: a,
    focusVisible: i
  } = e, l = {
    root: ["root", `size${k(n)}`, s && "disabled", i && "focusVisible", r && "readOnly"],
    label: ["label", "pristine"],
    labelEmptyValue: [a && "labelEmptyValueActive"],
    icon: ["icon"],
    iconEmpty: ["iconEmpty"],
    iconFilled: ["iconFilled"],
    iconHover: ["iconHover"],
    iconFocus: ["iconFocus"],
    iconActive: ["iconActive"],
    decimal: ["decimal"],
    visuallyHidden: ["visuallyHidden"]
  };
  return te(l, rR, o);
}, uR = P("span", {
  name: "MuiRating",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${jn.visuallyHidden}`]: o.visuallyHidden
    }, o.root, o[`size${k(n.size)}`], n.readOnly && o.readOnly];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  display: "inline-flex",
  // Required to position the pristine input absolutely
  position: "relative",
  fontSize: e.typography.pxToRem(24),
  color: "#faaf00",
  cursor: "pointer",
  textAlign: "left",
  width: "min-content",
  WebkitTapHighlightColor: "transparent",
  [`&.${jn.disabled}`]: {
    opacity: (e.vars || e).palette.action.disabledOpacity,
    pointerEvents: "none"
  },
  [`&.${jn.focusVisible} .${jn.iconActive}`]: {
    outline: "1px solid #999"
  },
  [`& .${jn.visuallyHidden}`]: yc
}, o.size === "small" && {
  fontSize: e.typography.pxToRem(18)
}, o.size === "large" && {
  fontSize: e.typography.pxToRem(30)
}, o.readOnly && {
  pointerEvents: "none"
})), Jd = P("label", {
  name: "MuiRating",
  slot: "Label",
  overridesResolver: ({
    ownerState: e
  }, o) => [o.label, e.emptyValueFocused && o.labelEmptyValueActive]
})(({
  ownerState: e
}) => u({
  cursor: "inherit"
}, e.emptyValueFocused && {
  top: 0,
  bottom: 0,
  position: "absolute",
  outline: "1px solid #999",
  width: "100%"
})), dR = P("span", {
  name: "MuiRating",
  slot: "Icon",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.icon, n.iconEmpty && o.iconEmpty, n.iconFilled && o.iconFilled, n.iconHover && o.iconHover, n.iconFocus && o.iconFocus, n.iconActive && o.iconActive];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  // Fit wrapper to actual icon size.
  display: "flex",
  transition: e.transitions.create("transform", {
    duration: e.transitions.duration.shortest
  }),
  // Fix mouseLeave issue.
  // https://github.com/facebook/react/issues/4492
  pointerEvents: "none"
}, o.iconActive && {
  transform: "scale(1.2)"
}, o.iconEmpty && {
  color: (e.vars || e).palette.action.disabled
})), pR = P("span", {
  name: "MuiRating",
  slot: "Decimal",
  shouldForwardProp: (e) => pr(e) && e !== "iconActive",
  overridesResolver: (e, o) => {
    const {
      iconActive: n
    } = e;
    return [o.decimal, n && o.iconActive];
  }
})(({
  iconActive: e
}) => u({
  position: "relative"
}, e && {
  transform: "scale(1.2)"
}));
function ep(e) {
  const o = z(e, aR);
  return /* @__PURE__ */ x("span", u({}, o));
}
process.env.NODE_ENV !== "production" && (ep.propTypes = {
  value: t.number.isRequired
});
function pa(e) {
  const {
    classes: o,
    disabled: n,
    emptyIcon: r,
    focus: s,
    getLabelText: a,
    highlightSelectedOnly: i,
    hover: l,
    icon: c,
    IconContainerComponent: d,
    isActive: p,
    itemValue: m,
    labelProps: b,
    name: h,
    onBlur: v,
    onChange: C,
    onClick: g,
    onFocus: y,
    readOnly: $,
    ownerState: T,
    ratingValue: O,
    ratingValueRounded: S
  } = e, R = i ? m === O : m <= O, w = m <= l, E = m <= s, N = m === S, M = mo(), I = /* @__PURE__ */ x(dR, {
    as: d,
    value: m,
    className: D(o.icon, R ? o.iconFilled : o.iconEmpty, w && o.iconHover, E && o.iconFocus, p && o.iconActive),
    ownerState: u({}, T, {
      iconEmpty: !R,
      iconFilled: R,
      iconHover: w,
      iconFocus: E,
      iconActive: p
    }),
    children: r && !R ? r : c
  });
  return $ ? /* @__PURE__ */ x("span", u({}, b, {
    children: I
  })) : /* @__PURE__ */ Ce(f.Fragment, {
    children: [/* @__PURE__ */ Ce(Jd, u({
      ownerState: u({}, T, {
        emptyValueFocused: void 0
      }),
      htmlFor: M
    }, b, {
      children: [I, /* @__PURE__ */ x("span", {
        className: o.visuallyHidden,
        children: a(m)
      })]
    })), /* @__PURE__ */ x("input", {
      className: o.visuallyHidden,
      onFocus: y,
      onBlur: v,
      onChange: C,
      onClick: g,
      disabled: n,
      value: m,
      id: M,
      type: "radio",
      name: h,
      checked: N
    })]
  });
}
process.env.NODE_ENV !== "production" && (pa.propTypes = {
  classes: t.object.isRequired,
  disabled: t.bool.isRequired,
  emptyIcon: t.node,
  focus: t.number.isRequired,
  getLabelText: t.func.isRequired,
  highlightSelectedOnly: t.bool.isRequired,
  hover: t.number.isRequired,
  icon: t.node,
  IconContainerComponent: t.elementType.isRequired,
  isActive: t.bool.isRequired,
  itemValue: t.number.isRequired,
  labelProps: t.object,
  name: t.string,
  onBlur: t.func.isRequired,
  onChange: t.func.isRequired,
  onClick: t.func.isRequired,
  onFocus: t.func.isRequired,
  ownerState: t.object.isRequired,
  ratingValue: t.number,
  ratingValueRounded: t.number,
  readOnly: t.bool.isRequired
});
const fR = /* @__PURE__ */ x(oR, {
  fontSize: "inherit"
}), mR = /* @__PURE__ */ x(nR, {
  fontSize: "inherit"
});
function bR(e) {
  return `${e} Star${e !== 1 ? "s" : ""}`;
}
const tp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    name: "MuiRating",
    props: o
  }), {
    className: s,
    defaultValue: a = null,
    disabled: i = !1,
    emptyIcon: l = mR,
    emptyLabelText: c = "Empty",
    getLabelText: d = bR,
    highlightSelectedOnly: p = !1,
    icon: m = fR,
    IconContainerComponent: b = ep,
    max: h = 5,
    name: v,
    onChange: C,
    onChangeActive: g,
    onMouseLeave: y,
    onMouseMove: $,
    precision: T = 1,
    readOnly: O = !1,
    size: S = "medium",
    value: R
  } = r, w = z(r, iR), E = mo(v), [N, M] = Dt({
    controlled: R,
    default: a,
    name: "Rating"
  }), I = Vs(N, T), F = rt(), [{
    hover: A,
    focus: B
  }, j] = f.useState({
    hover: -1,
    focus: -1
  });
  let V = I;
  A !== -1 && (V = A), B !== -1 && (V = B);
  const {
    isFocusVisibleRef: U,
    onBlur: _,
    onFocus: W,
    ref: de
  } = br(), [Te, $e] = f.useState(!1), ie = f.useRef(), se = Ve(de, ie, n), ue = (re) => {
    $ && $(re);
    const X = ie.current, {
      right: Ee,
      left: be,
      width: De
    } = X.getBoundingClientRect();
    let Ie;
    F.direction === "rtl" ? Ie = (Ee - re.clientX) / De : Ie = (re.clientX - be) / De;
    let Se = Vs(h * Ie + T / 2, T);
    Se = Ko(Se, T, h), j((Me) => Me.hover === Se && Me.focus === Se ? Me : {
      hover: Se,
      focus: Se
    }), $e(!1), g && A !== Se && g(re, Se);
  }, Z = (re) => {
    y && y(re);
    const X = -1;
    j({
      hover: X,
      focus: X
    }), g && A !== X && g(re, X);
  }, he = (re) => {
    let X = re.target.value === "" ? null : parseFloat(re.target.value);
    A !== -1 && (X = A), M(X), C && C(re, X);
  }, q = (re) => {
    re.clientX === 0 && re.clientY === 0 || (j({
      hover: -1,
      focus: -1
    }), M(null), C && parseFloat(re.target.value) === I && C(re, null));
  }, le = (re) => {
    W(re), U.current === !0 && $e(!0);
    const X = parseFloat(re.target.value);
    j((Ee) => ({
      hover: Ee.hover,
      focus: X
    }));
  }, Oe = (re) => {
    if (A !== -1)
      return;
    _(re), U.current === !1 && $e(!1);
    const X = -1;
    j((Ee) => ({
      hover: Ee.hover,
      focus: X
    }));
  }, [fe, me] = f.useState(!1), ve = u({}, r, {
    defaultValue: a,
    disabled: i,
    emptyIcon: l,
    emptyLabelText: c,
    emptyValueFocused: fe,
    focusVisible: Te,
    getLabelText: d,
    icon: m,
    IconContainerComponent: b,
    max: h,
    precision: T,
    readOnly: O,
    size: S
  }), Y = cR(ve);
  return /* @__PURE__ */ Ce(uR, u({
    ref: se,
    onMouseMove: ue,
    onMouseLeave: Z,
    className: D(Y.root, s, O && "MuiRating-readOnly"),
    ownerState: ve,
    role: O ? "img" : null,
    "aria-label": O ? d(V) : null
  }, w, {
    children: [Array.from(new Array(h)).map((re, X) => {
      const Ee = X + 1, be = {
        classes: Y,
        disabled: i,
        emptyIcon: l,
        focus: B,
        getLabelText: d,
        highlightSelectedOnly: p,
        hover: A,
        icon: m,
        IconContainerComponent: b,
        name: E,
        onBlur: Oe,
        onChange: he,
        onClick: q,
        onFocus: le,
        ratingValue: V,
        ratingValueRounded: I,
        readOnly: O,
        ownerState: ve
      }, De = Ee === Math.ceil(V) && (A !== -1 || B !== -1);
      if (T < 1) {
        const Ie = Array.from(new Array(1 / T));
        return /* @__PURE__ */ x(pR, {
          className: D(Y.decimal, De && Y.iconActive),
          ownerState: ve,
          iconActive: De,
          children: Ie.map((Se, Me) => {
            const Fe = Vs(Ee - 1 + (Me + 1) * T, T);
            return /* @__PURE__ */ x(pa, u({}, be, {
              // The icon is already displayed as active
              isActive: !1,
              itemValue: Fe,
              labelProps: {
                style: Ie.length - 1 === Me ? {} : {
                  width: Fe === V ? `${(Me + 1) * T * 100}%` : "0%",
                  overflow: "hidden",
                  position: "absolute"
                }
              }
            }), Fe);
          })
        }, Ee);
      }
      return /* @__PURE__ */ x(pa, u({}, be, {
        isActive: De,
        itemValue: Ee
      }), Ee);
    }), !O && !i && /* @__PURE__ */ Ce(Jd, {
      className: D(Y.label, Y.labelEmptyValue),
      ownerState: ve,
      children: [/* @__PURE__ */ x("input", {
        className: Y.visuallyHidden,
        value: "",
        id: `${E}-empty`,
        type: "radio",
        name: E,
        checked: I == null,
        onFocus: () => me(!0),
        onBlur: () => me(!1),
        onChange: he
      }), /* @__PURE__ */ x("span", {
        className: Y.visuallyHidden,
        children: c
      })]
    })]
  }));
});
process.env.NODE_ENV !== "production" && (tp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The default value. Use when the component is not controlled.
   * @default null
   */
  defaultValue: t.number,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * The icon to display when empty.
   * @default <StarBorder fontSize="inherit" />
   */
  emptyIcon: t.node,
  /**
   * The label read when the rating input is empty.
   * @default 'Empty'
   */
  emptyLabelText: t.node,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.
   * This is important for screen reader users.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @param {number} value The rating label's value to format.
   * @returns {string}
   * @default function defaultLabelText(value) {
   *   return `${value} Star${value !== 1 ? 's' : ''}`;
   * }
   */
  getLabelText: t.func,
  /**
   * If `true`, only the selected icon will be highlighted.
   * @default false
   */
  highlightSelectedOnly: t.bool,
  /**
   * The icon to display.
   * @default <Star fontSize="inherit" />
   */
  icon: t.node,
  /**
   * The component containing the icon.
   * @default function IconContainer(props) {
   *   const { value, ...other } = props;
   *   return <span {...other} />;
   * }
   */
  IconContainerComponent: t.elementType,
  /**
   * Maximum rating.
   * @default 5
   */
  max: t.number,
  /**
   * The name attribute of the radio `input` elements.
   * This input `name` should be unique within the page.
   * Being unique within a form is insufficient since the `name` is used to generated IDs.
   */
  name: t.string,
  /**
   * Callback fired when the value changes.
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {number|null} value The new value.
   */
  onChange: t.func,
  /**
   * Callback function that is fired when the hover state changes.
   * @param {React.SyntheticEvent} event The event source of the callback.
   * @param {number} value The new value.
   */
  onChangeActive: t.func,
  /**
   * @ignore
   */
  onMouseLeave: t.func,
  /**
   * @ignore
   */
  onMouseMove: t.func,
  /**
   * The minimum increment value change allowed.
   * @default 1
   */
  precision: ut(t.number, (e) => e.precision < 0.1 ? new Error(["MUI: The prop `precision` should be above 0.1.", "A value below this limit has an imperceptible impact."].join(`
`)) : null),
  /**
   * Removes all hover effects and pointer events.
   * @default false
   */
  readOnly: t.bool,
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The rating value.
   */
  value: t.number
});
const EM = tp;
function gR(e) {
  return ee("MuiScopedCssBaseline", e);
}
const hR = ne("MuiScopedCssBaseline", ["root"]), PM = hR, vR = ["className", "component", "enableColorScheme"], yR = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"]
  }, gR, o);
}, CR = P("div", {
  name: "MuiScopedCssBaseline",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(({
  theme: e,
  ownerState: o
}) => {
  const n = {};
  return o.enableColorScheme && e.colorSchemes && Object.entries(e.colorSchemes).forEach(([r, s]) => {
    var a;
    n[`&${e.getColorSchemeSelector(r).replace(/\s*&/, "")}`] = {
      colorScheme: (a = s.palette) == null ? void 0 : a.mode
    };
  }), u({}, _u(e, o.enableColorScheme), zu(e), {
    "& *, & *::before, & *::after": {
      boxSizing: "inherit"
    },
    "& strong, & b": {
      fontWeight: e.typography.fontWeightBold
    }
  }, n);
}), op = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiScopedCssBaseline"
  }), {
    className: s,
    component: a = "div"
  } = r, i = z(r, vR), l = u({}, r, {
    component: a
  }), c = yR(l);
  return /* @__PURE__ */ x(CR, u({
    as: a,
    className: D(c.root, s),
    ref: n,
    ownerState: l
  }, i));
});
process.env.NODE_ENV !== "production" && (op.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Enable `color-scheme` CSS property to use `theme.palette.mode`.
   * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
   * For browser support, check out https://caniuse.com/?search=color-scheme
   */
  enableColorScheme: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const NM = op;
function xR(e) {
  return ee("MuiSelect", e);
}
const TR = ne("MuiSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]), _n = TR;
var $l;
const OR = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "error", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"], $R = P("div", {
  name: "MuiSelect",
  slot: "Select",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [
      // Win specificity over the input base
      {
        [`&.${_n.select}`]: o.select
      },
      {
        [`&.${_n.select}`]: o[n.variant]
      },
      {
        [`&.${_n.error}`]: o.error
      },
      {
        [`&.${_n.multiple}`]: o.multiple
      }
    ];
  }
})(_d, {
  // Win specificity over the input base
  [`&.${_n.select}`]: {
    height: "auto",
    // Resets for multiple select with chips
    minHeight: "1.4375em",
    // Required for select\text-field height consistency
    textOverflow: "ellipsis",
    whiteSpace: "nowrap",
    overflow: "hidden"
  }
}), SR = P("svg", {
  name: "MuiSelect",
  slot: "Icon",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.icon, n.variant && o[`icon${k(n.variant)}`], n.open && o.iconOpen];
  }
})(zd), RR = P("input", {
  shouldForwardProp: (e) => pr(e) && e !== "classes",
  name: "MuiSelect",
  slot: "NativeInput",
  overridesResolver: (e, o) => o.nativeInput
})({
  bottom: 0,
  left: 0,
  position: "absolute",
  opacity: 0,
  pointerEvents: "none",
  width: "100%",
  boxSizing: "border-box"
});
function Sl(e, o) {
  return typeof o == "object" && o !== null ? e === o : String(e) === String(o);
}
function wR(e) {
  return e == null || typeof e == "string" && !e.trim();
}
const ER = (e) => {
  const {
    classes: o,
    variant: n,
    disabled: r,
    multiple: s,
    open: a,
    error: i
  } = e, l = {
    select: ["select", n, r && "disabled", s && "multiple", i && "error"],
    icon: ["icon", `icon${k(n)}`, a && "iconOpen", r && "disabled"],
    nativeInput: ["nativeInput"]
  };
  return te(l, xR, o);
}, np = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r;
  const {
    "aria-describedby": s,
    "aria-label": a,
    autoFocus: i,
    autoWidth: l,
    children: c,
    className: d,
    defaultOpen: p,
    defaultValue: m,
    disabled: b,
    displayEmpty: h,
    error: v = !1,
    IconComponent: C,
    inputRef: g,
    labelId: y,
    MenuProps: $ = {},
    multiple: T,
    name: O,
    onBlur: S,
    onChange: R,
    onClose: w,
    onFocus: E,
    onOpen: N,
    open: M,
    readOnly: I,
    renderValue: F,
    SelectDisplayProps: A = {},
    tabIndex: B,
    value: j,
    variant: V = "standard"
  } = o, U = z(o, OR), [_, W] = Dt({
    controlled: j,
    default: m,
    name: "Select"
  }), [de, Te] = Dt({
    controlled: M,
    default: p,
    name: "Select"
  }), $e = f.useRef(null), ie = f.useRef(null), [se, ue] = f.useState(null), {
    current: Z
  } = f.useRef(M != null), [he, q] = f.useState(), le = Ve(n, g), Oe = f.useCallback((ge) => {
    ie.current = ge, ge && ue(ge);
  }, []), fe = se == null ? void 0 : se.parentNode;
  f.useImperativeHandle(le, () => ({
    focus: () => {
      ie.current.focus();
    },
    node: $e.current,
    value: _
  }), [_]), f.useEffect(() => {
    p && de && se && !Z && (q(l ? null : fe.clientWidth), ie.current.focus());
  }, [se, l]), f.useEffect(() => {
    i && ie.current.focus();
  }, [i]), f.useEffect(() => {
    if (!y)
      return;
    const ge = Xe(ie.current).getElementById(y);
    if (ge) {
      const Q = () => {
        getSelection().isCollapsed && ie.current.focus();
      };
      return ge.addEventListener("click", Q), () => {
        ge.removeEventListener("click", Q);
      };
    }
  }, [y]);
  const me = (ge, Q) => {
    ge ? N && N(Q) : w && w(Q), Z || (q(l ? null : fe.clientWidth), Te(ge));
  }, ve = (ge) => {
    ge.button === 0 && (ge.preventDefault(), ie.current.focus(), me(!0, ge));
  }, Y = (ge) => {
    me(!1, ge);
  }, re = f.Children.toArray(c), X = (ge) => {
    const Q = re.find((ce) => ce.props.value === ge.target.value);
    Q !== void 0 && (W(Q.props.value), R && R(ge, Q));
  }, Ee = (ge) => (Q) => {
    let ce;
    if (Q.currentTarget.hasAttribute("tabindex")) {
      if (T) {
        ce = Array.isArray(_) ? _.slice() : [];
        const xe = _.indexOf(ge.props.value);
        xe === -1 ? ce.push(ge.props.value) : ce.splice(xe, 1);
      } else
        ce = ge.props.value;
      if (ge.props.onClick && ge.props.onClick(Q), _ !== ce && (W(ce), R)) {
        const xe = Q.nativeEvent || Q, ke = new xe.constructor(xe.type, xe);
        Object.defineProperty(ke, "target", {
          writable: !0,
          value: {
            value: ce,
            name: O
          }
        }), R(ke, ge);
      }
      T || me(!1, Q);
    }
  }, be = (ge) => {
    I || [
      " ",
      "ArrowUp",
      "ArrowDown",
      // The native select doesn't respond to enter on macOS, but it's recommended by
      // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
      "Enter"
    ].indexOf(ge.key) !== -1 && (ge.preventDefault(), me(!0, ge));
  }, De = se !== null && de, Ie = (ge) => {
    !De && S && (Object.defineProperty(ge, "target", {
      writable: !0,
      value: {
        value: _,
        name: O
      }
    }), S(ge));
  };
  delete U["aria-invalid"];
  let Se, Me;
  const Fe = [];
  let Ae = !1, Ye = !1;
  (ns({
    value: _
  }) || h) && (F ? Se = F(_) : Ae = !0);
  const et = re.map((ge) => {
    if (!/* @__PURE__ */ f.isValidElement(ge))
      return null;
    process.env.NODE_ENV !== "production" && to.isFragment(ge) && console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`));
    let Q;
    if (T) {
      if (!Array.isArray(_))
        throw new Error(process.env.NODE_ENV !== "production" ? "MUI: The `value` prop must be an array when using the `Select` component with `multiple`." : ic(2));
      Q = _.some((ce) => Sl(ce, ge.props.value)), Q && Ae && Fe.push(ge.props.children);
    } else
      Q = Sl(_, ge.props.value), Q && Ae && (Me = ge.props.children);
    return Q && (Ye = !0), /* @__PURE__ */ f.cloneElement(ge, {
      "aria-selected": Q ? "true" : "false",
      onClick: Ee(ge),
      onKeyUp: (ce) => {
        ce.key === " " && ce.preventDefault(), ge.props.onKeyUp && ge.props.onKeyUp(ce);
      },
      role: "option",
      selected: Q,
      value: void 0,
      // The value is most likely not a valid HTML attribute.
      "data-value": ge.props.value
      // Instead, we provide it as a data attribute.
    });
  });
  process.env.NODE_ENV !== "production" && f.useEffect(() => {
    if (!Ye && !T && _ !== "") {
      const ge = re.map((Q) => Q.props.value);
      console.warn([`MUI: You have provided an out-of-range value \`${_}\` for the select ${O ? `(name="${O}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${ge.filter((Q) => Q != null).map((Q) => `\`${Q}\``).join(", ") || '""'}.`].join(`
`));
    }
  }, [Ye, re, T, O, _]), Ae && (T ? Fe.length === 0 ? Se = null : Se = Fe.reduce((ge, Q, ce) => (ge.push(Q), ce < Fe.length - 1 && ge.push(", "), ge), []) : Se = Me);
  let tt = he;
  !l && Z && se && (tt = fe.clientWidth);
  let G;
  typeof B < "u" ? G = B : G = b ? null : 0;
  const H = A.id || (O ? `mui-component-select-${O}` : void 0), pe = u({}, o, {
    variant: V,
    value: _,
    open: De,
    error: v
  }), Ne = ER(pe), Le = u({}, $.PaperProps, (r = $.slotProps) == null ? void 0 : r.paper), Re = mo();
  return /* @__PURE__ */ Ce(f.Fragment, {
    children: [/* @__PURE__ */ x($R, u({
      ref: Oe,
      tabIndex: G,
      role: "combobox",
      "aria-controls": Re,
      "aria-disabled": b ? "true" : void 0,
      "aria-expanded": De ? "true" : "false",
      "aria-haspopup": "listbox",
      "aria-label": a,
      "aria-labelledby": [y, H].filter(Boolean).join(" ") || void 0,
      "aria-describedby": s,
      onKeyDown: be,
      onMouseDown: b || I ? null : ve,
      onBlur: Ie,
      onFocus: E
    }, A, {
      ownerState: pe,
      className: D(A.className, Ne.select, d),
      id: H,
      children: wR(Se) ? (
        // notranslate needed while Google Translate will not fix zero-width space issue
        $l || ($l = /* @__PURE__ */ x("span", {
          className: "notranslate",
          children: "​"
        }))
      ) : Se
    })), /* @__PURE__ */ x(RR, u({
      "aria-invalid": v,
      value: Array.isArray(_) ? _.join(",") : _,
      name: O,
      ref: $e,
      "aria-hidden": !0,
      onChange: X,
      tabIndex: -1,
      disabled: b,
      className: Ne.nativeInput,
      autoFocus: i,
      ownerState: pe
    }, U)), /* @__PURE__ */ x(SR, {
      as: C,
      className: Ne.icon,
      ownerState: pe
    }), /* @__PURE__ */ x(G1, u({
      id: `menu-${O || ""}`,
      anchorEl: fe,
      open: De,
      onClose: Y,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: "center"
      },
      transformOrigin: {
        vertical: "top",
        horizontal: "center"
      }
    }, $, {
      MenuListProps: u({
        "aria-labelledby": y,
        role: "listbox",
        "aria-multiselectable": T ? "true" : void 0,
        disableListWrap: !0,
        id: Re
      }, $.MenuListProps),
      slotProps: u({}, $.slotProps, {
        paper: u({}, Le, {
          style: u({
            minWidth: tt
          }, Le != null ? Le.style : null)
        })
      }),
      children: et
    }))]
  });
});
process.env.NODE_ENV !== "production" && (np.propTypes = {
  /**
   * @ignore
   */
  "aria-describedby": t.string,
  /**
   * @ignore
   */
  "aria-label": t.string,
  /**
   * @ignore
   */
  autoFocus: t.bool,
  /**
   * If `true`, the width of the popover will automatically be set according to the items inside the
   * menu, otherwise it will be at least the width of the select input.
   */
  autoWidth: t.bool,
  /**
   * The option elements to populate the select with.
   * Can be some `<MenuItem>` elements.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * The CSS class name of the select element.
   */
  className: t.string,
  /**
   * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
   * You can only use it when the `native` prop is `false` (default).
   */
  defaultOpen: t.bool,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * If `true`, the select is disabled.
   */
  disabled: t.bool,
  /**
   * If `true`, the selected item is displayed even if its value is empty.
   */
  displayEmpty: t.bool,
  /**
   * If `true`, the `select input` will indicate an error.
   */
  error: t.bool,
  /**
   * The icon that displays the arrow.
   */
  IconComponent: t.elementType.isRequired,
  /**
   * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
   * Equivalent to `ref`
   */
  inputRef: yt,
  /**
   * The ID of an element that acts as an additional label. The Select will
   * be labelled by the additional label and the selected value.
   */
  labelId: t.string,
  /**
   * Props applied to the [`Menu`](/material-ui/api/menu/) element.
   */
  MenuProps: t.object,
  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   */
  multiple: t.bool,
  /**
   * Name attribute of the `select` or hidden `input` element.
   */
  name: t.string,
  /**
   * @ignore
   */
  onBlur: t.func,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * @param {object} [child] The react element that was selected.
   */
  onChange: t.func,
  /**
   * Callback fired when the component requests to be closed.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */
  onClose: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * Callback fired when the component requests to be opened.
   * Use in controlled mode (see open).
   *
   * @param {object} event The event source of the callback.
   */
  onOpen: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool,
  /**
   * @ignore
   */
  readOnly: t.bool,
  /**
   * Render the selected value.
   *
   * @param {any} value The `value` provided to the component.
   * @returns {ReactNode}
   */
  renderValue: t.func,
  /**
   * Props applied to the clickable div element.
   */
  SelectDisplayProps: t.object,
  /**
   * @ignore
   */
  tabIndex: t.oneOfType([t.number, t.string]),
  /**
   * @ignore
   */
  type: t.any,
  /**
   * The input value.
   */
  value: t.any,
  /**
   * The variant to use.
   */
  variant: t.oneOf(["standard", "outlined", "filled"])
});
const PR = np, NR = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"], IR = ["root"], kR = (e) => {
  const {
    classes: o
  } = e;
  return o;
}, Xa = {
  name: "MuiSelect",
  overridesResolver: (e, o) => o.root,
  shouldForwardProp: (e) => dt(e) && e !== "variant",
  slot: "Root"
}, MR = P(Ua, Xa)(""), BR = P(Hd, Xa)(""), LR = P(rd, Xa)(""), Qa = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    name: "MuiSelect",
    props: o
  }), {
    autoWidth: s = !1,
    children: a,
    classes: i = {},
    className: l,
    defaultOpen: c = !1,
    displayEmpty: d = !1,
    IconComponent: p = La,
    id: m,
    input: b,
    inputProps: h,
    label: v,
    labelId: C,
    MenuProps: g,
    multiple: y = !1,
    native: $ = !1,
    onClose: T,
    onOpen: O,
    open: S,
    renderValue: R,
    SelectDisplayProps: w,
    variant: E = "outlined"
  } = r, N = z(r, NR), M = $ ? Ud : PR, I = oo(), F = $o({
    props: r,
    muiFormControl: I,
    states: ["variant", "error"]
  }), A = F.variant || E, B = u({}, r, {
    variant: A,
    classes: i
  }), j = kR(B), V = z(j, IR), U = b || {
    standard: /* @__PURE__ */ x(MR, {
      ownerState: B
    }),
    outlined: /* @__PURE__ */ x(BR, {
      label: v,
      ownerState: B
    }),
    filled: /* @__PURE__ */ x(LR, {
      ownerState: B
    })
  }[A], _ = Ve(n, U.ref);
  return /* @__PURE__ */ x(f.Fragment, {
    children: /* @__PURE__ */ f.cloneElement(U, u({
      // Most of the logic is implemented in `SelectInput`.
      // The `Select` component is a simple API wrapper to expose something better to play with.
      inputComponent: M,
      inputProps: u({
        children: a,
        error: F.error,
        IconComponent: p,
        variant: A,
        type: void 0,
        // We render a select. We can ignore the type provided by the `Input`.
        multiple: y
      }, $ ? {
        id: m
      } : {
        autoWidth: s,
        defaultOpen: c,
        displayEmpty: d,
        labelId: C,
        MenuProps: g,
        onClose: T,
        onOpen: O,
        open: S,
        renderValue: R,
        SelectDisplayProps: u({
          id: m
        }, w)
      }, h, {
        classes: h ? ds(V, h.classes) : V
      }, b ? b.props.inputProps : {})
    }, (y && $ || d) && A === "outlined" ? {
      notched: !0
    } : {}, {
      ref: _,
      className: D(U.props.className, l, j.root)
    }, !b && {
      variant: A
    }, N))
  });
});
process.env.NODE_ENV !== "production" && (Qa.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the width of the popover will automatically be set according to the items inside the
   * menu, otherwise it will be at least the width of the select input.
   * @default false
   */
  autoWidth: t.bool,
  /**
   * The option elements to populate the select with.
   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
   *
   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   * @default {}
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
   * You can only use it when the `native` prop is `false` (default).
   * @default false
   */
  defaultOpen: t.bool,
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * If `true`, a value is displayed even if no items are selected.
   *
   * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
   * returns the value to be displayed when no items are selected.
   *
   * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
   * The label should either be hidden or forced to a shrunk state.
   * @default false
   */
  displayEmpty: t.bool,
  /**
   * The icon that displays the arrow.
   * @default ArrowDropDownIcon
   */
  IconComponent: t.elementType,
  /**
   * The `id` of the wrapper element or the `select` element when `native`.
   */
  id: t.string,
  /**
   * An `Input` element; does not have to be a material-ui specific `Input`.
   */
  input: t.element,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   * When `native` is `true`, the attributes are applied on the `select` element.
   */
  inputProps: t.object,
  /**
   * See [OutlinedInput#label](/material-ui/api/outlined-input/#props)
   */
  label: t.node,
  /**
   * The ID of an element that acts as an additional label. The Select will
   * be labelled by the additional label and the selected value.
   */
  labelId: t.string,
  /**
   * Props applied to the [`Menu`](/material-ui/api/menu/) element.
   */
  MenuProps: t.object,
  /**
   * If `true`, `value` must be an array and the menu will support multiple selections.
   * @default false
   */
  multiple: t.bool,
  /**
   * If `true`, the component uses a native `select` element.
   * @default false
   */
  native: t.bool,
  /**
   * Callback fired when a menu item is selected.
   *
   * @param {SelectChangeEvent<Value>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.
   * @param {object} [child] The react element that was selected when `native` is `false` (default).
   */
  onChange: t.func,
  /**
   * Callback fired when the component requests to be closed.
   * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapses).
   *
   * @param {object} event The event source of the callback.
   */
  onClose: t.func,
  /**
   * Callback fired when the component requests to be opened.
   * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).
   *
   * @param {object} event The event source of the callback.
   */
  onOpen: t.func,
  /**
   * If `true`, the component is shown.
   * You can only use it when the `native` prop is `false` (default).
   */
  open: t.bool,
  /**
   * Render the selected value.
   * You can only use it when the `native` prop is `false` (default).
   *
   * @param {any} value The `value` provided to the component.
   * @returns {ReactNode}
   */
  renderValue: t.func,
  /**
   * Props applied to the clickable div element.
   */
  SelectDisplayProps: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The `input` value. Providing an empty string will select no options.
   * Set to an empty string `''` if you don't want any of the available options to be selected.
   *
   * If the value is an object it must have reference equality with the option in order to be selected.
   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
   */
  value: t.oneOfType([t.oneOf([""]), t.any]),
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: t.oneOf(["filled", "outlined", "standard"])
});
Qa.muiName = "Select";
const rp = Qa;
function DR(e) {
  return ee("MuiSkeleton", e);
}
const AR = ne("MuiSkeleton", ["root", "text", "rectangular", "rounded", "circular", "pulse", "wave", "withChildren", "fitContent", "heightAuto"]), IM = AR, FR = ["animation", "className", "component", "height", "style", "variant", "width"];
let is = (e) => e, Rl, wl, El, Pl;
const jR = (e) => {
  const {
    classes: o,
    variant: n,
    animation: r,
    hasChildren: s,
    width: a,
    height: i
  } = e;
  return te({
    root: ["root", n, r, s && "withChildren", s && !a && "fitContent", s && !i && "heightAuto"]
  }, DR, o);
}, _R = go(Rl || (Rl = is`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.4;
  }

  100% {
    opacity: 1;
  }
`)), zR = go(wl || (wl = is`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`)), VR = P("span", {
  name: "MuiSkeleton",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], n.animation !== !1 && o[n.animation], n.hasChildren && o.withChildren, n.hasChildren && !n.width && o.fitContent, n.hasChildren && !n.height && o.heightAuto];
  }
})(({
  theme: e,
  ownerState: o
}) => {
  const n = xf(e.shape.borderRadius) || "px", r = Tf(e.shape.borderRadius);
  return u({
    display: "block",
    // Create a "on paper" color with sufficient contrast retaining the color
    backgroundColor: e.vars ? e.vars.palette.Skeleton.bg : Wn(e.palette.text.primary, e.palette.mode === "light" ? 0.11 : 0.13),
    height: "1.2em"
  }, o.variant === "text" && {
    marginTop: 0,
    marginBottom: 0,
    height: "auto",
    transformOrigin: "0 55%",
    transform: "scale(1, 0.60)",
    borderRadius: `${r}${n}/${Math.round(r / 0.6 * 10) / 10}${n}`,
    "&:empty:before": {
      content: '"\\00a0"'
    }
  }, o.variant === "circular" && {
    borderRadius: "50%"
  }, o.variant === "rounded" && {
    borderRadius: (e.vars || e).shape.borderRadius
  }, o.hasChildren && {
    "& > *": {
      visibility: "hidden"
    }
  }, o.hasChildren && !o.width && {
    maxWidth: "fit-content"
  }, o.hasChildren && !o.height && {
    height: "auto"
  });
}, ({
  ownerState: e
}) => e.animation === "pulse" && sn(El || (El = is`
      animation: ${0} 2s ease-in-out 0.5s infinite;
    `), _R), ({
  ownerState: e,
  theme: o
}) => e.animation === "wave" && sn(Pl || (Pl = is`
      position: relative;
      overflow: hidden;

      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
      -webkit-mask-image: -webkit-radial-gradient(white, black);

      &::after {
        animation: ${0} 2s linear 0.5s infinite;
        background: linear-gradient(
          90deg,
          transparent,
          ${0},
          transparent
        );
        content: '';
        position: absolute;
        transform: translateX(-100%); /* Avoid flash during server-side hydration */
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
      }
    `), zR, (o.vars || o).palette.action.hover)), sp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiSkeleton"
  }), {
    animation: s = "pulse",
    className: a,
    component: i = "span",
    height: l,
    style: c,
    variant: d = "text",
    width: p
  } = r, m = z(r, FR), b = u({}, r, {
    animation: s,
    component: i,
    variant: d,
    hasChildren: !!m.children
  }), h = jR(b);
  return /* @__PURE__ */ x(VR, u({
    as: i,
    ref: n,
    className: D(h.root, a),
    ownerState: b
  }, m, {
    style: u({
      width: p,
      height: l
    }, c)
  }));
});
process.env.NODE_ENV !== "production" && (sp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The animation.
   * If `false` the animation effect is disabled.
   * @default 'pulse'
   */
  animation: t.oneOf(["pulse", "wave", !1]),
  /**
   * Optional children to infer width and height from.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Height of the skeleton.
   * Useful when you don't want to adapt the skeleton to a text element but for instance a card.
   */
  height: t.oneOfType([t.number, t.string]),
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The type of content that will be rendered.
   * @default 'text'
   */
  variant: t.oneOfType([t.oneOf(["circular", "rectangular", "rounded", "text"]), t.string]),
  /**
   * Width of the skeleton.
   * Useful when the skeleton is inside an inline element with no width of its own.
   */
  width: t.oneOfType([t.number, t.string])
});
const kM = sp, UR = (e) => !e || !Jt(e), WR = UR;
function HR(e) {
  return ee("MuiSlider", e);
}
const qR = ne("MuiSlider", ["root", "active", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "disabled", "dragging", "focusVisible", "mark", "markActive", "marked", "markLabel", "markLabelActive", "rail", "sizeSmall", "thumb", "thumbColorPrimary", "thumbColorSecondary", "thumbColorError", "thumbColorSuccess", "thumbColorInfo", "thumbColorWarning", "track", "trackInverted", "trackFalse", "thumbSizeSmall", "valueLabel", "valueLabelOpen", "valueLabelCircle", "valueLabelLabel", "vertical"]), Zt = qR, GR = (e) => {
  const {
    open: o
  } = e;
  return {
    offset: D(o && Zt.valueLabelOpen),
    circle: Zt.valueLabelCircle,
    label: Zt.valueLabelLabel
  };
};
function ap(e) {
  const {
    children: o,
    className: n,
    value: r
  } = e, s = GR(e);
  return o ? /* @__PURE__ */ f.cloneElement(o, {
    className: D(o.props.className)
  }, /* @__PURE__ */ Ce(f.Fragment, {
    children: [o.props.children, /* @__PURE__ */ x("span", {
      className: D(s.offset, n),
      "aria-hidden": !0,
      children: /* @__PURE__ */ x("span", {
        className: s.circle,
        children: /* @__PURE__ */ x("span", {
          className: s.label,
          children: r
        })
      })
    })]
  })) : null;
}
process.env.NODE_ENV !== "production" && (ap.propTypes = {
  children: t.element.isRequired,
  className: t.string,
  value: t.node
});
const KR = ["aria-label", "aria-valuetext", "aria-labelledby", "component", "components", "componentsProps", "color", "classes", "className", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "shiftStep", "size", "step", "scale", "slotProps", "slots", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat"];
function Nl(e) {
  return e;
}
const YR = P("span", {
  name: "MuiSlider",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`color${k(n.color)}`], n.size !== "medium" && o[`size${k(n.size)}`], n.marked && o.marked, n.orientation === "vertical" && o.vertical, n.track === "inverted" && o.trackInverted, n.track === !1 && o.trackFalse];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  borderRadius: 12,
  boxSizing: "content-box",
  display: "inline-block",
  position: "relative",
  cursor: "pointer",
  touchAction: "none",
  color: (e.vars || e).palette[o.color].main,
  WebkitTapHighlightColor: "transparent"
}, o.orientation === "horizontal" && u({
  height: 4,
  width: "100%",
  padding: "13px 0",
  // The primary input mechanism of the device includes a pointing device of limited accuracy.
  "@media (pointer: coarse)": {
    // Reach 42px touch target, about ~8mm on screen.
    padding: "20px 0"
  }
}, o.size === "small" && {
  height: 2
}, o.marked && {
  marginBottom: 20
}), o.orientation === "vertical" && u({
  height: "100%",
  width: 4,
  padding: "0 13px",
  // The primary input mechanism of the device includes a pointing device of limited accuracy.
  "@media (pointer: coarse)": {
    // Reach 42px touch target, about ~8mm on screen.
    padding: "0 20px"
  }
}, o.size === "small" && {
  width: 2
}, o.marked && {
  marginRight: 44
}), {
  "@media print": {
    colorAdjust: "exact"
  },
  [`&.${Zt.disabled}`]: {
    pointerEvents: "none",
    cursor: "default",
    color: (e.vars || e).palette.grey[400]
  },
  [`&.${Zt.dragging}`]: {
    [`& .${Zt.thumb}, & .${Zt.track}`]: {
      transition: "none"
    }
  }
})), XR = P("span", {
  name: "MuiSlider",
  slot: "Rail",
  overridesResolver: (e, o) => o.rail
})(({
  ownerState: e
}) => u({
  display: "block",
  position: "absolute",
  borderRadius: "inherit",
  backgroundColor: "currentColor",
  opacity: 0.38
}, e.orientation === "horizontal" && {
  width: "100%",
  height: "inherit",
  top: "50%",
  transform: "translateY(-50%)"
}, e.orientation === "vertical" && {
  height: "100%",
  width: "inherit",
  left: "50%",
  transform: "translateX(-50%)"
}, e.track === "inverted" && {
  opacity: 1
})), QR = P("span", {
  name: "MuiSlider",
  slot: "Track",
  overridesResolver: (e, o) => o.track
})(({
  theme: e,
  ownerState: o
}) => {
  const n = (
    // Same logic as the LinearProgress track color
    e.palette.mode === "light" ? ps(e.palette[o.color].main, 0.62) : fs(e.palette[o.color].main, 0.5)
  );
  return u({
    display: "block",
    position: "absolute",
    borderRadius: "inherit",
    border: "1px solid currentColor",
    backgroundColor: "currentColor",
    transition: e.transitions.create(["left", "width", "bottom", "height"], {
      duration: e.transitions.duration.shortest
    })
  }, o.size === "small" && {
    border: "none"
  }, o.orientation === "horizontal" && {
    height: "inherit",
    top: "50%",
    transform: "translateY(-50%)"
  }, o.orientation === "vertical" && {
    width: "inherit",
    left: "50%",
    transform: "translateX(-50%)"
  }, o.track === !1 && {
    display: "none"
  }, o.track === "inverted" && {
    backgroundColor: e.vars ? e.vars.palette.Slider[`${o.color}Track`] : n,
    borderColor: e.vars ? e.vars.palette.Slider[`${o.color}Track`] : n
  });
}), ZR = P("span", {
  name: "MuiSlider",
  slot: "Thumb",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.thumb, o[`thumbColor${k(n.color)}`], n.size !== "medium" && o[`thumbSize${k(n.size)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  position: "absolute",
  width: 20,
  height: 20,
  boxSizing: "border-box",
  borderRadius: "50%",
  outline: 0,
  backgroundColor: "currentColor",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  transition: e.transitions.create(["box-shadow", "left", "bottom"], {
    duration: e.transitions.duration.shortest
  })
}, o.size === "small" && {
  width: 12,
  height: 12
}, o.orientation === "horizontal" && {
  top: "50%",
  transform: "translate(-50%, -50%)"
}, o.orientation === "vertical" && {
  left: "50%",
  transform: "translate(-50%, 50%)"
}, {
  "&::before": u({
    position: "absolute",
    content: '""',
    borderRadius: "inherit",
    width: "100%",
    height: "100%",
    boxShadow: (e.vars || e).shadows[2]
  }, o.size === "small" && {
    boxShadow: "none"
  }),
  "&::after": {
    position: "absolute",
    content: '""',
    borderRadius: "50%",
    // 42px is the hit target
    width: 42,
    height: 42,
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)"
  },
  [`&:hover, &.${Zt.focusVisible}`]: {
    boxShadow: `0px 0px 0px 8px ${e.vars ? `rgba(${e.vars.palette[o.color].mainChannel} / 0.16)` : Pe(e.palette[o.color].main, 0.16)}`,
    "@media (hover: none)": {
      boxShadow: "none"
    }
  },
  [`&.${Zt.active}`]: {
    boxShadow: `0px 0px 0px 14px ${e.vars ? `rgba(${e.vars.palette[o.color].mainChannel} / 0.16)` : Pe(e.palette[o.color].main, 0.16)}`
  },
  [`&.${Zt.disabled}`]: {
    "&:hover": {
      boxShadow: "none"
    }
  }
})), JR = P(ap, {
  name: "MuiSlider",
  slot: "ValueLabel",
  overridesResolver: (e, o) => o.valueLabel
})(({
  theme: e,
  ownerState: o
}) => u({
  [`&.${Zt.valueLabelOpen}`]: {
    transform: `${o.orientation === "vertical" ? "translateY(-50%)" : "translateY(-100%)"} scale(1)`
  },
  zIndex: 1,
  whiteSpace: "nowrap"
}, e.typography.body2, {
  fontWeight: 500,
  transition: e.transitions.create(["transform"], {
    duration: e.transitions.duration.shortest
  }),
  transform: `${o.orientation === "vertical" ? "translateY(-50%)" : "translateY(-100%)"} scale(0)`,
  position: "absolute",
  backgroundColor: (e.vars || e).palette.grey[600],
  borderRadius: 2,
  color: (e.vars || e).palette.common.white,
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  padding: "0.25rem 0.75rem"
}, o.orientation === "horizontal" && {
  top: "-10px",
  transformOrigin: "bottom center",
  "&::before": {
    position: "absolute",
    content: '""',
    width: 8,
    height: 8,
    transform: "translate(-50%, 50%) rotate(45deg)",
    backgroundColor: "inherit",
    bottom: 0,
    left: "50%"
  }
}, o.orientation === "vertical" && {
  right: o.size === "small" ? "20px" : "30px",
  top: "50%",
  transformOrigin: "right center",
  "&::before": {
    position: "absolute",
    content: '""',
    width: 8,
    height: 8,
    transform: "translate(-50%, -50%) rotate(45deg)",
    backgroundColor: "inherit",
    right: -8,
    top: "50%"
  }
}, o.size === "small" && {
  fontSize: e.typography.pxToRem(12),
  padding: "0.25rem 0.5rem"
})), ew = P("span", {
  name: "MuiSlider",
  slot: "Mark",
  shouldForwardProp: (e) => pr(e) && e !== "markActive",
  overridesResolver: (e, o) => {
    const {
      markActive: n
    } = e;
    return [o.mark, n && o.markActive];
  }
})(({
  theme: e,
  ownerState: o,
  markActive: n
}) => u({
  position: "absolute",
  width: 2,
  height: 2,
  borderRadius: 1,
  backgroundColor: "currentColor"
}, o.orientation === "horizontal" && {
  top: "50%",
  transform: "translate(-1px, -50%)"
}, o.orientation === "vertical" && {
  left: "50%",
  transform: "translate(-50%, 1px)"
}, n && {
  backgroundColor: (e.vars || e).palette.background.paper,
  opacity: 0.8
})), tw = P("span", {
  name: "MuiSlider",
  slot: "MarkLabel",
  shouldForwardProp: (e) => pr(e) && e !== "markLabelActive",
  overridesResolver: (e, o) => o.markLabel
})(({
  theme: e,
  ownerState: o,
  markLabelActive: n
}) => u({}, e.typography.body2, {
  color: (e.vars || e).palette.text.secondary,
  position: "absolute",
  whiteSpace: "nowrap"
}, o.orientation === "horizontal" && {
  top: 30,
  transform: "translateX(-50%)",
  "@media (pointer: coarse)": {
    top: 40
  }
}, o.orientation === "vertical" && {
  left: 36,
  transform: "translateY(50%)",
  "@media (pointer: coarse)": {
    left: 44
  }
}, n && {
  color: (e.vars || e).palette.text.primary
})), ow = (e) => {
  const {
    disabled: o,
    dragging: n,
    marked: r,
    orientation: s,
    track: a,
    classes: i,
    color: l,
    size: c
  } = e, d = {
    root: ["root", o && "disabled", n && "dragging", r && "marked", s === "vertical" && "vertical", a === "inverted" && "trackInverted", a === !1 && "trackFalse", l && `color${k(l)}`, c && `size${k(c)}`],
    rail: ["rail"],
    track: ["track"],
    mark: ["mark"],
    markActive: ["markActive"],
    markLabel: ["markLabel"],
    markLabelActive: ["markLabelActive"],
    valueLabel: ["valueLabel"],
    thumb: ["thumb", o && "disabled", c && `thumbSize${k(c)}`, l && `thumbColor${k(l)}`],
    active: ["active"],
    disabled: ["disabled"],
    focusVisible: ["focusVisible"]
  };
  return te(d, HR, i);
}, nw = ({
  children: e
}) => e, ip = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s, a, i, l, c, d, p, m, b, h, v, C, g, y, $, T, O, S, R, w, E, N, M;
  const I = oe({
    props: o,
    name: "MuiSlider"
  }), A = rt().direction === "rtl", {
    "aria-label": B,
    "aria-valuetext": j,
    "aria-labelledby": V,
    // eslint-disable-next-line react/prop-types
    component: U = "span",
    components: _ = {},
    componentsProps: W = {},
    color: de = "primary",
    classes: Te,
    className: $e,
    disableSwap: ie = !1,
    disabled: se = !1,
    getAriaLabel: ue,
    getAriaValueText: Z,
    marks: he = !1,
    max: q = 100,
    min: le = 0,
    orientation: Oe = "horizontal",
    shiftStep: fe = 10,
    size: me = "medium",
    step: ve = 1,
    scale: Y = Nl,
    slotProps: re,
    slots: X,
    track: Ee = "normal",
    valueLabelDisplay: be = "off",
    valueLabelFormat: De = Nl
  } = I, Ie = z(I, KR), Se = u({}, I, {
    isRtl: A,
    max: q,
    min: le,
    classes: Te,
    disabled: se,
    disableSwap: ie,
    orientation: Oe,
    marks: he,
    color: de,
    size: me,
    step: ve,
    shiftStep: fe,
    scale: Y,
    track: Ee,
    valueLabelDisplay: be,
    valueLabelFormat: De
  }), {
    axisProps: Me,
    getRootProps: Fe,
    getHiddenInputProps: Ae,
    getThumbProps: Ye,
    open: et,
    active: tt,
    axis: G,
    focusedThumbIndex: H,
    range: pe,
    dragging: Ne,
    marks: Le,
    values: Re,
    trackOffset: ge,
    trackLeap: Q,
    getThumbStyle: ce
  } = av(u({}, Se, {
    rootRef: n
  }));
  Se.marked = Le.length > 0 && Le.some((L) => L.label), Se.dragging = Ne, Se.focusedThumbIndex = H;
  const xe = ow(Se), ke = (r = (s = X == null ? void 0 : X.root) != null ? s : _.Root) != null ? r : YR, je = (a = (i = X == null ? void 0 : X.rail) != null ? i : _.Rail) != null ? a : XR, qe = (l = (c = X == null ? void 0 : X.track) != null ? c : _.Track) != null ? l : QR, Qe = (d = (p = X == null ? void 0 : X.thumb) != null ? p : _.Thumb) != null ? d : ZR, ft = (m = (b = X == null ? void 0 : X.valueLabel) != null ? b : _.ValueLabel) != null ? m : JR, st = (h = (v = X == null ? void 0 : X.mark) != null ? v : _.Mark) != null ? h : ew, Tt = (C = (g = X == null ? void 0 : X.markLabel) != null ? g : _.MarkLabel) != null ? C : tw, no = (y = ($ = X == null ? void 0 : X.input) != null ? $ : _.Input) != null ? y : "input", ro = (T = re == null ? void 0 : re.root) != null ? T : W.root, Vo = (O = re == null ? void 0 : re.rail) != null ? O : W.rail, So = (S = re == null ? void 0 : re.track) != null ? S : W.track, wt = (R = re == null ? void 0 : re.thumb) != null ? R : W.thumb, it = (w = re == null ? void 0 : re.valueLabel) != null ? w : W.valueLabel, Ze = (E = re == null ? void 0 : re.mark) != null ? E : W.mark, gt = (N = re == null ? void 0 : re.markLabel) != null ? N : W.markLabel, ht = (M = re == null ? void 0 : re.input) != null ? M : W.input, Kt = at({
    elementType: ke,
    getSlotProps: Fe,
    externalSlotProps: ro,
    externalForwardedProps: Ie,
    additionalProps: u({}, WR(ke) && {
      as: U
    }),
    ownerState: u({}, Se, ro == null ? void 0 : ro.ownerState),
    className: [xe.root, $e]
  }), Uo = at({
    elementType: je,
    externalSlotProps: Vo,
    ownerState: Se,
    className: xe.rail
  }), Yt = at({
    elementType: qe,
    externalSlotProps: So,
    additionalProps: {
      style: u({}, Me[G].offset(ge), Me[G].leap(Q))
    },
    ownerState: u({}, Se, So == null ? void 0 : So.ownerState),
    className: xe.track
  }), Ft = at({
    elementType: Qe,
    getSlotProps: Ye,
    externalSlotProps: wt,
    ownerState: u({}, Se, wt == null ? void 0 : wt.ownerState),
    className: xe.thumb
  }), so = at({
    elementType: ft,
    externalSlotProps: it,
    ownerState: u({}, Se, it == null ? void 0 : it.ownerState),
    className: xe.valueLabel
  }), Et = at({
    elementType: st,
    externalSlotProps: Ze,
    ownerState: Se,
    className: xe.mark
  }), It = at({
    elementType: Tt,
    externalSlotProps: gt,
    ownerState: Se,
    className: xe.markLabel
  }), K = at({
    elementType: no,
    getSlotProps: Ae,
    externalSlotProps: ht,
    ownerState: Se
  });
  return /* @__PURE__ */ Ce(ke, u({}, Kt, {
    children: [/* @__PURE__ */ x(je, u({}, Uo)), /* @__PURE__ */ x(qe, u({}, Yt)), Le.filter((L) => L.value >= le && L.value <= q).map((L, ae) => {
      const we = os(L.value, le, q), _e = Me[G].offset(we);
      let ye;
      return Ee === !1 ? ye = Re.indexOf(L.value) !== -1 : ye = Ee === "normal" && (pe ? L.value >= Re[0] && L.value <= Re[Re.length - 1] : L.value <= Re[0]) || Ee === "inverted" && (pe ? L.value <= Re[0] || L.value >= Re[Re.length - 1] : L.value >= Re[0]), /* @__PURE__ */ Ce(f.Fragment, {
        children: [/* @__PURE__ */ x(st, u({
          "data-index": ae
        }, Et, !Jt(st) && {
          markActive: ye
        }, {
          style: u({}, _e, Et.style),
          className: D(Et.className, ye && xe.markActive)
        })), L.label != null ? /* @__PURE__ */ x(Tt, u({
          "aria-hidden": !0,
          "data-index": ae
        }, It, !Jt(Tt) && {
          markLabelActive: ye
        }, {
          style: u({}, _e, It.style),
          className: D(xe.markLabel, It.className, ye && xe.markLabelActive),
          children: L.label
        })) : null]
      }, ae);
    }), Re.map((L, ae) => {
      const we = os(L, le, q), _e = Me[G].offset(we), ye = be === "off" ? nw : ft;
      return (
        /* TODO v6: Change component structure. It will help in avoiding the complicated React.cloneElement API added in SliderValueLabel component. Should be: Thumb -> Input, ValueLabel. Follow Joy UI's Slider structure. */
        /* @__PURE__ */ x(ye, u({}, !Jt(ye) && {
          valueLabelFormat: De,
          valueLabelDisplay: be,
          value: typeof De == "function" ? De(Y(L), ae) : De,
          index: ae,
          open: et === ae || tt === ae || be === "on",
          disabled: se
        }, so, {
          children: /* @__PURE__ */ x(Qe, u({
            "data-index": ae
          }, Ft, {
            className: D(xe.thumb, Ft.className, tt === ae && xe.active, H === ae && xe.focusVisible),
            style: u({}, _e, ce(ae), Ft.style),
            children: /* @__PURE__ */ x(no, u({
              "data-index": ae,
              "aria-label": ue ? ue(ae) : B,
              "aria-valuenow": Y(L),
              "aria-labelledby": V,
              "aria-valuetext": Z ? Z(Y(L), ae) : j,
              value: Re[ae]
            }, K))
          }))
        }), ae)
      );
    })]
  }));
});
process.env.NODE_ENV !== "production" && (ip.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The label of the slider.
   */
  "aria-label": ut(t.string, (e) => Array.isArray(e.value || e.defaultValue) && e["aria-label"] != null ? new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.") : null),
  /**
   * The id of the element containing a label for the slider.
   */
  "aria-labelledby": t.string,
  /**
   * A string value that provides a user-friendly name for the current value of the slider.
   */
  "aria-valuetext": ut(t.string, (e) => Array.isArray(e.value || e.defaultValue) && e["aria-valuetext"] != null ? new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.") : null),
  /**
   * @ignore
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: t.shape({
    Input: t.elementType,
    Mark: t.elementType,
    MarkLabel: t.elementType,
    Rail: t.elementType,
    Root: t.elementType,
    Thumb: t.elementType,
    Track: t.elementType,
    ValueLabel: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: t.shape({
    input: t.oneOfType([t.func, t.object]),
    mark: t.oneOfType([t.func, t.object]),
    markLabel: t.oneOfType([t.func, t.object]),
    rail: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object]),
    thumb: t.oneOfType([t.func, t.object]),
    track: t.oneOfType([t.func, t.object]),
    valueLabel: t.oneOfType([t.func, t.shape({
      children: t.element,
      className: t.string,
      open: t.bool,
      style: t.object,
      value: t.number,
      valueLabelDisplay: t.oneOf(["auto", "off", "on"])
    })])
  }),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.oneOfType([t.arrayOf(t.number), t.number]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
   * @default false
   */
  disableSwap: t.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
   * This is important for screen reader users.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */
  getAriaLabel: t.func,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
   * This is important for screen reader users.
   * @param {number} value The thumb label's value to format.
   * @param {number} index The thumb label's index to format.
   * @returns {string}
   */
  getAriaValueText: t.func,
  /**
   * Marks indicate predetermined values to which the user can move the slider.
   * If `true` the marks are spaced according the value of the `step` prop.
   * If an array, it should contain objects with `value` and an optional `label` keys.
   * @default false
   */
  marks: t.oneOfType([t.arrayOf(t.shape({
    label: t.node,
    value: t.number.isRequired
  })), t.bool]),
  /**
   * The maximum allowed value of the slider.
   * Should not be equal to min.
   * @default 100
   */
  max: t.number,
  /**
   * The minimum allowed value of the slider.
   * Should not be equal to max.
   * @default 0
   */
  min: t.number,
  /**
   * Name attribute of the hidden `input` element.
   */
  name: t.string,
  /**
   * Callback function that is fired when the slider's value changed.
   *
   * @param {Event} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (any).
   * **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   * @param {number} activeThumb Index of the currently moved thumb.
   */
  onChange: t.func,
  /**
   * Callback function that is fired when the `mouseup` is triggered.
   *
   * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {number | number[]} value The new value.
   */
  onChangeCommitted: t.func,
  /**
   * The component orientation.
   * @default 'horizontal'
   */
  orientation: t.oneOf(["horizontal", "vertical"]),
  /**
   * A transformation function, to change the scale of the slider.
   * @param {any} x
   * @returns {any}
   * @default function Identity(x) {
   *   return x;
   * }
   */
  scale: t.func,
  /**
   * The granularity with which the slider can step through values when using Page Up/Page Down or Shift + Arrow Up/Arrow Down.
   * @default 10
   */
  shiftStep: t.number,
  /**
   * The size of the slider.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium"]), t.string]),
  /**
   * The props used for each slot inside the Slider.
   * @default {}
   */
  slotProps: t.shape({
    input: t.oneOfType([t.func, t.object]),
    mark: t.oneOfType([t.func, t.object]),
    markLabel: t.oneOfType([t.func, t.object]),
    rail: t.oneOfType([t.func, t.object]),
    root: t.oneOfType([t.func, t.object]),
    thumb: t.oneOfType([t.func, t.object]),
    track: t.oneOfType([t.func, t.object]),
    valueLabel: t.oneOfType([t.func, t.shape({
      children: t.element,
      className: t.string,
      open: t.bool,
      style: t.object,
      value: t.number,
      valueLabelDisplay: t.oneOf(["auto", "off", "on"])
    })])
  }),
  /**
   * The components used for each slot inside the Slider.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    input: t.elementType,
    mark: t.elementType,
    markLabel: t.elementType,
    rail: t.elementType,
    root: t.elementType,
    thumb: t.elementType,
    track: t.elementType,
    valueLabel: t.elementType
  }),
  /**
   * The granularity with which the slider can step through values. (A "discrete" slider.)
   * The `min` prop serves as the origin for the valid values.
   * We recommend (max - min) to be evenly divisible by the step.
   *
   * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
   * @default 1
   */
  step: t.number,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Tab index attribute of the hidden `input` element.
   */
  tabIndex: t.number,
  /**
   * The track presentation:
   *
   * - `normal` the track will render a bar representing the slider value.
   * - `inverted` the track will render a bar representing the remaining slider value.
   * - `false` the track will render without a bar.
   * @default 'normal'
   */
  track: t.oneOf(["inverted", "normal", !1]),
  /**
   * The value of the slider.
   * For ranged sliders, provide an array with two values.
   */
  value: t.oneOfType([t.arrayOf(t.number), t.number]),
  /**
   * Controls when the value label is displayed:
   *
   * - `auto` the value label will display when the thumb is hovered or focused.
   * - `on` will display persistently.
   * - `off` will never display.
   * @default 'off'
   */
  valueLabelDisplay: t.oneOf(["auto", "off", "on"]),
  /**
   * The format function the value label's value.
   *
   * When a function is provided, it should have the following signature:
   *
   * - {number} value The value label's value to format
   * - {number} index The value label's index to format
   * @param {any} x
   * @returns {any}
   * @default function Identity(x) {
   *   return x;
   * }
   */
  valueLabelFormat: t.oneOfType([t.func, t.string])
});
const MM = ip;
function rw(e) {
  return ee("MuiSnackbarContent", e);
}
const sw = ne("MuiSnackbarContent", ["root", "message", "action"]), BM = sw, aw = ["action", "className", "message", "role"], iw = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"],
    action: ["action"],
    message: ["message"]
  }, rw, o);
}, lw = P(Gt, {
  name: "MuiSnackbarContent",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(({
  theme: e
}) => {
  const o = e.palette.mode === "light" ? 0.8 : 0.98, n = Gr(e.palette.background.default, o);
  return u({}, e.typography.body2, {
    color: e.vars ? e.vars.palette.SnackbarContent.color : e.palette.getContrastText(n),
    backgroundColor: e.vars ? e.vars.palette.SnackbarContent.bg : n,
    display: "flex",
    alignItems: "center",
    flexWrap: "wrap",
    padding: "6px 16px",
    borderRadius: (e.vars || e).shape.borderRadius,
    flexGrow: 1,
    [e.breakpoints.up("sm")]: {
      flexGrow: "initial",
      minWidth: 288
    }
  });
}), cw = P("div", {
  name: "MuiSnackbarContent",
  slot: "Message",
  overridesResolver: (e, o) => o.message
})({
  padding: "8px 0"
}), uw = P("div", {
  name: "MuiSnackbarContent",
  slot: "Action",
  overridesResolver: (e, o) => o.action
})({
  display: "flex",
  alignItems: "center",
  marginLeft: "auto",
  paddingLeft: 16,
  marginRight: -8
}), lp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiSnackbarContent"
  }), {
    action: s,
    className: a,
    message: i,
    role: l = "alert"
  } = r, c = z(r, aw), d = r, p = iw(d);
  return /* @__PURE__ */ Ce(lw, u({
    role: l,
    square: !0,
    elevation: 6,
    className: D(p.root, a),
    ownerState: d,
    ref: n
  }, c, {
    children: [/* @__PURE__ */ x(cw, {
      className: p.message,
      ownerState: d,
      children: i
    }), s ? /* @__PURE__ */ x(uw, {
      className: p.action,
      ownerState: d,
      children: s
    }) : null]
  }));
});
process.env.NODE_ENV !== "production" && (lp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The action to display. It renders after the message, at the end of the snackbar.
   */
  action: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The message to display.
   */
  message: t.node,
  /**
   * The ARIA role attribute of the element.
   * @default 'alert'
   */
  role: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const dw = lp;
function pw(e) {
  return ee("MuiSnackbar", e);
}
const fw = ne("MuiSnackbar", ["root", "anchorOriginTopCenter", "anchorOriginBottomCenter", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft"]), LM = fw, mw = ["onEnter", "onExited"], bw = ["action", "anchorOrigin", "autoHideDuration", "children", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"], gw = (e) => {
  const {
    classes: o,
    anchorOrigin: n
  } = e, r = {
    root: ["root", `anchorOrigin${k(n.vertical)}${k(n.horizontal)}`]
  };
  return te(r, pw, o);
}, Il = P("div", {
  name: "MuiSnackbar",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`anchorOrigin${k(n.anchorOrigin.vertical)}${k(n.anchorOrigin.horizontal)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => {
  const n = {
    left: "50%",
    right: "auto",
    transform: "translateX(-50%)"
  };
  return u({
    zIndex: (e.vars || e).zIndex.snackbar,
    position: "fixed",
    display: "flex",
    left: 8,
    right: 8,
    justifyContent: "center",
    alignItems: "center"
  }, o.anchorOrigin.vertical === "top" ? {
    top: 8
  } : {
    bottom: 8
  }, o.anchorOrigin.horizontal === "left" && {
    justifyContent: "flex-start"
  }, o.anchorOrigin.horizontal === "right" && {
    justifyContent: "flex-end"
  }, {
    [e.breakpoints.up("sm")]: u({}, o.anchorOrigin.vertical === "top" ? {
      top: 24
    } : {
      bottom: 24
    }, o.anchorOrigin.horizontal === "center" && n, o.anchorOrigin.horizontal === "left" && {
      left: 24,
      right: "auto"
    }, o.anchorOrigin.horizontal === "right" && {
      right: 24,
      left: "auto"
    })
  });
}), cp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiSnackbar"
  }), s = rt(), a = {
    enter: s.transitions.duration.enteringScreen,
    exit: s.transitions.duration.leavingScreen
  }, {
    action: i,
    anchorOrigin: {
      vertical: l,
      horizontal: c
    } = {
      vertical: "bottom",
      horizontal: "left"
    },
    autoHideDuration: d = null,
    children: p,
    className: m,
    ClickAwayListenerProps: b,
    ContentProps: h,
    disableWindowBlurListener: v = !1,
    message: C,
    open: g,
    TransitionComponent: y = rs,
    transitionDuration: $ = a,
    TransitionProps: {
      onEnter: T,
      onExited: O
    } = {}
  } = r, S = z(r.TransitionProps, mw), R = z(r, bw), w = u({}, r, {
    anchorOrigin: {
      vertical: l,
      horizontal: c
    },
    autoHideDuration: d,
    disableWindowBlurListener: v,
    TransitionComponent: y,
    transitionDuration: $
  }), E = gw(w), {
    getRootProps: N,
    onClickAway: M
  } = iv(u({}, w)), [I, F] = f.useState(!0), A = at({
    elementType: Il,
    getSlotProps: N,
    externalForwardedProps: R,
    ownerState: w,
    additionalProps: {
      ref: n
    },
    className: [E.root, m]
  }), B = (V) => {
    F(!0), O && O(V);
  }, j = (V, U) => {
    F(!1), T && T(V, U);
  };
  return !g && I ? null : /* @__PURE__ */ x(Qr, u({
    onClickAway: M
  }, b, {
    children: /* @__PURE__ */ x(Il, u({}, A, {
      children: /* @__PURE__ */ x(y, u({
        appear: !0,
        in: g,
        timeout: $,
        direction: l === "top" ? "down" : "up",
        onEnter: j,
        onExited: B
      }, S, {
        children: p || /* @__PURE__ */ x(dw, u({
          message: C,
          action: i
        }, h))
      }))
    }))
  }));
});
process.env.NODE_ENV !== "production" && (cp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The action to display. It renders after the message, at the end of the snackbar.
   */
  action: t.node,
  /**
   * The anchor of the `Snackbar`.
   * On smaller screens, the component grows to occupy all the available width,
   * the horizontal alignment is ignored.
   * @default { vertical: 'bottom', horizontal: 'left' }
   */
  anchorOrigin: t.shape({
    horizontal: t.oneOf(["center", "left", "right"]).isRequired,
    vertical: t.oneOf(["bottom", "top"]).isRequired
  }),
  /**
   * The number of milliseconds to wait before automatically calling the
   * `onClose` function. `onClose` should then set the state of the `open`
   * prop to hide the Snackbar. This behavior is disabled by default with
   * the `null` value.
   * @default null
   */
  autoHideDuration: t.number,
  /**
   * Replace the `SnackbarContent` component.
   */
  children: t.element,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Props applied to the `ClickAwayListener` element.
   */
  ClickAwayListenerProps: t.object,
  /**
   * Props applied to the [`SnackbarContent`](/material-ui/api/snackbar-content/) element.
   */
  ContentProps: t.object,
  /**
   * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
   * @default false
   */
  disableWindowBlurListener: t.bool,
  /**
   * When displaying multiple consecutive snackbars using a single parent-rendered
   * `<Snackbar/>`, add the `key` prop to ensure independent treatment of each message.
   * For instance, use `<Snackbar key={message} />`. Otherwise, messages might update
   * in place, and features like `autoHideDuration` could be affected.
   */
  key: () => null,
  /**
   * The message to display.
   */
  message: t.node,
  /**
   * @ignore
   */
  onBlur: t.func,
  /**
   * Callback fired when the component requests to be closed.
   * Typically `onClose` is used to set state in the parent component,
   * which is used to control the `Snackbar` `open` prop.
   * The `reason` parameter can optionally be used to control the response to `onClose`,
   * for example ignoring `clickaway`.
   *
   * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
   * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
   */
  onClose: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * @ignore
   */
  onMouseEnter: t.func,
  /**
   * @ignore
   */
  onMouseLeave: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool,
  /**
   * The number of milliseconds to wait before dismissing after user interaction.
   * If `autoHideDuration` prop isn't specified, it does nothing.
   * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
   * we default to `autoHideDuration / 2` ms.
   */
  resumeHideDuration: t.number,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Grow
   */
  TransitionComponent: t.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  transitionDuration: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   * @default {}
   */
  TransitionProps: t.object
});
const DM = cp, hw = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"], vw = {
  entering: {
    transform: "none"
  },
  entered: {
    transform: "none"
  }
}, up = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = rt(), s = {
    enter: r.transitions.duration.enteringScreen,
    exit: r.transitions.duration.leavingScreen
  }, {
    addEndListener: a,
    appear: i = !0,
    children: l,
    easing: c,
    in: d,
    onEnter: p,
    onEntered: m,
    onEntering: b,
    onExit: h,
    onExited: v,
    onExiting: C,
    style: g,
    timeout: y = s,
    // eslint-disable-next-line react/prop-types
    TransitionComponent: $ = hr
  } = o, T = z(o, hw), O = f.useRef(null), S = Ve(O, l.ref, n), R = (B) => (j) => {
    if (B) {
      const V = O.current;
      j === void 0 ? B(V) : B(V, j);
    }
  }, w = R(b), E = R((B, j) => {
    gs(B);
    const V = eo({
      style: g,
      timeout: y,
      easing: c
    }, {
      mode: "enter"
    });
    B.style.webkitTransition = r.transitions.create("transform", V), B.style.transition = r.transitions.create("transform", V), p && p(B, j);
  }), N = R(m), M = R(C), I = R((B) => {
    const j = eo({
      style: g,
      timeout: y,
      easing: c
    }, {
      mode: "exit"
    });
    B.style.webkitTransition = r.transitions.create("transform", j), B.style.transition = r.transitions.create("transform", j), h && h(B);
  }), F = R(v);
  return /* @__PURE__ */ x($, u({
    appear: i,
    in: d,
    nodeRef: O,
    onEnter: E,
    onEntered: N,
    onEntering: w,
    onExit: I,
    onExited: F,
    onExiting: M,
    addEndListener: (B) => {
      a && a(O.current, B);
    },
    timeout: y
  }, T, {
    children: (B, j) => /* @__PURE__ */ f.cloneElement(l, u({
      style: u({
        transform: "scale(0)",
        visibility: B === "exited" && !d ? "hidden" : void 0
      }, vw[B], g, l.props.style),
      ref: S
    }, j))
  }));
});
process.env.NODE_ENV !== "production" && (up.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Add a custom transition end trigger. Called with the transitioning DOM
   * node and a done callback. Allows for more fine grained transition end
   * logic. Note: Timeouts are still used as a fallback if provided.
   */
  addEndListener: t.func,
  /**
   * Perform the enter transition when it first mounts if `in` is also `true`.
   * Set this to `false` to disable this behavior.
   * @default true
   */
  appear: t.bool,
  /**
   * A single child content element.
   */
  children: _o.isRequired,
  /**
   * The transition timing function.
   * You may specify a single easing or a object containing enter and exit values.
   */
  easing: t.oneOfType([t.shape({
    enter: t.string,
    exit: t.string
  }), t.string]),
  /**
   * If `true`, the component will transition in.
   */
  in: t.bool,
  /**
   * @ignore
   */
  onEnter: t.func,
  /**
   * @ignore
   */
  onEntered: t.func,
  /**
   * @ignore
   */
  onEntering: t.func,
  /**
   * @ignore
   */
  onExit: t.func,
  /**
   * @ignore
   */
  onExited: t.func,
  /**
   * @ignore
   */
  onExiting: t.func,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  timeout: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })])
});
const yw = up;
function Cw(e) {
  return ee("MuiSpeedDial", e);
}
const xw = ne("MuiSpeedDial", ["root", "fab", "directionUp", "directionDown", "directionLeft", "directionRight", "actions", "actionsClosed"]), Dr = xw, Tw = ["ref"], Ow = ["ariaLabel", "FabProps", "children", "className", "direction", "hidden", "icon", "onBlur", "onClose", "onFocus", "onKeyDown", "onMouseEnter", "onMouseLeave", "onOpen", "open", "openIcon", "TransitionComponent", "transitionDuration", "TransitionProps"], $w = ["ref"], Sw = (e) => {
  const {
    classes: o,
    open: n,
    direction: r
  } = e, s = {
    root: ["root", `direction${k(r)}`],
    fab: ["fab"],
    actions: ["actions", !n && "actionsClosed"]
  };
  return te(s, Cw, o);
};
function zn(e) {
  if (e === "up" || e === "down")
    return "vertical";
  if (e === "right" || e === "left")
    return "horizontal";
}
const Eo = 32, Ar = 16, Rw = P("div", {
  name: "MuiSpeedDial",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`direction${k(n.direction)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  zIndex: (e.vars || e).zIndex.speedDial,
  display: "flex",
  alignItems: "center",
  pointerEvents: "none"
}, o.direction === "up" && {
  flexDirection: "column-reverse",
  [`& .${Dr.actions}`]: {
    flexDirection: "column-reverse",
    marginBottom: -Eo,
    paddingBottom: Ar + Eo
  }
}, o.direction === "down" && {
  flexDirection: "column",
  [`& .${Dr.actions}`]: {
    flexDirection: "column",
    marginTop: -Eo,
    paddingTop: Ar + Eo
  }
}, o.direction === "left" && {
  flexDirection: "row-reverse",
  [`& .${Dr.actions}`]: {
    flexDirection: "row-reverse",
    marginRight: -Eo,
    paddingRight: Ar + Eo
  }
}, o.direction === "right" && {
  flexDirection: "row",
  [`& .${Dr.actions}`]: {
    flexDirection: "row",
    marginLeft: -Eo,
    paddingLeft: Ar + Eo
  }
})), ww = P(nd, {
  name: "MuiSpeedDial",
  slot: "Fab",
  overridesResolver: (e, o) => o.fab
})(() => ({
  pointerEvents: "auto"
})), Ew = P("div", {
  name: "MuiSpeedDial",
  slot: "Actions",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.actions, !n.open && o.actionsClosed];
  }
})(({
  ownerState: e
}) => u({
  display: "flex",
  pointerEvents: "auto"
}, !e.open && {
  transition: "top 0s linear 0.2s",
  pointerEvents: "none"
})), dp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiSpeedDial"
  }), s = rt(), a = {
    enter: s.transitions.duration.enteringScreen,
    exit: s.transitions.duration.leavingScreen
  }, {
    ariaLabel: i,
    FabProps: {
      ref: l
    } = {},
    children: c,
    className: d,
    direction: p = "up",
    hidden: m = !1,
    icon: b,
    onBlur: h,
    onClose: v,
    onFocus: C,
    onKeyDown: g,
    onMouseEnter: y,
    onMouseLeave: $,
    onOpen: T,
    open: O,
    TransitionComponent: S = yw,
    transitionDuration: R = a,
    TransitionProps: w
  } = r, E = z(r.FabProps, Tw), N = z(r, Ow), [M, I] = Dt({
    controlled: O,
    default: !1,
    name: "SpeedDial",
    state: "open"
  }), F = u({}, r, {
    open: M,
    direction: p
  }), A = Sw(F), B = yo(), j = f.useRef(0), V = f.useRef(), U = f.useRef([]);
  U.current = [U.current[0]];
  const _ = f.useCallback((q) => {
    U.current[0] = q;
  }, []), W = Ve(l, _), de = (q, le) => (Oe) => {
    U.current[q + 1] = Oe, le && le(Oe);
  }, Te = (q) => {
    g && g(q);
    const le = q.key.replace("Arrow", "").toLowerCase(), {
      current: Oe = le
    } = V;
    if (q.key === "Escape") {
      I(!1), U.current[0].focus(), v && v(q, "escapeKeyDown");
      return;
    }
    if (zn(le) === zn(Oe) && zn(le) !== void 0) {
      q.preventDefault();
      const fe = le === Oe ? 1 : -1, me = Ko(j.current + fe, 0, U.current.length - 1);
      U.current[me].focus(), j.current = me, V.current = Oe;
    }
  };
  f.useEffect(() => {
    M || (j.current = 0, V.current = void 0);
  }, [M]);
  const $e = (q) => {
    q.type === "mouseleave" && $ && $(q), q.type === "blur" && h && h(q), B.clear(), q.type === "blur" ? B.start(0, () => {
      I(!1), v && v(q, "blur");
    }) : (I(!1), v && v(q, "mouseLeave"));
  }, ie = (q) => {
    E.onClick && E.onClick(q), B.clear(), M ? (I(!1), v && v(q, "toggle")) : (I(!0), T && T(q, "toggle"));
  }, se = (q) => {
    q.type === "mouseenter" && y && y(q), q.type === "focus" && C && C(q), B.clear(), M || B.start(0, () => {
      I(!0), T && T(q, {
        focus: "focus",
        mouseenter: "mouseEnter"
      }[q.type]);
    });
  }, ue = i.replace(/^[^a-z]+|[^\w:.-]+/gi, ""), Z = f.Children.toArray(c).filter((q) => (process.env.NODE_ENV !== "production" && to.isFragment(q) && console.error(["MUI: The SpeedDial component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), /* @__PURE__ */ f.isValidElement(q))), he = Z.map((q, le) => {
    const Oe = q.props, {
      FabProps: {
        ref: fe
      } = {},
      tooltipPlacement: me
    } = Oe, ve = z(Oe.FabProps, $w), Y = me || (zn(p) === "vertical" ? "left" : "top");
    return /* @__PURE__ */ f.cloneElement(q, {
      FabProps: u({}, ve, {
        ref: de(le, fe)
      }),
      delay: 30 * (M ? le : Z.length - le),
      open: M,
      tooltipPlacement: Y,
      id: `${ue}-action-${le}`
    });
  });
  return /* @__PURE__ */ Ce(Rw, u({
    className: D(A.root, d),
    ref: n,
    role: "presentation",
    onKeyDown: Te,
    onBlur: $e,
    onFocus: se,
    onMouseEnter: se,
    onMouseLeave: $e,
    ownerState: F
  }, N, {
    children: [/* @__PURE__ */ x(S, u({
      in: !m,
      timeout: R,
      unmountOnExit: !0
    }, w, {
      children: /* @__PURE__ */ x(ww, u({
        color: "primary",
        "aria-label": i,
        "aria-haspopup": "true",
        "aria-expanded": M,
        "aria-controls": `${ue}-actions`
      }, E, {
        onClick: ie,
        className: D(A.fab, E.className),
        ref: W,
        ownerState: F,
        children: /* @__PURE__ */ f.isValidElement(b) && Co(b, ["SpeedDialIcon"]) ? /* @__PURE__ */ f.cloneElement(b, {
          open: M
        }) : b
      }))
    })), /* @__PURE__ */ x(Ew, {
      id: `${ue}-actions`,
      role: "menu",
      "aria-orientation": zn(p),
      className: D(A.actions, !M && A.actionsClosed),
      ownerState: F,
      children: he
    })]
  }));
});
process.env.NODE_ENV !== "production" && (dp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The aria-label of the button element.
   * Also used to provide the `id` for the `SpeedDial` element and its children.
   */
  ariaLabel: t.string.isRequired,
  /**
   * SpeedDialActions to display when the SpeedDial is `open`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The direction the actions open relative to the floating action button.
   * @default 'up'
   */
  direction: t.oneOf(["down", "left", "right", "up"]),
  /**
   * Props applied to the [`Fab`](/material-ui/api/fab/) element.
   * @default {}
   */
  FabProps: t.object,
  /**
   * If `true`, the SpeedDial is hidden.
   * @default false
   */
  hidden: t.bool,
  /**
   * The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component
   * provides a default Icon with animation.
   */
  icon: t.node,
  /**
   * @ignore
   */
  onBlur: t.func,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"toggle"`, `"blur"`, `"mouseLeave"`, `"escapeKeyDown"`.
   */
  onClose: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * @ignore
   */
  onKeyDown: t.func,
  /**
   * @ignore
   */
  onMouseEnter: t.func,
  /**
   * @ignore
   */
  onMouseLeave: t.func,
  /**
   * Callback fired when the component requests to be open.
   *
   * @param {object} event The event source of the callback.
   * @param {string} reason Can be: `"toggle"`, `"focus"`, `"mouseEnter"`.
   */
  onOpen: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool,
  /**
   * The icon to display in the SpeedDial Fab when the SpeedDial is open.
   */
  openIcon: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Zoom
   */
  TransitionComponent: t.elementType,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  transitionDuration: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   */
  TransitionProps: t.object
});
const AM = dp;
function Pw(e) {
  return ee("MuiTooltip", e);
}
const Nw = ne("MuiTooltip", ["popper", "popperInteractive", "popperArrow", "popperClose", "tooltip", "tooltipArrow", "touch", "tooltipPlacementLeft", "tooltipPlacementRight", "tooltipPlacementTop", "tooltipPlacementBottom", "arrow"]), Ao = Nw, Iw = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "slotProps", "slots", "title", "TransitionComponent", "TransitionProps"];
function kw(e) {
  return Math.round(e * 1e5) / 1e5;
}
const Mw = (e) => {
  const {
    classes: o,
    disableInteractive: n,
    arrow: r,
    touch: s,
    placement: a
  } = e, i = {
    popper: ["popper", !n && "popperInteractive", r && "popperArrow"],
    tooltip: ["tooltip", r && "tooltipArrow", s && "touch", `tooltipPlacement${k(a.split("-")[0])}`],
    arrow: ["arrow"]
  };
  return te(i, Pw, o);
}, Bw = P(Cs, {
  name: "MuiTooltip",
  slot: "Popper",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.popper, !n.disableInteractive && o.popperInteractive, n.arrow && o.popperArrow, !n.open && o.popperClose];
  }
})(({
  theme: e,
  ownerState: o,
  open: n
}) => u({
  zIndex: (e.vars || e).zIndex.tooltip,
  pointerEvents: "none"
}, !o.disableInteractive && {
  pointerEvents: "auto"
}, !n && {
  pointerEvents: "none"
}, o.arrow && {
  [`&[data-popper-placement*="bottom"] .${Ao.arrow}`]: {
    top: 0,
    marginTop: "-0.71em",
    "&::before": {
      transformOrigin: "0 100%"
    }
  },
  [`&[data-popper-placement*="top"] .${Ao.arrow}`]: {
    bottom: 0,
    marginBottom: "-0.71em",
    "&::before": {
      transformOrigin: "100% 0"
    }
  },
  [`&[data-popper-placement*="right"] .${Ao.arrow}`]: u({}, o.isRtl ? {
    right: 0,
    marginRight: "-0.71em"
  } : {
    left: 0,
    marginLeft: "-0.71em"
  }, {
    height: "1em",
    width: "0.71em",
    "&::before": {
      transformOrigin: "100% 100%"
    }
  }),
  [`&[data-popper-placement*="left"] .${Ao.arrow}`]: u({}, o.isRtl ? {
    left: 0,
    marginLeft: "-0.71em"
  } : {
    right: 0,
    marginRight: "-0.71em"
  }, {
    height: "1em",
    width: "0.71em",
    "&::before": {
      transformOrigin: "0 0"
    }
  })
})), Lw = P("div", {
  name: "MuiTooltip",
  slot: "Tooltip",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.tooltip, n.touch && o.touch, n.arrow && o.tooltipArrow, o[`tooltipPlacement${k(n.placement.split("-")[0])}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  backgroundColor: e.vars ? e.vars.palette.Tooltip.bg : Pe(e.palette.grey[700], 0.92),
  borderRadius: (e.vars || e).shape.borderRadius,
  color: (e.vars || e).palette.common.white,
  fontFamily: e.typography.fontFamily,
  padding: "4px 8px",
  fontSize: e.typography.pxToRem(11),
  maxWidth: 300,
  margin: 2,
  wordWrap: "break-word",
  fontWeight: e.typography.fontWeightMedium
}, o.arrow && {
  position: "relative",
  margin: 0
}, o.touch && {
  padding: "8px 16px",
  fontSize: e.typography.pxToRem(14),
  lineHeight: `${kw(16 / 14)}em`,
  fontWeight: e.typography.fontWeightRegular
}, {
  [`.${Ao.popper}[data-popper-placement*="left"] &`]: u({
    transformOrigin: "right center"
  }, o.isRtl ? u({
    marginLeft: "14px"
  }, o.touch && {
    marginLeft: "24px"
  }) : u({
    marginRight: "14px"
  }, o.touch && {
    marginRight: "24px"
  })),
  [`.${Ao.popper}[data-popper-placement*="right"] &`]: u({
    transformOrigin: "left center"
  }, o.isRtl ? u({
    marginRight: "14px"
  }, o.touch && {
    marginRight: "24px"
  }) : u({
    marginLeft: "14px"
  }, o.touch && {
    marginLeft: "24px"
  })),
  [`.${Ao.popper}[data-popper-placement*="top"] &`]: u({
    transformOrigin: "center bottom",
    marginBottom: "14px"
  }, o.touch && {
    marginBottom: "24px"
  }),
  [`.${Ao.popper}[data-popper-placement*="bottom"] &`]: u({
    transformOrigin: "center top",
    marginTop: "14px"
  }, o.touch && {
    marginTop: "24px"
  })
})), Dw = P("span", {
  name: "MuiTooltip",
  slot: "Arrow",
  overridesResolver: (e, o) => o.arrow
})(({
  theme: e
}) => ({
  overflow: "hidden",
  position: "absolute",
  width: "1em",
  height: "0.71em",
  boxSizing: "border-box",
  color: e.vars ? e.vars.palette.Tooltip.bg : Pe(e.palette.grey[700], 0.9),
  "&::before": {
    content: '""',
    margin: "auto",
    display: "block",
    width: "100%",
    height: "100%",
    backgroundColor: "currentColor",
    transform: "rotate(45deg)"
  }
}));
let Fr = !1;
const kl = new mr();
let Vn = {
  x: 0,
  y: 0
};
function jr(e, o) {
  return (n) => {
    o && o(n), e(n);
  };
}
const pp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s, a, i, l, c, d, p, m, b, h, v, C, g, y, $, T, O, S;
  const R = oe({
    props: o,
    name: "MuiTooltip"
  }), {
    arrow: w = !1,
    children: E,
    components: N = {},
    componentsProps: M = {},
    describeChild: I = !1,
    disableFocusListener: F = !1,
    disableHoverListener: A = !1,
    disableInteractive: B = !1,
    disableTouchListener: j = !1,
    enterDelay: V = 100,
    enterNextDelay: U = 0,
    enterTouchDelay: _ = 700,
    followCursor: W = !1,
    id: de,
    leaveDelay: Te = 0,
    leaveTouchDelay: $e = 1500,
    onClose: ie,
    onOpen: se,
    open: ue,
    placement: Z = "bottom",
    PopperComponent: he,
    PopperProps: q = {},
    slotProps: le = {},
    slots: Oe = {},
    title: fe,
    TransitionComponent: me = rs,
    TransitionProps: ve
  } = R, Y = z(R, Iw), re = /* @__PURE__ */ f.isValidElement(E) ? E : /* @__PURE__ */ x("span", {
    children: E
  }), X = rt(), Ee = X.direction === "rtl", [be, De] = f.useState(), [Ie, Se] = f.useState(null), Me = f.useRef(!1), Fe = B || W, Ae = yo(), Ye = yo(), et = yo(), tt = yo(), [G, H] = Dt({
    controlled: ue,
    default: !1,
    name: "Tooltip",
    state: "open"
  });
  let pe = G;
  if (process.env.NODE_ENV !== "production") {
    const {
      current: ye
    } = f.useRef(ue !== void 0);
    f.useEffect(() => {
      be && be.disabled && !ye && fe !== "" && be.tagName.toLowerCase() === "button" && console.error(["MUI: You are providing a disabled `button` child to the Tooltip component.", "A disabled element does not fire events.", "Tooltip needs to listen to the child element's events to display the title.", "", "Add a simple wrapper element, such as a `span`."].join(`
`));
    }, [fe, be, ye]);
  }
  const Ne = mo(de), Le = f.useRef(), Re = nt(() => {
    Le.current !== void 0 && (document.body.style.WebkitUserSelect = Le.current, Le.current = void 0), tt.clear();
  });
  f.useEffect(() => Re, [Re]);
  const ge = (ye) => {
    kl.clear(), Fr = !0, H(!0), se && !pe && se(ye);
  }, Q = nt(
    /**
     * @param {React.SyntheticEvent | Event} event
     */
    (ye) => {
      kl.start(800 + Te, () => {
        Fr = !1;
      }), H(!1), ie && pe && ie(ye), Ae.start(X.transitions.duration.shortest, () => {
        Me.current = !1;
      });
    }
  ), ce = (ye) => {
    Me.current && ye.type !== "touchstart" || (be && be.removeAttribute("title"), Ye.clear(), et.clear(), V || Fr && U ? Ye.start(Fr ? U : V, () => {
      ge(ye);
    }) : ge(ye));
  }, xe = (ye) => {
    Ye.clear(), et.start(Te, () => {
      Q(ye);
    });
  }, {
    isFocusVisibleRef: ke,
    onBlur: je,
    onFocus: qe,
    ref: Qe
  } = br(), [, ft] = f.useState(!1), st = (ye) => {
    je(ye), ke.current === !1 && (ft(!1), xe(ye));
  }, Tt = (ye) => {
    be || De(ye.currentTarget), qe(ye), ke.current === !0 && (ft(!0), ce(ye));
  }, no = (ye) => {
    Me.current = !0;
    const Ue = re.props;
    Ue.onTouchStart && Ue.onTouchStart(ye);
  }, ro = (ye) => {
    no(ye), et.clear(), Ae.clear(), Re(), Le.current = document.body.style.WebkitUserSelect, document.body.style.WebkitUserSelect = "none", tt.start(_, () => {
      document.body.style.WebkitUserSelect = Le.current, ce(ye);
    });
  }, Vo = (ye) => {
    re.props.onTouchEnd && re.props.onTouchEnd(ye), Re(), et.start($e, () => {
      Q(ye);
    });
  };
  f.useEffect(() => {
    if (!pe)
      return;
    function ye(Ue) {
      (Ue.key === "Escape" || Ue.key === "Esc") && Q(Ue);
    }
    return document.addEventListener("keydown", ye), () => {
      document.removeEventListener("keydown", ye);
    };
  }, [Q, pe]);
  const So = Ve(re.ref, Qe, De, n);
  !fe && fe !== 0 && (pe = !1);
  const wt = f.useRef(), it = (ye) => {
    const Ue = re.props;
    Ue.onMouseMove && Ue.onMouseMove(ye), Vn = {
      x: ye.clientX,
      y: ye.clientY
    }, wt.current && wt.current.update();
  }, Ze = {}, gt = typeof fe == "string";
  I ? (Ze.title = !pe && gt && !A ? fe : null, Ze["aria-describedby"] = pe ? Ne : null) : (Ze["aria-label"] = gt ? fe : null, Ze["aria-labelledby"] = pe && !gt ? Ne : null);
  const ht = u({}, Ze, Y, re.props, {
    className: D(Y.className, re.props.className),
    onTouchStart: no,
    ref: So
  }, W ? {
    onMouseMove: it
  } : {});
  process.env.NODE_ENV !== "production" && (ht["data-mui-internal-clone-element"] = !0, f.useEffect(() => {
    be && !be.getAttribute("data-mui-internal-clone-element") && console.error(["MUI: The `children` component of the Tooltip is not forwarding its props correctly.", "Please make sure that props are spread on the same element that the ref is applied to."].join(`
`));
  }, [be]));
  const Kt = {};
  j || (ht.onTouchStart = ro, ht.onTouchEnd = Vo), A || (ht.onMouseOver = jr(ce, ht.onMouseOver), ht.onMouseLeave = jr(xe, ht.onMouseLeave), Fe || (Kt.onMouseOver = ce, Kt.onMouseLeave = xe)), F || (ht.onFocus = jr(Tt, ht.onFocus), ht.onBlur = jr(st, ht.onBlur), Fe || (Kt.onFocus = Tt, Kt.onBlur = st)), process.env.NODE_ENV !== "production" && re.props.title && console.error(["MUI: You have provided a `title` prop to the child of <Tooltip />.", `Remove this title prop \`${re.props.title}\` or the Tooltip component.`].join(`
`));
  const Uo = f.useMemo(() => {
    var ye;
    let Ue = [{
      name: "arrow",
      enabled: !!Ie,
      options: {
        element: Ie,
        padding: 4
      }
    }];
    return (ye = q.popperOptions) != null && ye.modifiers && (Ue = Ue.concat(q.popperOptions.modifiers)), u({}, q.popperOptions, {
      modifiers: Ue
    });
  }, [Ie, q]), Yt = u({}, R, {
    isRtl: Ee,
    arrow: w,
    disableInteractive: Fe,
    placement: Z,
    PopperComponentProp: he,
    touch: Me.current
  }), Ft = Mw(Yt), so = (r = (s = Oe.popper) != null ? s : N.Popper) != null ? r : Bw, Et = (a = (i = (l = Oe.transition) != null ? l : N.Transition) != null ? i : me) != null ? a : rs, It = (c = (d = Oe.tooltip) != null ? d : N.Tooltip) != null ? c : Lw, K = (p = (m = Oe.arrow) != null ? m : N.Arrow) != null ? p : Dw, L = fn(so, u({}, q, (b = le.popper) != null ? b : M.popper, {
    className: D(Ft.popper, q == null ? void 0 : q.className, (h = (v = le.popper) != null ? v : M.popper) == null ? void 0 : h.className)
  }), Yt), ae = fn(Et, u({}, ve, (C = le.transition) != null ? C : M.transition), Yt), we = fn(It, u({}, (g = le.tooltip) != null ? g : M.tooltip, {
    className: D(Ft.tooltip, (y = ($ = le.tooltip) != null ? $ : M.tooltip) == null ? void 0 : y.className)
  }), Yt), _e = fn(K, u({}, (T = le.arrow) != null ? T : M.arrow, {
    className: D(Ft.arrow, (O = (S = le.arrow) != null ? S : M.arrow) == null ? void 0 : O.className)
  }), Yt);
  return /* @__PURE__ */ Ce(f.Fragment, {
    children: [/* @__PURE__ */ f.cloneElement(re, ht), /* @__PURE__ */ x(so, u({
      as: he ?? Cs,
      placement: Z,
      anchorEl: W ? {
        getBoundingClientRect: () => ({
          top: Vn.y,
          left: Vn.x,
          right: Vn.x,
          bottom: Vn.y,
          width: 0,
          height: 0
        })
      } : be,
      popperRef: wt,
      open: be ? pe : !1,
      id: Ne,
      transition: !0
    }, Kt, L, {
      popperOptions: Uo,
      children: ({
        TransitionProps: ye
      }) => /* @__PURE__ */ x(Et, u({
        timeout: X.transitions.duration.shorter
      }, ye, ae, {
        children: /* @__PURE__ */ Ce(It, u({}, we, {
          children: [fe, w ? /* @__PURE__ */ x(K, u({}, _e, {
            ref: Se
          })) : null]
        }))
      }))
    }))]
  });
});
process.env.NODE_ENV !== "production" && (pp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, adds an arrow to the tooltip.
   * @default false
   */
  arrow: t.bool,
  /**
   * Tooltip reference element.
   */
  children: _o.isRequired,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `slots` prop.
   * It's recommended to use the `slots` prop instead.
   *
   * @default {}
   */
  components: t.shape({
    Arrow: t.elementType,
    Popper: t.elementType,
    Tooltip: t.elementType,
    Transition: t.elementType
  }),
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `slotProps` prop.
   * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
   *
   * @default {}
   */
  componentsProps: t.shape({
    arrow: t.object,
    popper: t.object,
    tooltip: t.object,
    transition: t.object
  }),
  /**
   * Set to `true` if the `title` acts as an accessible description.
   * By default the `title` acts as an accessible label for the child.
   * @default false
   */
  describeChild: t.bool,
  /**
   * Do not respond to focus-visible events.
   * @default false
   */
  disableFocusListener: t.bool,
  /**
   * Do not respond to hover events.
   * @default false
   */
  disableHoverListener: t.bool,
  /**
   * Makes a tooltip not interactive, i.e. it will close when the user
   * hovers over the tooltip before the `leaveDelay` is expired.
   * @default false
   */
  disableInteractive: t.bool,
  /**
   * Do not respond to long press touch events.
   * @default false
   */
  disableTouchListener: t.bool,
  /**
   * The number of milliseconds to wait before showing the tooltip.
   * This prop won't impact the enter touch delay (`enterTouchDelay`).
   * @default 100
   */
  enterDelay: t.number,
  /**
   * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
   * @default 0
   */
  enterNextDelay: t.number,
  /**
   * The number of milliseconds a user must touch the element before showing the tooltip.
   * @default 700
   */
  enterTouchDelay: t.number,
  /**
   * If `true`, the tooltip follow the cursor over the wrapped element.
   * @default false
   */
  followCursor: t.bool,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: t.string,
  /**
   * The number of milliseconds to wait before hiding the tooltip.
   * This prop won't impact the leave touch delay (`leaveTouchDelay`).
   * @default 0
   */
  leaveDelay: t.number,
  /**
   * The number of milliseconds after the user stops touching an element before hiding the tooltip.
   * @default 1500
   */
  leaveTouchDelay: t.number,
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onClose: t.func,
  /**
   * Callback fired when the component requests to be open.
   *
   * @param {React.SyntheticEvent} event The event source of the callback.
   */
  onOpen: t.func,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool,
  /**
   * Tooltip placement.
   * @default 'bottom'
   */
  placement: t.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * The component used for the popper.
   * @default Popper
   */
  PopperComponent: t.elementType,
  /**
   * Props applied to the [`Popper`](/material-ui/api/popper/) element.
   * @default {}
   */
  PopperProps: t.object,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   *
   * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slotProps: t.shape({
    arrow: t.object,
    popper: t.object,
    tooltip: t.object,
    transition: t.object
  }),
  /**
   * The components used for each slot inside.
   *
   * This prop is an alias for the `components` prop, which will be deprecated in the future.
   *
   * @default {}
   */
  slots: t.shape({
    arrow: t.elementType,
    popper: t.elementType,
    tooltip: t.elementType,
    transition: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
   */
  title: t.node,
  /**
   * The component used for the transition.
   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Grow
   */
  TransitionComponent: t.elementType,
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   */
  TransitionProps: t.object
});
const Aw = pp;
function Fw(e) {
  return ee("MuiSpeedDialAction", e);
}
const jw = ne("MuiSpeedDialAction", ["fab", "fabClosed", "staticTooltip", "staticTooltipClosed", "staticTooltipLabel", "tooltipPlacementLeft", "tooltipPlacementRight"]), _w = jw, zw = ["className", "delay", "FabProps", "icon", "id", "open", "TooltipClasses", "tooltipOpen", "tooltipPlacement", "tooltipTitle"], Vw = (e) => {
  const {
    open: o,
    tooltipPlacement: n,
    classes: r
  } = e, s = {
    fab: ["fab", !o && "fabClosed"],
    staticTooltip: ["staticTooltip", `tooltipPlacement${k(n)}`, !o && "staticTooltipClosed"],
    staticTooltipLabel: ["staticTooltipLabel"]
  };
  return te(s, Fw, r);
}, Uw = P(nd, {
  name: "MuiSpeedDialAction",
  slot: "Fab",
  skipVariantsResolver: !1,
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.fab, !n.open && o.fabClosed];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  margin: 8,
  color: (e.vars || e).palette.text.secondary,
  backgroundColor: (e.vars || e).palette.background.paper,
  "&:hover": {
    backgroundColor: e.vars ? e.vars.palette.SpeedDialAction.fabHoverBg : Gr(e.palette.background.paper, 0.15)
  },
  transition: `${e.transitions.create("transform", {
    duration: e.transitions.duration.shorter
  })}, opacity 0.8s`,
  opacity: 1
}, !o.open && {
  opacity: 0,
  transform: "scale(0)"
})), Ww = P("span", {
  name: "MuiSpeedDialAction",
  slot: "StaticTooltip",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.staticTooltip, !n.open && o.staticTooltipClosed, o[`tooltipPlacement${k(n.tooltipPlacement)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => ({
  position: "relative",
  display: "flex",
  alignItems: "center",
  [`& .${_w.staticTooltipLabel}`]: u({
    transition: e.transitions.create(["transform", "opacity"], {
      duration: e.transitions.duration.shorter
    }),
    opacity: 1
  }, !o.open && {
    opacity: 0,
    transform: "scale(0.5)"
  }, o.tooltipPlacement === "left" && {
    transformOrigin: "100% 50%",
    right: "100%",
    marginRight: 8
  }, o.tooltipPlacement === "right" && {
    transformOrigin: "0% 50%",
    left: "100%",
    marginLeft: 8
  })
})), Hw = P("span", {
  name: "MuiSpeedDialAction",
  slot: "StaticTooltipLabel",
  overridesResolver: (e, o) => o.staticTooltipLabel
})(({
  theme: e
}) => u({
  position: "absolute"
}, e.typography.body1, {
  backgroundColor: (e.vars || e).palette.background.paper,
  borderRadius: (e.vars || e).shape.borderRadius,
  boxShadow: (e.vars || e).shadows[1],
  color: (e.vars || e).palette.text.secondary,
  padding: "4px 16px",
  wordBreak: "keep-all"
})), fp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiSpeedDialAction"
  }), {
    className: s,
    delay: a = 0,
    FabProps: i = {},
    icon: l,
    id: c,
    open: d,
    TooltipClasses: p,
    tooltipOpen: m = !1,
    tooltipPlacement: b = "left",
    tooltipTitle: h
  } = r, v = z(r, zw), C = u({}, r, {
    tooltipPlacement: b
  }), g = Vw(C), [y, $] = f.useState(m), T = () => {
    $(!1);
  }, O = () => {
    $(!0);
  }, S = {
    transitionDelay: `${a}ms`
  }, R = /* @__PURE__ */ x(Uw, u({
    size: "small",
    className: D(g.fab, s),
    tabIndex: -1,
    role: "menuitem",
    ownerState: C
  }, i, {
    style: u({}, S, i.style),
    children: l
  }));
  return m ? /* @__PURE__ */ Ce(Ww, u({
    id: c,
    ref: n,
    className: g.staticTooltip,
    ownerState: C
  }, v, {
    children: [/* @__PURE__ */ x(Hw, {
      style: S,
      id: `${c}-label`,
      className: g.staticTooltipLabel,
      ownerState: C,
      children: h
    }), /* @__PURE__ */ f.cloneElement(R, {
      "aria-labelledby": `${c}-label`
    })]
  })) : (!d && y && $(!1), /* @__PURE__ */ x(Aw, u({
    id: c,
    ref: n,
    title: h,
    placement: b,
    onClose: T,
    onOpen: O,
    open: d && y,
    classes: p
  }, v, {
    children: R
  })));
});
process.env.NODE_ENV !== "production" && (fp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Adds a transition delay, to allow a series of SpeedDialActions to be animated.
   * @default 0
   */
  delay: t.number,
  /**
   * Props applied to the [`Fab`](/material-ui/api/fab/) component.
   * @default {}
   */
  FabProps: t.object,
  /**
   * The icon to display in the SpeedDial Fab.
   */
  icon: t.node,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: t.string,
  /**
   * If `true`, the component is shown.
   */
  open: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * `classes` prop applied to the [`Tooltip`](/material-ui/api/tooltip/) element.
   */
  TooltipClasses: t.object,
  /**
   * Make the tooltip always visible when the SpeedDial is open.
   * @default false
   */
  tooltipOpen: t.bool,
  /**
   * Placement of the tooltip.
   * @default 'left'
   */
  tooltipPlacement: t.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
  /**
   * Label to display in the tooltip.
   */
  tooltipTitle: t.node
});
const FM = fp, qw = Je(/* @__PURE__ */ x("path", {
  d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
}), "Add");
function Gw(e) {
  return ee("MuiSpeedDialIcon", e);
}
const Kw = ne("MuiSpeedDialIcon", ["root", "icon", "iconOpen", "iconWithOpenIconOpen", "openIcon", "openIconOpen"]), Wo = Kw, Yw = ["className", "icon", "open", "openIcon"], Xw = (e) => {
  const {
    classes: o,
    open: n,
    openIcon: r
  } = e;
  return te({
    root: ["root"],
    icon: ["icon", n && "iconOpen", r && n && "iconWithOpenIconOpen"],
    openIcon: ["openIcon", n && "openIconOpen"]
  }, Gw, o);
}, Qw = P("span", {
  name: "MuiSpeedDialIcon",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${Wo.icon}`]: o.icon
    }, {
      [`& .${Wo.icon}`]: n.open && o.iconOpen
    }, {
      [`& .${Wo.icon}`]: n.open && n.openIcon && o.iconWithOpenIconOpen
    }, {
      [`& .${Wo.openIcon}`]: o.openIcon
    }, {
      [`& .${Wo.openIcon}`]: n.open && o.openIconOpen
    }, o.root];
  }
})(({
  theme: e,
  ownerState: o
}) => ({
  height: 24,
  [`& .${Wo.icon}`]: u({
    transition: e.transitions.create(["transform", "opacity"], {
      duration: e.transitions.duration.short
    })
  }, o.open && u({
    transform: "rotate(45deg)"
  }, o.openIcon && {
    opacity: 0
  })),
  [`& .${Wo.openIcon}`]: u({
    position: "absolute",
    transition: e.transitions.create(["transform", "opacity"], {
      duration: e.transitions.duration.short
    }),
    opacity: 0,
    transform: "rotate(-45deg)"
  }, o.open && {
    transform: "rotate(0deg)",
    opacity: 1
  })
})), Za = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiSpeedDialIcon"
  }), {
    className: s,
    icon: a,
    openIcon: i
  } = r, l = z(r, Yw), c = r, d = Xw(c);
  function p(m, b) {
    return /* @__PURE__ */ f.isValidElement(m) ? /* @__PURE__ */ f.cloneElement(m, {
      className: b
    }) : m;
  }
  return /* @__PURE__ */ Ce(Qw, u({
    className: D(d.root, s),
    ref: n,
    ownerState: c
  }, l, {
    children: [i ? p(i, d.openIcon) : null, a ? p(a, d.icon) : /* @__PURE__ */ x(qw, {
      className: d.icon
    })]
  }));
});
process.env.NODE_ENV !== "production" && (Za.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The icon to display.
   */
  icon: t.node,
  /**
   * @ignore
   * If `true`, the component is shown.
   */
  open: t.bool,
  /**
   * The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.
   */
  openIcon: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
Za.muiName = "SpeedDialIcon";
const jM = Za, Ja = /* @__PURE__ */ f.createContext({});
process.env.NODE_ENV !== "production" && (Ja.displayName = "StepperContext");
function _M() {
  return f.useContext(Ja);
}
const Mn = Ja, ei = /* @__PURE__ */ f.createContext({});
process.env.NODE_ENV !== "production" && (ei.displayName = "StepContext");
function zM() {
  return f.useContext(ei);
}
const Cr = ei;
function Zw(e) {
  return ee("MuiStep", e);
}
const Jw = ne("MuiStep", ["root", "horizontal", "vertical", "alternativeLabel", "completed"]), VM = Jw, eE = ["active", "children", "className", "component", "completed", "disabled", "expanded", "index", "last"], tE = (e) => {
  const {
    classes: o,
    orientation: n,
    alternativeLabel: r,
    completed: s
  } = e;
  return te({
    root: ["root", n, r && "alternativeLabel", s && "completed"]
  }, Zw, o);
}, oE = P("div", {
  name: "MuiStep",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.orientation], n.alternativeLabel && o.alternativeLabel, n.completed && o.completed];
  }
})(({
  ownerState: e
}) => u({}, e.orientation === "horizontal" && {
  paddingLeft: 8,
  paddingRight: 8
}, e.alternativeLabel && {
  flex: 1,
  position: "relative"
})), mp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiStep"
  }), {
    active: s,
    children: a,
    className: i,
    component: l = "div",
    completed: c,
    disabled: d,
    expanded: p = !1,
    index: m,
    last: b
  } = r, h = z(r, eE), {
    activeStep: v,
    connector: C,
    alternativeLabel: g,
    orientation: y,
    nonLinear: $
  } = f.useContext(Mn);
  let [T = !1, O = !1, S = !1] = [s, c, d];
  v === m ? T = s !== void 0 ? s : !0 : !$ && v > m ? O = c !== void 0 ? c : !0 : !$ && v < m && (S = d !== void 0 ? d : !0);
  const R = f.useMemo(() => ({
    index: m,
    last: b,
    expanded: p,
    icon: m + 1,
    active: T,
    completed: O,
    disabled: S
  }), [m, b, p, T, O, S]), w = u({}, r, {
    active: T,
    orientation: y,
    alternativeLabel: g,
    completed: O,
    disabled: S,
    expanded: p,
    component: l
  }), E = tE(w), N = /* @__PURE__ */ Ce(oE, u({
    as: l,
    className: D(E.root, i),
    ref: n,
    ownerState: w
  }, h, {
    children: [C && g && m !== 0 ? C : null, a]
  }));
  return /* @__PURE__ */ x(Cr.Provider, {
    value: R,
    children: C && !g && m !== 0 ? /* @__PURE__ */ Ce(f.Fragment, {
      children: [C, N]
    }) : N
  });
});
process.env.NODE_ENV !== "production" && (mp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Sets the step as active. Is passed to child components.
   */
  active: t.bool,
  /**
   * Should be `Step` sub-components such as `StepLabel`, `StepContent`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Mark the step as completed. Is passed to child components.
   */
  completed: t.bool,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the step is disabled, will also disable the button if
   * `StepButton` is a child of `Step`. Is passed to child components.
   */
  disabled: t.bool,
  /**
   * Expand the step.
   * @default false
   */
  expanded: t.bool,
  /**
   * The position of the step.
   * The prop defaults to the value inherited from the parent Stepper component.
   */
  index: lt,
  /**
   * If `true`, the Step is displayed as rendered last.
   * The prop defaults to the value inherited from the parent Stepper component.
   */
  last: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const UM = mp, nE = Je(/* @__PURE__ */ x("path", {
  d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"
}), "CheckCircle"), rE = Je(/* @__PURE__ */ x("path", {
  d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"
}), "Warning");
function sE(e) {
  return ee("MuiStepIcon", e);
}
const aE = ne("MuiStepIcon", ["root", "active", "completed", "error", "text"]), Us = aE;
var Ml;
const iE = ["active", "className", "completed", "error", "icon"], lE = (e) => {
  const {
    classes: o,
    active: n,
    completed: r,
    error: s
  } = e;
  return te({
    root: ["root", n && "active", r && "completed", s && "error"],
    text: ["text"]
  }, sE, o);
}, Ws = P(ta, {
  name: "MuiStepIcon",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(({
  theme: e
}) => ({
  display: "block",
  transition: e.transitions.create("color", {
    duration: e.transitions.duration.shortest
  }),
  color: (e.vars || e).palette.text.disabled,
  [`&.${Us.completed}`]: {
    color: (e.vars || e).palette.primary.main
  },
  [`&.${Us.active}`]: {
    color: (e.vars || e).palette.primary.main
  },
  [`&.${Us.error}`]: {
    color: (e.vars || e).palette.error.main
  }
})), cE = P("text", {
  name: "MuiStepIcon",
  slot: "Text",
  overridesResolver: (e, o) => o.text
})(({
  theme: e
}) => ({
  fill: (e.vars || e).palette.primary.contrastText,
  fontSize: e.typography.caption.fontSize,
  fontFamily: e.typography.fontFamily
})), bp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiStepIcon"
  }), {
    active: s = !1,
    className: a,
    completed: i = !1,
    error: l = !1,
    icon: c
  } = r, d = z(r, iE), p = u({}, r, {
    active: s,
    completed: i,
    error: l
  }), m = lE(p);
  if (typeof c == "number" || typeof c == "string") {
    const b = D(a, m.root);
    return l ? /* @__PURE__ */ x(Ws, u({
      as: rE,
      className: b,
      ref: n,
      ownerState: p
    }, d)) : i ? /* @__PURE__ */ x(Ws, u({
      as: nE,
      className: b,
      ref: n,
      ownerState: p
    }, d)) : /* @__PURE__ */ Ce(Ws, u({
      className: b,
      ref: n,
      ownerState: p
    }, d, {
      children: [Ml || (Ml = /* @__PURE__ */ x("circle", {
        cx: "12",
        cy: "12",
        r: "12"
      })), /* @__PURE__ */ x(cE, {
        className: m.text,
        x: "12",
        y: "12",
        textAnchor: "middle",
        dominantBaseline: "central",
        ownerState: p,
        children: c
      })]
    }));
  }
  return c;
});
process.env.NODE_ENV !== "production" && (bp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Whether this step is active.
   * @default false
   */
  active: t.bool,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * Mark the step as completed. Is passed to child components.
   * @default false
   */
  completed: t.bool,
  /**
   * If `true`, the step is marked as failed.
   * @default false
   */
  error: t.bool,
  /**
   * The label displayed in the step icon.
   */
  icon: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const uE = bp;
function dE(e) {
  return ee("MuiStepLabel", e);
}
const pE = ne("MuiStepLabel", ["root", "horizontal", "vertical", "label", "active", "completed", "error", "disabled", "iconContainer", "alternativeLabel", "labelContainer"]), Fo = pE, fE = ["children", "className", "componentsProps", "error", "icon", "optional", "slotProps", "StepIconComponent", "StepIconProps"], mE = (e) => {
  const {
    classes: o,
    orientation: n,
    active: r,
    completed: s,
    error: a,
    disabled: i,
    alternativeLabel: l
  } = e;
  return te({
    root: ["root", n, a && "error", i && "disabled", l && "alternativeLabel"],
    label: ["label", r && "active", s && "completed", a && "error", i && "disabled", l && "alternativeLabel"],
    iconContainer: ["iconContainer", r && "active", s && "completed", a && "error", i && "disabled", l && "alternativeLabel"],
    labelContainer: ["labelContainer", l && "alternativeLabel"]
  }, dE, o);
}, bE = P("span", {
  name: "MuiStepLabel",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.orientation]];
  }
})(({
  ownerState: e
}) => u({
  display: "flex",
  alignItems: "center",
  [`&.${Fo.alternativeLabel}`]: {
    flexDirection: "column"
  },
  [`&.${Fo.disabled}`]: {
    cursor: "default"
  }
}, e.orientation === "vertical" && {
  textAlign: "left",
  padding: "8px 0"
})), gE = P("span", {
  name: "MuiStepLabel",
  slot: "Label",
  overridesResolver: (e, o) => o.label
})(({
  theme: e
}) => u({}, e.typography.body2, {
  display: "block",
  transition: e.transitions.create("color", {
    duration: e.transitions.duration.shortest
  }),
  [`&.${Fo.active}`]: {
    color: (e.vars || e).palette.text.primary,
    fontWeight: 500
  },
  [`&.${Fo.completed}`]: {
    color: (e.vars || e).palette.text.primary,
    fontWeight: 500
  },
  [`&.${Fo.alternativeLabel}`]: {
    marginTop: 16
  },
  [`&.${Fo.error}`]: {
    color: (e.vars || e).palette.error.main
  }
})), hE = P("span", {
  name: "MuiStepLabel",
  slot: "IconContainer",
  overridesResolver: (e, o) => o.iconContainer
})(() => ({
  flexShrink: 0,
  // Fix IE11 issue
  display: "flex",
  paddingRight: 8,
  [`&.${Fo.alternativeLabel}`]: {
    paddingRight: 0
  }
})), vE = P("span", {
  name: "MuiStepLabel",
  slot: "LabelContainer",
  overridesResolver: (e, o) => o.labelContainer
})(({
  theme: e
}) => ({
  width: "100%",
  color: (e.vars || e).palette.text.secondary,
  [`&.${Fo.alternativeLabel}`]: {
    textAlign: "center"
  }
})), ti = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r;
  const s = oe({
    props: o,
    name: "MuiStepLabel"
  }), {
    children: a,
    className: i,
    componentsProps: l = {},
    error: c = !1,
    icon: d,
    optional: p,
    slotProps: m = {},
    StepIconComponent: b,
    StepIconProps: h
  } = s, v = z(s, fE), {
    alternativeLabel: C,
    orientation: g
  } = f.useContext(Mn), {
    active: y,
    disabled: $,
    completed: T,
    icon: O
  } = f.useContext(Cr), S = d || O;
  let R = b;
  S && !R && (R = uE);
  const w = u({}, s, {
    active: y,
    alternativeLabel: C,
    completed: T,
    disabled: $,
    error: c,
    orientation: g
  }), E = mE(w), N = (r = m.label) != null ? r : l.label;
  return /* @__PURE__ */ Ce(bE, u({
    className: D(E.root, i),
    ref: n,
    ownerState: w
  }, v, {
    children: [S || R ? /* @__PURE__ */ x(hE, {
      className: E.iconContainer,
      ownerState: w,
      children: /* @__PURE__ */ x(R, u({
        completed: T,
        active: y,
        error: c,
        icon: S
      }, h))
    }) : null, /* @__PURE__ */ Ce(vE, {
      className: E.labelContainer,
      ownerState: w,
      children: [a ? /* @__PURE__ */ x(gE, u({
        ownerState: w
      }, N, {
        className: D(E.label, N == null ? void 0 : N.className),
        children: a
      })) : null, p]
    })]
  }));
});
process.env.NODE_ENV !== "production" && (ti.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * In most cases will simply be a string containing a title for the label.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  componentsProps: t.shape({
    label: t.object
  }),
  /**
   * If `true`, the step is marked as failed.
   * @default false
   */
  error: t.bool,
  /**
   * Override the default label of the step icon.
   */
  icon: t.node,
  /**
   * The optional node to display.
   */
  optional: t.node,
  /**
   * The props used for each slot inside.
   * @default {}
   */
  slotProps: t.shape({
    label: t.object
  }),
  /**
   * The component to render in place of the [`StepIcon`](/material-ui/api/step-icon/).
   */
  StepIconComponent: t.elementType,
  /**
   * Props applied to the [`StepIcon`](/material-ui/api/step-icon/) element.
   */
  StepIconProps: t.object,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
ti.muiName = "StepLabel";
const yE = ti;
function CE(e) {
  return ee("MuiStepButton", e);
}
const xE = ne("MuiStepButton", ["root", "horizontal", "vertical", "touchRipple"]), Bl = xE, TE = ["children", "className", "icon", "optional"], OE = (e) => {
  const {
    classes: o,
    orientation: n
  } = e;
  return te({
    root: ["root", n],
    touchRipple: ["touchRipple"]
  }, CE, o);
}, $E = P(pt, {
  name: "MuiStepButton",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${Bl.touchRipple}`]: o.touchRipple
    }, o.root, o[n.orientation]];
  }
})(({
  ownerState: e
}) => u({
  width: "100%",
  padding: "24px 16px",
  margin: "-24px -16px",
  boxSizing: "content-box"
}, e.orientation === "vertical" && {
  justifyContent: "flex-start",
  padding: "8px",
  margin: "-8px"
}, {
  [`& .${Bl.touchRipple}`]: {
    color: "rgba(0, 0, 0, 0.3)"
  }
})), gp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiStepButton"
  }), {
    children: s,
    className: a,
    icon: i,
    optional: l
  } = r, c = z(r, TE), {
    disabled: d,
    active: p
  } = f.useContext(Cr), {
    orientation: m
  } = f.useContext(Mn), b = u({}, r, {
    orientation: m
  }), h = OE(b), v = {
    icon: i,
    optional: l
  }, C = Co(s, ["StepLabel"]) ? /* @__PURE__ */ f.cloneElement(s, v) : /* @__PURE__ */ x(yE, u({}, v, {
    children: s
  }));
  return /* @__PURE__ */ x($E, u({
    focusRipple: !0,
    disabled: d,
    TouchRippleProps: {
      className: h.touchRipple
    },
    className: D(h.root, a),
    ref: n,
    ownerState: b,
    "aria-current": p ? "step" : void 0
  }, c, {
    children: C
  }));
});
process.env.NODE_ENV !== "production" && (gp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Can be a `StepLabel` or a node to place inside `StepLabel` as children.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The icon displayed by the step label.
   */
  icon: t.node,
  /**
   * The optional node to display.
   */
  optional: t.node,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const WM = gp;
function SE(e) {
  return ee("MuiStepConnector", e);
}
const RE = ne("MuiStepConnector", ["root", "horizontal", "vertical", "alternativeLabel", "active", "completed", "disabled", "line", "lineHorizontal", "lineVertical"]), HM = RE, wE = ["className"], EE = (e) => {
  const {
    classes: o,
    orientation: n,
    alternativeLabel: r,
    active: s,
    completed: a,
    disabled: i
  } = e, l = {
    root: ["root", n, r && "alternativeLabel", s && "active", a && "completed", i && "disabled"],
    line: ["line", `line${k(n)}`]
  };
  return te(l, SE, o);
}, PE = P("div", {
  name: "MuiStepConnector",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.orientation], n.alternativeLabel && o.alternativeLabel, n.completed && o.completed];
  }
})(({
  ownerState: e
}) => u({
  flex: "1 1 auto"
}, e.orientation === "vertical" && {
  marginLeft: 12
  // half icon
}, e.alternativeLabel && {
  position: "absolute",
  top: 8 + 4,
  left: "calc(-50% + 20px)",
  right: "calc(50% + 20px)"
})), NE = P("span", {
  name: "MuiStepConnector",
  slot: "Line",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.line, o[`line${k(n.orientation)}`]];
  }
})(({
  ownerState: e,
  theme: o
}) => {
  const n = o.palette.mode === "light" ? o.palette.grey[400] : o.palette.grey[600];
  return u({
    display: "block",
    borderColor: o.vars ? o.vars.palette.StepConnector.border : n
  }, e.orientation === "horizontal" && {
    borderTopStyle: "solid",
    borderTopWidth: 1
  }, e.orientation === "vertical" && {
    borderLeftStyle: "solid",
    borderLeftWidth: 1,
    minHeight: 24
  });
}), hp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiStepConnector"
  }), {
    className: s
  } = r, a = z(r, wE), {
    alternativeLabel: i,
    orientation: l = "horizontal"
  } = f.useContext(Mn), {
    active: c,
    disabled: d,
    completed: p
  } = f.useContext(Cr), m = u({}, r, {
    alternativeLabel: i,
    orientation: l,
    active: c,
    completed: p,
    disabled: d
  }), b = EE(m);
  return /* @__PURE__ */ x(PE, u({
    className: D(b.root, s),
    ref: n,
    ownerState: m
  }, a, {
    children: /* @__PURE__ */ x(NE, {
      className: b.line,
      ownerState: m
    })
  }));
});
process.env.NODE_ENV !== "production" && (hp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const IE = hp;
function kE(e) {
  return ee("MuiStepContent", e);
}
const ME = ne("MuiStepContent", ["root", "last", "transition"]), qM = ME, BE = ["children", "className", "TransitionComponent", "transitionDuration", "TransitionProps"], LE = (e) => {
  const {
    classes: o,
    last: n
  } = e;
  return te({
    root: ["root", n && "last"],
    transition: ["transition"]
  }, kE, o);
}, DE = P("div", {
  name: "MuiStepContent",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.last && o.last];
  }
})(({
  ownerState: e,
  theme: o
}) => u({
  marginLeft: 12,
  // half icon
  paddingLeft: 8 + 12,
  // margin + half icon
  paddingRight: 8,
  borderLeft: o.vars ? `1px solid ${o.vars.palette.StepContent.border}` : `1px solid ${o.palette.mode === "light" ? o.palette.grey[400] : o.palette.grey[600]}`
}, e.last && {
  borderLeft: "none"
})), AE = P($a, {
  name: "MuiStepContent",
  slot: "Transition",
  overridesResolver: (e, o) => o.transition
})({}), vp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiStepContent"
  }), {
    children: s,
    className: a,
    TransitionComponent: i = $a,
    transitionDuration: l = "auto",
    TransitionProps: c
  } = r, d = z(r, BE), {
    orientation: p
  } = f.useContext(Mn), {
    active: m,
    last: b,
    expanded: h
  } = f.useContext(Cr), v = u({}, r, {
    last: b
  }), C = LE(v);
  process.env.NODE_ENV !== "production" && p !== "vertical" && console.error("MUI: <StepContent /> is only designed for use with the vertical stepper.");
  let g = l;
  return l === "auto" && !i.muiSupportAuto && (g = void 0), /* @__PURE__ */ x(DE, u({
    className: D(C.root, a),
    ref: n,
    ownerState: v
  }, d, {
    children: /* @__PURE__ */ x(AE, u({
      as: i,
      in: m || h,
      className: C.transition,
      ownerState: v,
      timeout: g,
      unmountOnExit: !0
    }, c, {
      children: s
    }))
  }));
});
process.env.NODE_ENV !== "production" && (vp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The component used for the transition.
   * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
   * @default Collapse
   */
  TransitionComponent: t.elementType,
  /**
   * Adjust the duration of the content expand transition.
   * Passed as a prop to the transition component.
   *
   * Set to 'auto' to automatically calculate transition time based on height.
   * @default 'auto'
   */
  transitionDuration: t.oneOfType([t.oneOf(["auto"]), t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * Props applied to the transition element.
   * By default, the element is based on this [`Transition`](https://reactcommunity.org/react-transition-group/transition/) component.
   */
  TransitionProps: t.object
});
const GM = vp;
function FE(e) {
  return ee("MuiStepper", e);
}
const jE = ne("MuiStepper", ["root", "horizontal", "vertical", "alternativeLabel"]), KM = jE, _E = ["activeStep", "alternativeLabel", "children", "className", "component", "connector", "nonLinear", "orientation"], zE = (e) => {
  const {
    orientation: o,
    alternativeLabel: n,
    classes: r
  } = e;
  return te({
    root: ["root", o, n && "alternativeLabel"]
  }, FE, r);
}, VE = P("div", {
  name: "MuiStepper",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.orientation], n.alternativeLabel && o.alternativeLabel];
  }
})(({
  ownerState: e
}) => u({
  display: "flex"
}, e.orientation === "horizontal" && {
  flexDirection: "row",
  alignItems: "center"
}, e.orientation === "vertical" && {
  flexDirection: "column"
}, e.alternativeLabel && {
  alignItems: "flex-start"
})), UE = /* @__PURE__ */ x(IE, {}), yp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiStepper"
  }), {
    activeStep: s = 0,
    alternativeLabel: a = !1,
    children: i,
    className: l,
    component: c = "div",
    connector: d = UE,
    nonLinear: p = !1,
    orientation: m = "horizontal"
  } = r, b = z(r, _E), h = u({}, r, {
    alternativeLabel: a,
    orientation: m,
    component: c
  }), v = zE(h), C = f.Children.toArray(i).filter(Boolean), g = C.map(($, T) => /* @__PURE__ */ f.cloneElement($, u({
    index: T,
    last: T + 1 === C.length
  }, $.props))), y = f.useMemo(() => ({
    activeStep: s,
    alternativeLabel: a,
    connector: d,
    nonLinear: p,
    orientation: m
  }), [s, a, d, p, m]);
  return /* @__PURE__ */ x(Mn.Provider, {
    value: y,
    children: /* @__PURE__ */ x(VE, u({
      as: c,
      ownerState: h,
      className: D(v.root, l),
      ref: n
    }, b, {
      children: g
    }))
  });
});
process.env.NODE_ENV !== "production" && (yp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the active step (zero based index).
   * Set to -1 to disable all the steps.
   * @default 0
   */
  activeStep: lt,
  /**
   * If set to 'true' and orientation is horizontal,
   * then the step label will be positioned under the icon.
   * @default false
   */
  alternativeLabel: t.bool,
  /**
   * Two or more `<Step />` components.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * An element to be placed between each step.
   * @default <StepConnector />
   */
  connector: t.element,
  /**
   * If set the `Stepper` will not assist in controlling steps for linear flow.
   * @default false
   */
  nonLinear: t.bool,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: t.oneOf(["horizontal", "vertical"]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const YM = yp, WE = ["anchor", "classes", "className", "width", "style"], HE = P("div", {
  shouldForwardProp: dt
})(({
  theme: e,
  ownerState: o
}) => u({
  position: "fixed",
  top: 0,
  left: 0,
  bottom: 0,
  zIndex: e.zIndex.drawer - 1
}, o.anchor === "left" && {
  right: "auto"
}, o.anchor === "right" && {
  left: "auto",
  right: 0
}, o.anchor === "top" && {
  bottom: "auto",
  right: 0
}, o.anchor === "bottom" && {
  top: "auto",
  bottom: 0,
  right: 0
})), Cp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const {
    anchor: r,
    classes: s = {},
    className: a,
    width: i,
    style: l
  } = o, c = z(o, WE), d = o;
  return /* @__PURE__ */ x(HE, u({
    className: D("PrivateSwipeArea-root", s.root, s[`anchor${k(r)}`], a),
    ref: n,
    style: u({
      [Yo(r) ? "width" : "height"]: i
    }, l),
    ownerState: d
  }, c));
});
process.env.NODE_ENV !== "production" && (Cp.propTypes = {
  /**
   * Side on which to attach the discovery area.
   */
  anchor: t.oneOf(["left", "top", "right", "bottom"]).isRequired,
  /**
   * @ignore
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * @ignore
   */
  style: t.object,
  /**
   * The width of the left most (or right most) area in `px` where the
   * drawer can be swiped open from.
   */
  width: t.number.isRequired
});
const qE = Cp, GE = ["BackdropProps"], KE = ["anchor", "disableBackdropTransition", "disableDiscovery", "disableSwipeToOpen", "hideBackdrop", "hysteresis", "allowSwipeInChildren", "minFlingVelocity", "ModalProps", "onClose", "onOpen", "open", "PaperProps", "SwipeAreaProps", "swipeAreaWidth", "transitionDuration", "variant"], _r = 3, Hs = 20;
let ho = null;
function qs(e, o, n) {
  return e === "right" ? n.body.offsetWidth - o[0].pageX : o[0].pageX;
}
function Gs(e, o, n) {
  return e === "bottom" ? n.innerHeight - o[0].clientY : o[0].clientY;
}
function Un(e, o) {
  return e ? o.clientWidth : o.clientHeight;
}
function Ll(e, o, n, r) {
  return Math.min(Math.max(n ? o - e : r + o - e, 0), r);
}
function YE(e, o) {
  const n = [];
  for (; e && e !== o.parentElement; ) {
    const r = Rt(o).getComputedStyle(e);
    // Ignore the scroll children if the element is absolute positioned.
    r.getPropertyValue("position") === "absolute" || // Ignore the scroll children if the element has an overflowX hidden
    r.getPropertyValue("overflow-x") === "hidden" || (e.clientWidth > 0 && e.scrollWidth > e.clientWidth || e.clientHeight > 0 && e.scrollHeight > e.clientHeight) && n.push(e), e = e.parentElement;
  }
  return n;
}
function XE({
  domTreeShapes: e,
  start: o,
  current: n,
  anchor: r
}) {
  const s = {
    scrollPosition: {
      x: "scrollLeft",
      y: "scrollTop"
    },
    scrollLength: {
      x: "scrollWidth",
      y: "scrollHeight"
    },
    clientLength: {
      x: "clientWidth",
      y: "clientHeight"
    }
  };
  return e.some((a) => {
    let i = n >= o;
    (r === "top" || r === "left") && (i = !i);
    const l = r === "left" || r === "right" ? "x" : "y", c = Math.round(a[s.scrollPosition[l]]), d = c > 0, p = c + a[s.clientLength[l]] < a[s.scrollLength[l]];
    return !!(i && p || !i && d);
  });
}
const QE = typeof navigator < "u" && /iPad|iPhone|iPod/.test(navigator.userAgent), xp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = ms({
    name: "MuiSwipeableDrawer",
    props: o
  }), s = rt(), a = {
    enter: s.transitions.duration.enteringScreen,
    exit: s.transitions.duration.leavingScreen
  }, {
    anchor: i = "left",
    disableBackdropTransition: l = !1,
    disableDiscovery: c = !1,
    disableSwipeToOpen: d = QE,
    hideBackdrop: p,
    hysteresis: m = 0.52,
    allowSwipeInChildren: b = !1,
    minFlingVelocity: h = 450,
    ModalProps: {
      BackdropProps: v
    } = {},
    onClose: C,
    onOpen: g,
    open: y = !1,
    PaperProps: $ = {},
    SwipeAreaProps: T,
    swipeAreaWidth: O = 20,
    transitionDuration: S = a,
    variant: R = "temporary"
    // Mobile first.
  } = r, w = z(r.ModalProps, GE), E = z(r, KE), [N, M] = f.useState(!1), I = f.useRef({
    isSwiping: null
  }), F = f.useRef(), A = f.useRef(), B = f.useRef(), j = Ve($.ref, B), V = f.useRef(!1), U = f.useRef();
  bt(() => {
    U.current = null;
  }, [y]);
  const _ = f.useCallback((ie, se = {}) => {
    const {
      mode: ue = null,
      changeTransition: Z = !0
    } = se, he = qn(s, i), q = ["right", "bottom"].indexOf(he) !== -1 ? 1 : -1, le = Yo(i), Oe = le ? `translate(${q * ie}px, 0)` : `translate(0, ${q * ie}px)`, fe = B.current.style;
    fe.webkitTransform = Oe, fe.transform = Oe;
    let me = "";
    if (ue && (me = s.transitions.create("all", eo({
      easing: void 0,
      style: void 0,
      timeout: S
    }, {
      mode: ue
    }))), Z && (fe.webkitTransition = me, fe.transition = me), !l && !p) {
      const ve = A.current.style;
      ve.opacity = 1 - ie / Un(le, B.current), Z && (ve.webkitTransition = me, ve.transition = me);
    }
  }, [i, l, p, s, S]), W = nt((ie) => {
    if (!V.current)
      return;
    if (ho = null, V.current = !1, Qs.flushSync(() => {
      M(!1);
    }), !I.current.isSwiping) {
      I.current.isSwiping = null;
      return;
    }
    I.current.isSwiping = null;
    const se = qn(s, i), ue = Yo(i);
    let Z;
    ue ? Z = qs(se, ie.changedTouches, Xe(ie.currentTarget)) : Z = Gs(se, ie.changedTouches, Rt(ie.currentTarget));
    const he = ue ? I.current.startX : I.current.startY, q = Un(ue, B.current), le = Ll(Z, he, y, q), Oe = le / q;
    if (Math.abs(I.current.velocity) > h && (U.current = Math.abs((q - le) / I.current.velocity) * 1e3), y) {
      I.current.velocity > h || Oe > m ? C() : _(0, {
        mode: "exit"
      });
      return;
    }
    I.current.velocity < -h || 1 - Oe > m ? g() : _(Un(ue, B.current), {
      mode: "enter"
    });
  }), de = (ie = !1) => {
    if (!N) {
      (ie || !(c && b)) && Qs.flushSync(() => {
        M(!0);
      });
      const se = Yo(i);
      !y && B.current && _(Un(se, B.current) + (c ? 15 : -Hs), {
        changeTransition: !1
      }), I.current.velocity = 0, I.current.lastTime = null, I.current.lastTranslate = null, I.current.paperHit = !1, V.current = !0;
    }
  }, Te = nt((ie) => {
    if (!B.current || !V.current || ho !== null && ho !== I.current)
      return;
    de(!0);
    const se = qn(s, i), ue = Yo(i), Z = qs(se, ie.touches, Xe(ie.currentTarget)), he = Gs(se, ie.touches, Rt(ie.currentTarget));
    if (y && B.current.contains(ie.target) && ho === null) {
      const me = YE(ie.target, B.current);
      if (XE({
        domTreeShapes: me,
        start: ue ? I.current.startX : I.current.startY,
        current: ue ? Z : he,
        anchor: i
      })) {
        ho = !0;
        return;
      }
      ho = I.current;
    }
    if (I.current.isSwiping == null) {
      const me = Math.abs(Z - I.current.startX), ve = Math.abs(he - I.current.startY), Y = ue ? me > ve && me > _r : ve > me && ve > _r;
      if (Y && ie.cancelable && ie.preventDefault(), Y === !0 || (ue ? ve > _r : me > _r)) {
        if (I.current.isSwiping = Y, !Y) {
          W(ie);
          return;
        }
        I.current.startX = Z, I.current.startY = he, !c && !y && (ue ? I.current.startX -= Hs : I.current.startY -= Hs);
      }
    }
    if (!I.current.isSwiping)
      return;
    const q = Un(ue, B.current);
    let le = ue ? I.current.startX : I.current.startY;
    y && !I.current.paperHit && (le = Math.min(le, q));
    const Oe = Ll(ue ? Z : he, le, y, q);
    if (y)
      if (I.current.paperHit)
        Oe === 0 && (I.current.startX = Z, I.current.startY = he);
      else if (ue ? Z < q : he < q)
        I.current.paperHit = !0, I.current.startX = Z, I.current.startY = he;
      else
        return;
    I.current.lastTranslate === null && (I.current.lastTranslate = Oe, I.current.lastTime = performance.now() + 1);
    const fe = (Oe - I.current.lastTranslate) / (performance.now() - I.current.lastTime) * 1e3;
    I.current.velocity = I.current.velocity * 0.4 + fe * 0.6, I.current.lastTranslate = Oe, I.current.lastTime = performance.now(), ie.cancelable && ie.preventDefault(), _(Oe);
  }), $e = nt((ie) => {
    if (ie.defaultPrevented || ie.defaultMuiPrevented || y && (p || !A.current.contains(ie.target)) && !B.current.contains(ie.target))
      return;
    const se = qn(s, i), ue = Yo(i), Z = qs(se, ie.touches, Xe(ie.currentTarget)), he = Gs(se, ie.touches, Rt(ie.currentTarget));
    if (!y) {
      var q;
      if (d || !(ie.target === F.current || (q = B.current) != null && q.contains(ie.target) && (typeof b == "function" ? b(ie, F.current, B.current) : b)))
        return;
      if (ue) {
        if (Z > O)
          return;
      } else if (he > O)
        return;
    }
    ie.defaultMuiPrevented = !0, ho = null, I.current.startX = Z, I.current.startY = he, de();
  });
  return f.useEffect(() => {
    if (R === "temporary") {
      const ie = Xe(B.current);
      return ie.addEventListener("touchstart", $e), ie.addEventListener("touchmove", Te, {
        passive: !y
      }), ie.addEventListener("touchend", W), () => {
        ie.removeEventListener("touchstart", $e), ie.removeEventListener("touchmove", Te, {
          passive: !y
        }), ie.removeEventListener("touchend", W);
      };
    }
  }, [R, y, $e, Te, W]), f.useEffect(() => () => {
    ho === I.current && (ho = null);
  }, []), f.useEffect(() => {
    y || M(!1);
  }, [y]), /* @__PURE__ */ Ce(f.Fragment, {
    children: [/* @__PURE__ */ x(p0, u({
      open: R === "temporary" && N ? !0 : y,
      variant: R,
      ModalProps: u({
        BackdropProps: u({}, v, {
          ref: A
        })
      }, R === "temporary" && {
        keepMounted: !0
      }, w),
      hideBackdrop: p,
      PaperProps: u({}, $, {
        style: u({
          pointerEvents: R === "temporary" && !y && !b ? "none" : ""
        }, $.style),
        ref: j
      }),
      anchor: i,
      transitionDuration: U.current || S,
      onClose: C,
      ref: n
    }, E)), !d && R === "temporary" && /* @__PURE__ */ x(Jr, {
      children: /* @__PURE__ */ x(qE, u({
        anchor: i,
        ref: F,
        width: O
      }, T))
    })]
  });
});
process.env.NODE_ENV !== "production" && (xp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If set to true, the swipe event will open the drawer even if the user begins the swipe on one of the drawer's children.
   * This can be useful in scenarios where the drawer is partially visible.
   * You can customize it further with a callback that determines which children the user can drag over to open the drawer
   * (for example, to ignore other elements that handle touch move events, like sliders).
   *
   * @param {TouchEvent} event The 'touchstart' event
   * @param {HTMLDivElement} swipeArea The swipe area element
   * @param {HTMLDivElement} paper The drawer's paper element
   *
   * @default false
   */
  allowSwipeInChildren: t.oneOfType([t.func, t.bool]),
  /**
   * @ignore
   */
  anchor: t.oneOf(["bottom", "left", "right", "top"]),
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Disable the backdrop transition.
   * This can improve the FPS on low-end devices.
   * @default false
   */
  disableBackdropTransition: t.bool,
  /**
   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit
   * to promote accidental discovery of the swipe gesture.
   * @default false
   */
  disableDiscovery: t.bool,
  /**
   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers
   * navigation actions. Swipe to open is disabled on iOS browsers by default.
   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)
   */
  disableSwipeToOpen: t.bool,
  /**
   * @ignore
   */
  hideBackdrop: t.bool,
  /**
   * Affects how far the drawer must be opened/closed to change its state.
   * Specified as percent (0-1) of the width of the drawer
   * @default 0.52
   */
  hysteresis: t.number,
  /**
   * Defines, from which (average) velocity on, the swipe is
   * defined as complete although hysteresis isn't reached.
   * Good threshold is between 250 - 1000 px/s
   * @default 450
   */
  minFlingVelocity: t.number,
  /**
   * @ignore
   */
  ModalProps: t.shape({
    BackdropProps: t.shape({
      component: jo
    })
  }),
  /**
   * Callback fired when the component requests to be closed.
   *
   * @param {React.SyntheticEvent<{}>} event The event source of the callback.
   */
  onClose: t.func.isRequired,
  /**
   * Callback fired when the component requests to be opened.
   *
   * @param {React.SyntheticEvent<{}>} event The event source of the callback.
   */
  onOpen: t.func.isRequired,
  /**
   * If `true`, the component is shown.
   * @default false
   */
  open: t.bool,
  /**
   * @ignore
   */
  PaperProps: t.shape({
    component: jo,
    style: t.object
  }),
  /**
   * The element is used to intercept the touch events on the edge.
   */
  SwipeAreaProps: t.object,
  /**
   * The width of the left most (or right most) area in `px` that
   * the drawer can be swiped open from.
   * @default 20
   */
  swipeAreaWidth: t.number,
  /**
   * The duration for the transition, in milliseconds.
   * You may specify a single timeout for all transitions, or individually with an object.
   * @default {
   *   enter: theme.transitions.duration.enteringScreen,
   *   exit: theme.transitions.duration.leavingScreen,
   * }
   */
  transitionDuration: t.oneOfType([t.number, t.shape({
    appear: t.number,
    enter: t.number,
    exit: t.number
  })]),
  /**
   * @ignore
   */
  variant: t.oneOf(["permanent", "persistent", "temporary"])
});
const XM = xp;
function ZE(e) {
  return ee("MuiSwitch", e);
}
const JE = ne("MuiSwitch", ["root", "edgeStart", "edgeEnd", "switchBase", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium", "checked", "disabled", "input", "thumb", "track"]), Ot = JE, eP = ["className", "color", "edge", "size", "sx"], tP = (e) => {
  const {
    classes: o,
    edge: n,
    size: r,
    color: s,
    checked: a,
    disabled: i
  } = e, l = {
    root: ["root", n && `edge${k(n)}`, `size${k(r)}`],
    switchBase: ["switchBase", `color${k(s)}`, a && "checked", i && "disabled"],
    thumb: ["thumb"],
    track: ["track"],
    input: ["input"]
  }, c = te(l, ZE, o);
  return u({}, o, c);
}, oP = P("span", {
  name: "MuiSwitch",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.edge && o[`edge${k(n.edge)}`], o[`size${k(n.size)}`]];
  }
})(({
  ownerState: e
}) => u({
  display: "inline-flex",
  width: 34 + 12 * 2,
  height: 14 + 12 * 2,
  overflow: "hidden",
  padding: 12,
  boxSizing: "border-box",
  position: "relative",
  flexShrink: 0,
  zIndex: 0,
  // Reset the stacking context.
  verticalAlign: "middle",
  // For correct alignment with the text.
  "@media print": {
    colorAdjust: "exact"
  }
}, e.edge === "start" && {
  marginLeft: -8
}, e.edge === "end" && {
  marginRight: -8
}, e.size === "small" && {
  width: 40,
  height: 24,
  padding: 7,
  [`& .${Ot.thumb}`]: {
    width: 16,
    height: 16
  },
  [`& .${Ot.switchBase}`]: {
    padding: 4,
    [`&.${Ot.checked}`]: {
      transform: "translateX(16px)"
    }
  }
})), nP = P(Da, {
  name: "MuiSwitch",
  slot: "SwitchBase",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.switchBase, {
      [`& .${Ot.input}`]: o.input
    }, n.color !== "default" && o[`color${k(n.color)}`]];
  }
})(({
  theme: e
}) => ({
  position: "absolute",
  top: 0,
  left: 0,
  zIndex: 1,
  // Render above the focus ripple.
  color: e.vars ? e.vars.palette.Switch.defaultColor : `${e.palette.mode === "light" ? e.palette.common.white : e.palette.grey[300]}`,
  transition: e.transitions.create(["left", "transform"], {
    duration: e.transitions.duration.shortest
  }),
  [`&.${Ot.checked}`]: {
    transform: "translateX(20px)"
  },
  [`&.${Ot.disabled}`]: {
    color: e.vars ? e.vars.palette.Switch.defaultDisabledColor : `${e.palette.mode === "light" ? e.palette.grey[100] : e.palette.grey[600]}`
  },
  [`&.${Ot.checked} + .${Ot.track}`]: {
    opacity: 0.5
  },
  [`&.${Ot.disabled} + .${Ot.track}`]: {
    opacity: e.vars ? e.vars.opacity.switchTrackDisabled : `${e.palette.mode === "light" ? 0.12 : 0.2}`
  },
  [`& .${Ot.input}`]: {
    left: "-100%",
    width: "300%"
  }
}), ({
  theme: e,
  ownerState: o
}) => u({
  "&:hover": {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.action.activeChannel} / ${e.vars.palette.action.hoverOpacity})` : Pe(e.palette.action.active, e.palette.action.hoverOpacity),
    // Reset on touch devices, it doesn't add specificity
    "@media (hover: none)": {
      backgroundColor: "transparent"
    }
  }
}, o.color !== "default" && {
  [`&.${Ot.checked}`]: {
    color: (e.vars || e).palette[o.color].main,
    "&:hover": {
      backgroundColor: e.vars ? `rgba(${e.vars.palette[o.color].mainChannel} / ${e.vars.palette.action.hoverOpacity})` : Pe(e.palette[o.color].main, e.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${Ot.disabled}`]: {
      color: e.vars ? e.vars.palette.Switch[`${o.color}DisabledColor`] : `${e.palette.mode === "light" ? ps(e.palette[o.color].main, 0.62) : fs(e.palette[o.color].main, 0.55)}`
    }
  },
  [`&.${Ot.checked} + .${Ot.track}`]: {
    backgroundColor: (e.vars || e).palette[o.color].main
  }
})), rP = P("span", {
  name: "MuiSwitch",
  slot: "Track",
  overridesResolver: (e, o) => o.track
})(({
  theme: e
}) => ({
  height: "100%",
  width: "100%",
  borderRadius: 14 / 2,
  zIndex: -1,
  transition: e.transitions.create(["opacity", "background-color"], {
    duration: e.transitions.duration.shortest
  }),
  backgroundColor: e.vars ? e.vars.palette.common.onBackground : `${e.palette.mode === "light" ? e.palette.common.black : e.palette.common.white}`,
  opacity: e.vars ? e.vars.opacity.switchTrack : `${e.palette.mode === "light" ? 0.38 : 0.3}`
})), sP = P("span", {
  name: "MuiSwitch",
  slot: "Thumb",
  overridesResolver: (e, o) => o.thumb
})(({
  theme: e
}) => ({
  boxShadow: (e.vars || e).shadows[1],
  backgroundColor: "currentColor",
  width: 20,
  height: 20,
  borderRadius: "50%"
})), Tp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiSwitch"
  }), {
    className: s,
    color: a = "primary",
    edge: i = !1,
    size: l = "medium",
    sx: c
  } = r, d = z(r, eP), p = u({}, r, {
    color: a,
    edge: i,
    size: l
  }), m = tP(p), b = /* @__PURE__ */ x(sP, {
    className: m.thumb,
    ownerState: p
  });
  return /* @__PURE__ */ Ce(oP, {
    className: D(m.root, s),
    sx: c,
    ownerState: p,
    children: [/* @__PURE__ */ x(nP, u({
      type: "checkbox",
      icon: b,
      checkedIcon: b,
      ref: n,
      ownerState: p
    }, d, {
      classes: u({}, m, {
        root: m.switchBase
      })
    })), /* @__PURE__ */ x(rP, {
      className: m.track,
      ownerState: p
    })]
  });
});
process.env.NODE_ENV !== "production" && (Tp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the component is checked.
   */
  checked: t.bool,
  /**
   * The icon to display when the component is checked.
   */
  checkedIcon: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The default checked state. Use when the component is not controlled.
   */
  defaultChecked: t.bool,
  /**
   * If `true`, the component is disabled.
   */
  disabled: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * If given, uses a negative margin to counteract the padding on one
   * side (this is often helpful for aligning the left or right
   * side of the icon with content above or below, without ruining the border
   * size and shape).
   * @default false
   */
  edge: t.oneOf(["end", "start", !1]),
  /**
   * The icon to display when the component is unchecked.
   */
  icon: t.node,
  /**
   * The id of the `input` element.
   */
  id: t.string,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: yt,
  /**
   * Callback fired when the state is changed.
   *
   * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
   */
  onChange: t.func,
  /**
   * If `true`, the `input` element is required.
   * @default false
   */
  required: t.bool,
  /**
   * The size of the component.
   * `small` is equivalent to the dense switch styling.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value of the component. The DOM API casts this to a string.
   * The browser uses "on" as the default value.
   */
  value: t.any
});
const QM = Tp;
function aP(e) {
  return ee("MuiTab", e);
}
const iP = ne("MuiTab", ["root", "labelIcon", "textColorInherit", "textColorPrimary", "textColorSecondary", "selected", "disabled", "fullWidth", "wrapped", "iconWrapper"]), Ho = iP, lP = ["className", "disabled", "disableFocusRipple", "fullWidth", "icon", "iconPosition", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"], cP = (e) => {
  const {
    classes: o,
    textColor: n,
    fullWidth: r,
    wrapped: s,
    icon: a,
    label: i,
    selected: l,
    disabled: c
  } = e, d = {
    root: ["root", a && i && "labelIcon", `textColor${k(n)}`, r && "fullWidth", s && "wrapped", l && "selected", c && "disabled"],
    iconWrapper: ["iconWrapper"]
  };
  return te(d, aP, o);
}, uP = P(pt, {
  name: "MuiTab",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.label && n.icon && o.labelIcon, o[`textColor${k(n.textColor)}`], n.fullWidth && o.fullWidth, n.wrapped && o.wrapped];
  }
})(({
  theme: e,
  ownerState: o
}) => u({}, e.typography.button, {
  maxWidth: 360,
  minWidth: 90,
  position: "relative",
  minHeight: 48,
  flexShrink: 0,
  padding: "12px 16px",
  overflow: "hidden",
  whiteSpace: "normal",
  textAlign: "center"
}, o.label && {
  flexDirection: o.iconPosition === "top" || o.iconPosition === "bottom" ? "column" : "row"
}, {
  lineHeight: 1.25
}, o.icon && o.label && {
  minHeight: 72,
  paddingTop: 9,
  paddingBottom: 9,
  [`& > .${Ho.iconWrapper}`]: u({}, o.iconPosition === "top" && {
    marginBottom: 6
  }, o.iconPosition === "bottom" && {
    marginTop: 6
  }, o.iconPosition === "start" && {
    marginRight: e.spacing(1)
  }, o.iconPosition === "end" && {
    marginLeft: e.spacing(1)
  })
}, o.textColor === "inherit" && {
  color: "inherit",
  opacity: 0.6,
  // same opacity as theme.palette.text.secondary
  [`&.${Ho.selected}`]: {
    opacity: 1
  },
  [`&.${Ho.disabled}`]: {
    opacity: (e.vars || e).palette.action.disabledOpacity
  }
}, o.textColor === "primary" && {
  color: (e.vars || e).palette.text.secondary,
  [`&.${Ho.selected}`]: {
    color: (e.vars || e).palette.primary.main
  },
  [`&.${Ho.disabled}`]: {
    color: (e.vars || e).palette.text.disabled
  }
}, o.textColor === "secondary" && {
  color: (e.vars || e).palette.text.secondary,
  [`&.${Ho.selected}`]: {
    color: (e.vars || e).palette.secondary.main
  },
  [`&.${Ho.disabled}`]: {
    color: (e.vars || e).palette.text.disabled
  }
}, o.fullWidth && {
  flexShrink: 1,
  flexGrow: 1,
  flexBasis: 0,
  maxWidth: "none"
}, o.wrapped && {
  fontSize: e.typography.pxToRem(12)
})), Op = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiTab"
  }), {
    className: s,
    disabled: a = !1,
    disableFocusRipple: i = !1,
    // eslint-disable-next-line react/prop-types
    fullWidth: l,
    icon: c,
    iconPosition: d = "top",
    // eslint-disable-next-line react/prop-types
    indicator: p,
    label: m,
    onChange: b,
    onClick: h,
    onFocus: v,
    // eslint-disable-next-line react/prop-types
    selected: C,
    // eslint-disable-next-line react/prop-types
    selectionFollowsFocus: g,
    // eslint-disable-next-line react/prop-types
    textColor: y = "inherit",
    value: $,
    wrapped: T = !1
  } = r, O = z(r, lP), S = u({}, r, {
    disabled: a,
    disableFocusRipple: i,
    selected: C,
    icon: !!c,
    iconPosition: d,
    label: !!m,
    fullWidth: l,
    textColor: y,
    wrapped: T
  }), R = cP(S), w = c && m && /* @__PURE__ */ f.isValidElement(c) ? /* @__PURE__ */ f.cloneElement(c, {
    className: D(R.iconWrapper, c.props.className)
  }) : c, E = (M) => {
    !C && b && b(M, $), h && h(M);
  }, N = (M) => {
    g && !C && b && b(M, $), v && v(M);
  };
  return /* @__PURE__ */ Ce(uP, u({
    focusRipple: !i,
    className: D(R.root, s),
    ref: n,
    role: "tab",
    "aria-selected": C,
    disabled: a,
    onClick: E,
    onFocus: N,
    ownerState: S,
    tabIndex: C ? 0 : -1
  }, O, {
    children: [d === "top" || d === "start" ? /* @__PURE__ */ Ce(f.Fragment, {
      children: [w, m]
    }) : /* @__PURE__ */ Ce(f.Fragment, {
      children: [m, w]
    }), p]
  }));
});
process.env.NODE_ENV !== "production" && (Op.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop isn't supported.
   * Use the `component` prop if you need to change the children structure.
   */
  children: ga,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * The icon to display.
   */
  icon: t.oneOfType([t.element, t.string]),
  /**
   * The position of the icon relative to the label.
   * @default 'top'
   */
  iconPosition: t.oneOf(["bottom", "end", "start", "top"]),
  /**
   * The label element.
   */
  label: t.node,
  /**
   * @ignore
   */
  onChange: t.func,
  /**
   * @ignore
   */
  onClick: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * You can provide your own value. Otherwise, we fallback to the child position index.
   */
  value: t.any,
  /**
   * Tab labels appear in a single row.
   * They can use a second line if needed.
   * @default false
   */
  wrapped: t.bool
});
const ZM = Op, $p = /* @__PURE__ */ f.createContext();
process.env.NODE_ENV !== "production" && ($p.displayName = "TableContext");
const Sp = $p;
function dP(e) {
  return ee("MuiTable", e);
}
const pP = ne("MuiTable", ["root", "stickyHeader"]), JM = pP, fP = ["className", "component", "padding", "size", "stickyHeader"], mP = (e) => {
  const {
    classes: o,
    stickyHeader: n
  } = e;
  return te({
    root: ["root", n && "stickyHeader"]
  }, dP, o);
}, bP = P("table", {
  name: "MuiTable",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.stickyHeader && o.stickyHeader];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  display: "table",
  width: "100%",
  borderCollapse: "collapse",
  borderSpacing: 0,
  "& caption": u({}, e.typography.body2, {
    padding: e.spacing(2),
    color: (e.vars || e).palette.text.secondary,
    textAlign: "left",
    captionSide: "bottom"
  })
}, o.stickyHeader && {
  borderCollapse: "separate"
})), Dl = "table", Rp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiTable"
  }), {
    className: s,
    component: a = Dl,
    padding: i = "normal",
    size: l = "medium",
    stickyHeader: c = !1
  } = r, d = z(r, fP), p = u({}, r, {
    component: a,
    padding: i,
    size: l,
    stickyHeader: c
  }), m = mP(p), b = f.useMemo(() => ({
    padding: i,
    size: l,
    stickyHeader: c
  }), [i, l, c]);
  return /* @__PURE__ */ x(Sp.Provider, {
    value: b,
    children: /* @__PURE__ */ x(bP, u({
      as: a,
      role: a === Dl ? null : "table",
      ref: n,
      className: D(m.root, s),
      ownerState: p
    }, d))
  });
});
process.env.NODE_ENV !== "production" && (Rp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the table, normally `TableHead` and `TableBody`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Allows TableCells to inherit padding of the Table.
   * @default 'normal'
   */
  padding: t.oneOf(["checkbox", "none", "normal"]),
  /**
   * Allows TableCells to inherit size of the Table.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * Set the header sticky.
   *
   * ⚠️ It doesn't work with IE11.
   * @default false
   */
  stickyHeader: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const eB = Rp, wp = /* @__PURE__ */ f.createContext();
process.env.NODE_ENV !== "production" && (wp.displayName = "Tablelvl2Context");
const xr = wp;
function gP(e) {
  return ee("MuiTableBody", e);
}
const hP = ne("MuiTableBody", ["root"]), tB = hP, vP = ["className", "component"], yP = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"]
  }, gP, o);
}, CP = P("tbody", {
  name: "MuiTableBody",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  display: "table-row-group"
}), xP = {
  variant: "body"
}, Al = "tbody", Ep = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiTableBody"
  }), {
    className: s,
    component: a = Al
  } = r, i = z(r, vP), l = u({}, r, {
    component: a
  }), c = yP(l);
  return /* @__PURE__ */ x(xr.Provider, {
    value: xP,
    children: /* @__PURE__ */ x(CP, u({
      className: D(c.root, s),
      as: a,
      ref: n,
      role: a === Al ? null : "rowgroup",
      ownerState: l
    }, i))
  });
});
process.env.NODE_ENV !== "production" && (Ep.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally `TableRow`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const oB = Ep;
function TP(e) {
  return ee("MuiTableCell", e);
}
const OP = ne("MuiTableCell", ["root", "head", "body", "footer", "sizeSmall", "sizeMedium", "paddingCheckbox", "paddingNone", "alignLeft", "alignCenter", "alignRight", "alignJustify", "stickyHeader"]), $P = OP, SP = ["align", "className", "component", "padding", "scope", "size", "sortDirection", "variant"], RP = (e) => {
  const {
    classes: o,
    variant: n,
    align: r,
    padding: s,
    size: a,
    stickyHeader: i
  } = e, l = {
    root: ["root", n, i && "stickyHeader", r !== "inherit" && `align${k(r)}`, s !== "normal" && `padding${k(s)}`, `size${k(a)}`]
  };
  return te(l, TP, o);
}, wP = P("td", {
  name: "MuiTableCell",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[n.variant], o[`size${k(n.size)}`], n.padding !== "normal" && o[`padding${k(n.padding)}`], n.align !== "inherit" && o[`align${k(n.align)}`], n.stickyHeader && o.stickyHeader];
  }
})(({
  theme: e,
  ownerState: o
}) => u({}, e.typography.body2, {
  display: "table-cell",
  verticalAlign: "inherit",
  // Workaround for a rendering bug with spanned columns in Chrome 62.0.
  // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
  borderBottom: e.vars ? `1px solid ${e.vars.palette.TableCell.border}` : `1px solid
    ${e.palette.mode === "light" ? ps(Pe(e.palette.divider, 1), 0.88) : fs(Pe(e.palette.divider, 1), 0.68)}`,
  textAlign: "left",
  padding: 16
}, o.variant === "head" && {
  color: (e.vars || e).palette.text.primary,
  lineHeight: e.typography.pxToRem(24),
  fontWeight: e.typography.fontWeightMedium
}, o.variant === "body" && {
  color: (e.vars || e).palette.text.primary
}, o.variant === "footer" && {
  color: (e.vars || e).palette.text.secondary,
  lineHeight: e.typography.pxToRem(21),
  fontSize: e.typography.pxToRem(12)
}, o.size === "small" && {
  padding: "6px 16px",
  [`&.${$P.paddingCheckbox}`]: {
    width: 24,
    // prevent the checkbox column from growing
    padding: "0 12px 0 16px",
    "& > *": {
      padding: 0
    }
  }
}, o.padding === "checkbox" && {
  width: 48,
  // prevent the checkbox column from growing
  padding: "0 0 0 4px"
}, o.padding === "none" && {
  padding: 0
}, o.align === "left" && {
  textAlign: "left"
}, o.align === "center" && {
  textAlign: "center"
}, o.align === "right" && {
  textAlign: "right",
  flexDirection: "row-reverse"
}, o.align === "justify" && {
  textAlign: "justify"
}, o.stickyHeader && {
  position: "sticky",
  top: 0,
  zIndex: 2,
  backgroundColor: (e.vars || e).palette.background.default
})), Pp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiTableCell"
  }), {
    align: s = "inherit",
    className: a,
    component: i,
    padding: l,
    scope: c,
    size: d,
    sortDirection: p,
    variant: m
  } = r, b = z(r, SP), h = f.useContext(Sp), v = f.useContext(xr), C = v && v.variant === "head";
  let g;
  i ? g = i : g = C ? "th" : "td";
  let y = c;
  g === "td" ? y = void 0 : !y && C && (y = "col");
  const $ = m || v && v.variant, T = u({}, r, {
    align: s,
    component: g,
    padding: l || (h && h.padding ? h.padding : "normal"),
    size: d || (h && h.size ? h.size : "medium"),
    sortDirection: p,
    stickyHeader: $ === "head" && h && h.stickyHeader,
    variant: $
  }), O = RP(T);
  let S = null;
  return p && (S = p === "asc" ? "ascending" : "descending"), /* @__PURE__ */ x(wP, u({
    as: g,
    ref: n,
    className: D(O.root, a),
    "aria-sort": S,
    scope: y,
    ownerState: T
  }, b));
});
process.env.NODE_ENV !== "production" && (Pp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Set the text-align on the table cell content.
   *
   * Monetary or generally number fields **should be right aligned** as that allows
   * you to add them up quickly in your head without having to worry about decimals.
   * @default 'inherit'
   */
  align: t.oneOf(["center", "inherit", "justify", "left", "right"]),
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Sets the padding applied to the cell.
   * The prop defaults to the value (`'default'`) inherited from the parent Table component.
   */
  padding: t.oneOf(["checkbox", "none", "normal"]),
  /**
   * Set scope attribute.
   */
  scope: t.string,
  /**
   * Specify the size of the cell.
   * The prop defaults to the value (`'medium'`) inherited from the parent Table component.
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * Set aria-sort direction.
   */
  sortDirection: t.oneOf(["asc", "desc", !1]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Specify the cell type.
   * The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.
   */
  variant: t.oneOfType([t.oneOf(["body", "footer", "head"]), t.string])
});
const fa = Pp;
function EP(e) {
  return ee("MuiTableContainer", e);
}
const PP = ne("MuiTableContainer", ["root"]), nB = PP, NP = ["className", "component"], IP = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"]
  }, EP, o);
}, kP = P("div", {
  name: "MuiTableContainer",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  width: "100%",
  overflowX: "auto"
}), Np = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiTableContainer"
  }), {
    className: s,
    component: a = "div"
  } = r, i = z(r, NP), l = u({}, r, {
    component: a
  }), c = IP(l);
  return /* @__PURE__ */ x(kP, u({
    ref: n,
    as: a,
    className: D(c.root, s),
    ownerState: l
  }, i));
});
process.env.NODE_ENV !== "production" && (Np.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally `Table`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const rB = Np;
function MP(e) {
  return ee("MuiTableFooter", e);
}
const BP = ne("MuiTableFooter", ["root"]), sB = BP, LP = ["className", "component"], DP = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"]
  }, MP, o);
}, AP = P("tfoot", {
  name: "MuiTableFooter",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  display: "table-footer-group"
}), FP = {
  variant: "footer"
}, Fl = "tfoot", Ip = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiTableFooter"
  }), {
    className: s,
    component: a = Fl
  } = r, i = z(r, LP), l = u({}, r, {
    component: a
  }), c = DP(l);
  return /* @__PURE__ */ x(xr.Provider, {
    value: FP,
    children: /* @__PURE__ */ x(AP, u({
      as: a,
      className: D(c.root, s),
      ref: n,
      role: a === Fl ? null : "rowgroup",
      ownerState: l
    }, i))
  });
});
process.env.NODE_ENV !== "production" && (Ip.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally `TableRow`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const aB = Ip;
function jP(e) {
  return ee("MuiTableHead", e);
}
const _P = ne("MuiTableHead", ["root"]), iB = _P, zP = ["className", "component"], VP = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"]
  }, jP, o);
}, UP = P("thead", {
  name: "MuiTableHead",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({
  display: "table-header-group"
}), WP = {
  variant: "head"
}, jl = "thead", kp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiTableHead"
  }), {
    className: s,
    component: a = jl
  } = r, i = z(r, zP), l = u({}, r, {
    component: a
  }), c = VP(l);
  return /* @__PURE__ */ x(xr.Provider, {
    value: WP,
    children: /* @__PURE__ */ x(UP, u({
      as: a,
      className: D(c.root, s),
      ref: n,
      role: a === jl ? null : "rowgroup",
      ownerState: l
    }, i))
  });
});
process.env.NODE_ENV !== "production" && (kp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component, normally `TableRow`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const lB = kp;
function HP(e) {
  return ee("MuiToolbar", e);
}
const qP = ne("MuiToolbar", ["root", "gutters", "regular", "dense"]), cB = qP, GP = ["className", "component", "disableGutters", "variant"], KP = (e) => {
  const {
    classes: o,
    disableGutters: n,
    variant: r
  } = e;
  return te({
    root: ["root", !n && "gutters", r]
  }, HP, o);
}, YP = P("div", {
  name: "MuiToolbar",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, !n.disableGutters && o.gutters, o[n.variant]];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  position: "relative",
  display: "flex",
  alignItems: "center"
}, !o.disableGutters && {
  paddingLeft: e.spacing(2),
  paddingRight: e.spacing(2),
  [e.breakpoints.up("sm")]: {
    paddingLeft: e.spacing(3),
    paddingRight: e.spacing(3)
  }
}, o.variant === "dense" && {
  minHeight: 48
}), ({
  theme: e,
  ownerState: o
}) => o.variant === "regular" && e.mixins.toolbar), Mp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiToolbar"
  }), {
    className: s,
    component: a = "div",
    disableGutters: i = !1,
    variant: l = "regular"
  } = r, c = z(r, GP), d = u({}, r, {
    component: a,
    disableGutters: i,
    variant: l
  }), p = KP(d);
  return /* @__PURE__ */ x(YP, u({
    as: a,
    className: D(p.root, s),
    ref: n,
    ownerState: d
  }, c));
});
process.env.NODE_ENV !== "production" && (Mp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
   * The Toolbar is a flex container, allowing flex item properties to be used to lay out the children.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, disables gutter padding.
   * @default false
   */
  disableGutters: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The variant to use.
   * @default 'regular'
   */
  variant: t.oneOfType([t.oneOf(["dense", "regular"]), t.string])
});
const XP = Mp, Bp = Je(/* @__PURE__ */ x("path", {
  d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
}), "KeyboardArrowLeft"), Lp = Je(/* @__PURE__ */ x("path", {
  d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
}), "KeyboardArrowRight"), QP = ["backIconButtonProps", "count", "disabled", "getItemAriaLabel", "nextIconButtonProps", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton", "slots", "slotProps"], Dp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s, a, i, l, c, d, p;
  const {
    backIconButtonProps: m,
    count: b,
    disabled: h = !1,
    getItemAriaLabel: v,
    nextIconButtonProps: C,
    onPageChange: g,
    page: y,
    rowsPerPage: $,
    showFirstButton: T,
    showLastButton: O,
    slots: S = {},
    slotProps: R = {}
  } = o, w = z(o, QP), E = rt(), N = (le) => {
    g(le, 0);
  }, M = (le) => {
    g(le, y - 1);
  }, I = (le) => {
    g(le, y + 1);
  }, F = (le) => {
    g(le, Math.max(0, Math.ceil(b / $) - 1));
  }, A = (r = S.firstButton) != null ? r : Qo, B = (s = S.lastButton) != null ? s : Qo, j = (a = S.nextButton) != null ? a : Qo, V = (i = S.previousButton) != null ? i : Qo, U = (l = S.firstButtonIcon) != null ? l : ua, _ = (c = S.lastButtonIcon) != null ? c : da, W = (d = S.nextButtonIcon) != null ? d : Lp, de = (p = S.previousButtonIcon) != null ? p : Bp, Te = E.direction === "rtl" ? B : A, $e = E.direction === "rtl" ? j : V, ie = E.direction === "rtl" ? V : j, se = E.direction === "rtl" ? A : B, ue = E.direction === "rtl" ? R.lastButton : R.firstButton, Z = E.direction === "rtl" ? R.nextButton : R.previousButton, he = E.direction === "rtl" ? R.previousButton : R.nextButton, q = E.direction === "rtl" ? R.firstButton : R.lastButton;
  return /* @__PURE__ */ Ce("div", u({
    ref: n
  }, w, {
    children: [T && /* @__PURE__ */ x(Te, u({
      onClick: N,
      disabled: h || y === 0,
      "aria-label": v("first", y),
      title: v("first", y)
    }, ue, {
      children: E.direction === "rtl" ? /* @__PURE__ */ x(_, u({}, R.lastButtonIcon)) : /* @__PURE__ */ x(U, u({}, R.firstButtonIcon))
    })), /* @__PURE__ */ x($e, u({
      onClick: M,
      disabled: h || y === 0,
      color: "inherit",
      "aria-label": v("previous", y),
      title: v("previous", y)
    }, Z ?? m, {
      children: E.direction === "rtl" ? /* @__PURE__ */ x(W, u({}, R.nextButtonIcon)) : /* @__PURE__ */ x(de, u({}, R.previousButtonIcon))
    })), /* @__PURE__ */ x(ie, u({
      onClick: I,
      disabled: h || (b !== -1 ? y >= Math.ceil(b / $) - 1 : !1),
      color: "inherit",
      "aria-label": v("next", y),
      title: v("next", y)
    }, he ?? C, {
      children: E.direction === "rtl" ? /* @__PURE__ */ x(de, u({}, R.previousButtonIcon)) : /* @__PURE__ */ x(W, u({}, R.nextButtonIcon))
    })), O && /* @__PURE__ */ x(se, u({
      onClick: F,
      disabled: h || y >= Math.ceil(b / $) - 1,
      "aria-label": v("last", y),
      title: v("last", y)
    }, q, {
      children: E.direction === "rtl" ? /* @__PURE__ */ x(U, u({}, R.firstButtonIcon)) : /* @__PURE__ */ x(_, u({}, R.lastButtonIcon))
    }))]
  }));
});
process.env.NODE_ENV !== "production" && (Dp.propTypes = {
  /**
   * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) element.
   */
  backIconButtonProps: t.object,
  /**
   * The total number of rows.
   */
  count: t.number.isRequired,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   *
   * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
   * @param {number} page The page number to format.
   * @returns {string}
   */
  getItemAriaLabel: t.func.isRequired,
  /**
   * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
   */
  nextIconButtonProps: t.object,
  /**
   * Callback fired when the page is changed.
   *
   * @param {object} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onPageChange: t.func.isRequired,
  /**
   * The zero-based index of the current page.
   */
  page: t.number.isRequired,
  /**
   * The number of rows per page.
   */
  rowsPerPage: t.number.isRequired,
  /**
   * If `true`, show the first-page button.
   */
  showFirstButton: t.bool.isRequired,
  /**
   * If `true`, show the last-page button.
   */
  showLastButton: t.bool.isRequired,
  /**
   * The props used for each slot inside the TablePaginationActions.
   * @default {}
   */
  slotProps: t.shape({
    firstButton: t.object,
    firstButtonIcon: t.object,
    lastButton: t.object,
    lastButtonIcon: t.object,
    nextButton: t.object,
    nextButtonIcon: t.object,
    previousButton: t.object,
    previousButtonIcon: t.object
  }),
  /**
   * The components used for each slot inside the TablePaginationActions.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    firstButton: t.elementType,
    firstButtonIcon: t.elementType,
    lastButton: t.elementType,
    lastButtonIcon: t.elementType,
    nextButton: t.elementType,
    nextButtonIcon: t.elementType,
    previousButton: t.elementType,
    previousButtonIcon: t.elementType
  })
});
const ZP = Dp;
function JP(e) {
  return ee("MuiTablePagination", e);
}
const eN = ne("MuiTablePagination", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]), Jn = eN;
var _l;
const tN = ["ActionsComponent", "backIconButtonProps", "className", "colSpan", "component", "count", "disabled", "getItemAriaLabel", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps", "showFirstButton", "showLastButton", "slotProps", "slots"], oN = P(fa, {
  name: "MuiTablePagination",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})(({
  theme: e
}) => ({
  overflow: "auto",
  color: (e.vars || e).palette.text.primary,
  fontSize: e.typography.pxToRem(14),
  // Increase the specificity to override TableCell.
  "&:last-child": {
    padding: 0
  }
})), nN = P(XP, {
  name: "MuiTablePagination",
  slot: "Toolbar",
  overridesResolver: (e, o) => u({
    [`& .${Jn.actions}`]: o.actions
  }, o.toolbar)
})(({
  theme: e
}) => ({
  minHeight: 52,
  paddingRight: 2,
  [`${e.breakpoints.up("xs")} and (orientation: landscape)`]: {
    minHeight: 52
  },
  [e.breakpoints.up("sm")]: {
    minHeight: 52,
    paddingRight: 2
  },
  [`& .${Jn.actions}`]: {
    flexShrink: 0,
    marginLeft: 20
  }
})), rN = P("div", {
  name: "MuiTablePagination",
  slot: "Spacer",
  overridesResolver: (e, o) => o.spacer
})({
  flex: "1 1 100%"
}), sN = P("p", {
  name: "MuiTablePagination",
  slot: "SelectLabel",
  overridesResolver: (e, o) => o.selectLabel
})(({
  theme: e
}) => u({}, e.typography.body2, {
  flexShrink: 0
})), aN = P(rp, {
  name: "MuiTablePagination",
  slot: "Select",
  overridesResolver: (e, o) => u({
    [`& .${Jn.selectIcon}`]: o.selectIcon,
    [`& .${Jn.select}`]: o.select
  }, o.input, o.selectRoot)
})({
  color: "inherit",
  fontSize: "inherit",
  flexShrink: 0,
  marginRight: 32,
  marginLeft: 8,
  [`& .${Jn.select}`]: {
    paddingLeft: 8,
    paddingRight: 24,
    textAlign: "right",
    textAlignLast: "right"
    // Align <select> on Chrome.
  }
}), iN = P(eS, {
  name: "MuiTablePagination",
  slot: "MenuItem",
  overridesResolver: (e, o) => o.menuItem
})({}), lN = P("p", {
  name: "MuiTablePagination",
  slot: "DisplayedRows",
  overridesResolver: (e, o) => o.displayedRows
})(({
  theme: e
}) => u({}, e.typography.body2, {
  flexShrink: 0
}));
function cN({
  from: e,
  to: o,
  count: n
}) {
  return `${e}–${o} of ${n !== -1 ? n : `more than ${o}`}`;
}
function uN(e) {
  return `Go to ${e} page`;
}
const dN = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"],
    toolbar: ["toolbar"],
    spacer: ["spacer"],
    selectLabel: ["selectLabel"],
    select: ["select"],
    input: ["input"],
    selectIcon: ["selectIcon"],
    menuItem: ["menuItem"],
    displayedRows: ["displayedRows"],
    actions: ["actions"]
  }, JP, o);
}, Ap = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r;
  const s = oe({
    props: o,
    name: "MuiTablePagination"
  }), {
    ActionsComponent: a = ZP,
    backIconButtonProps: i,
    className: l,
    colSpan: c,
    component: d = fa,
    count: p,
    disabled: m = !1,
    getItemAriaLabel: b = uN,
    labelDisplayedRows: h = cN,
    labelRowsPerPage: v = "Rows per page:",
    nextIconButtonProps: C,
    onPageChange: g,
    onRowsPerPageChange: y,
    page: $,
    rowsPerPage: T,
    rowsPerPageOptions: O = [10, 25, 50, 100],
    SelectProps: S = {},
    showFirstButton: R = !1,
    showLastButton: w = !1,
    slotProps: E = {},
    slots: N = {}
  } = s, M = z(s, tN), I = s, F = dN(I), A = (r = E == null ? void 0 : E.select) != null ? r : S, B = A.native ? "option" : iN;
  let j;
  (d === fa || d === "td") && (j = c || 1e3);
  const V = mo(A.id), U = mo(A.labelId), _ = () => p === -1 ? ($ + 1) * T : T === -1 ? p : Math.min(p, ($ + 1) * T);
  return /* @__PURE__ */ x(oN, u({
    colSpan: j,
    ref: n,
    as: d,
    ownerState: I,
    className: D(F.root, l)
  }, M, {
    children: /* @__PURE__ */ Ce(nN, {
      className: F.toolbar,
      children: [/* @__PURE__ */ x(rN, {
        className: F.spacer
      }), O.length > 1 && /* @__PURE__ */ x(sN, {
        className: F.selectLabel,
        id: U,
        children: v
      }), O.length > 1 && /* @__PURE__ */ x(aN, u({
        variant: "standard"
      }, !A.variant && {
        input: _l || (_l = /* @__PURE__ */ x(Rs, {}))
      }, {
        value: T,
        onChange: y,
        id: V,
        labelId: U
      }, A, {
        classes: u({}, A.classes, {
          // TODO v5 remove `classes.input`
          root: D(F.input, F.selectRoot, (A.classes || {}).root),
          select: D(F.select, (A.classes || {}).select),
          // TODO v5 remove `selectIcon`
          icon: D(F.selectIcon, (A.classes || {}).icon)
        }),
        disabled: m,
        children: O.map((W) => /* @__PURE__ */ lc(B, u({}, !Jt(B) && {
          ownerState: I
        }, {
          className: F.menuItem,
          key: W.label ? W.label : W,
          value: W.value ? W.value : W
        }), W.label ? W.label : W))
      })), /* @__PURE__ */ x(lN, {
        className: F.displayedRows,
        children: h({
          from: p === 0 ? 0 : $ * T + 1,
          to: _(),
          count: p === -1 ? -1 : p,
          page: $
        })
      }), /* @__PURE__ */ x(a, {
        className: F.actions,
        backIconButtonProps: i,
        count: p,
        nextIconButtonProps: C,
        onPageChange: g,
        page: $,
        rowsPerPage: T,
        showFirstButton: R,
        showLastButton: w,
        slotProps: E.actions,
        slots: N.actions,
        getItemAriaLabel: b,
        disabled: m
      })]
    })
  }));
});
process.env.NODE_ENV !== "production" && (Ap.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The component used for displaying the actions.
   * Either a string to use a HTML element or a component.
   * @default TablePaginationActions
   */
  ActionsComponent: t.elementType,
  /**
   * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) component.
   *
   * This prop is an alias for `slotProps.actions.previousButton` and will be overriden by it if both are used.
   * @deprecated Use `slotProps.actions.previousButton` instead.
   */
  backIconButtonProps: t.object,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * @ignore
   */
  colSpan: t.number,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * The total number of rows.
   *
   * To enable server side pagination for an unknown number of items, provide -1.
   */
  count: lt.isRequired,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * Accepts a function which returns a string value that provides a user-friendly name for the current page.
   * This is important for screen reader users.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
   * @returns {string}
   * @default function defaultGetAriaLabel(type) {
   *   return `Go to ${type} page`;
   * }
   */
  getItemAriaLabel: t.func,
  /**
   * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
   * object.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default function defaultLabelDisplayedRows({ from, to, count }) {
   *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
   * }
   */
  labelDisplayedRows: t.func,
  /**
   * Customize the rows per page label.
   *
   * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
   * @default 'Rows per page:'
   */
  labelRowsPerPage: t.node,
  /**
   * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
   *
   * This prop is an alias for `slotProps.actions.nextButton` and will be overriden by it if both are used.
   * @deprecated Use `slotProps.actions.nextButton` instead.
   */
  nextIconButtonProps: t.object,
  /**
   * Callback fired when the page is changed.
   *
   * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
   * @param {number} page The page selected.
   */
  onPageChange: t.func.isRequired,
  /**
   * Callback fired when the number of rows per page is changed.
   *
   * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
   */
  onRowsPerPageChange: t.func,
  /**
   * The zero-based index of the current page.
   */
  page: ut(lt.isRequired, (e) => {
    const {
      count: o,
      page: n,
      rowsPerPage: r
    } = e;
    if (o === -1)
      return null;
    const s = Math.max(0, Math.ceil(o / r) - 1);
    return n < 0 || n > s ? new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${s}, but page is ${n}).`) : null;
  }),
  /**
   * The number of rows per page.
   *
   * Set -1 to display all the rows.
   */
  rowsPerPage: lt.isRequired,
  /**
   * Customizes the options of the rows per page select field. If less than two options are
   * available, no select field will be displayed.
   * Use -1 for the value with a custom label to show all the rows.
   * @default [10, 25, 50, 100]
   */
  rowsPerPageOptions: t.arrayOf(t.oneOfType([t.number, t.shape({
    label: t.string.isRequired,
    value: t.number.isRequired
  })]).isRequired),
  /**
   * Props applied to the rows per page [`Select`](/material-ui/api/select/) element.
   *
   * This prop is an alias for `slotProps.select` and will be overriden by it if both are used.
   * @deprecated Use `slotProps.select` instead.
   *
   * @default {}
   */
  SelectProps: t.object,
  /**
   * If `true`, show the first-page button.
   * @default false
   */
  showFirstButton: t.bool,
  /**
   * If `true`, show the last-page button.
   * @default false
   */
  showLastButton: t.bool,
  /**
   * The props used for each slot inside the TablePagination.
   * @default {}
   */
  slotProps: t.shape({
    actions: t.shape({
      firstButton: t.object,
      firstButtonIcon: t.object,
      lastButton: t.object,
      lastButtonIcon: t.object,
      nextButton: t.object,
      nextButtonIcon: t.object,
      previousButton: t.object,
      previousButtonIcon: t.object
    }),
    select: t.object
  }),
  /**
   * The components used for each slot inside the TablePagination.
   * Either a string to use a HTML element or a component.
   * @default {}
   */
  slots: t.shape({
    actions: t.shape({
      firstButton: t.elementType,
      firstButtonIcon: t.elementType,
      lastButton: t.elementType,
      lastButtonIcon: t.elementType,
      nextButton: t.elementType,
      nextButtonIcon: t.elementType,
      previousButton: t.elementType,
      previousButtonIcon: t.elementType
    })
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const uB = Ap;
function pN(e) {
  return ee("MuiTableRow", e);
}
const fN = ne("MuiTableRow", ["root", "selected", "hover", "head", "footer"]), zl = fN, mN = ["className", "component", "hover", "selected"], bN = (e) => {
  const {
    classes: o,
    selected: n,
    hover: r,
    head: s,
    footer: a
  } = e;
  return te({
    root: ["root", n && "selected", r && "hover", s && "head", a && "footer"]
  }, pN, o);
}, gN = P("tr", {
  name: "MuiTableRow",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.head && o.head, n.footer && o.footer];
  }
})(({
  theme: e
}) => ({
  color: "inherit",
  display: "table-row",
  verticalAlign: "middle",
  // We disable the focus ring for mouse, touch and keyboard users.
  outline: 0,
  [`&.${zl.hover}:hover`]: {
    backgroundColor: (e.vars || e).palette.action.hover
  },
  [`&.${zl.selected}`]: {
    backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity),
    "&:hover": {
      backgroundColor: e.vars ? `rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Pe(e.palette.primary.main, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity)
    }
  }
})), Vl = "tr", Fp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiTableRow"
  }), {
    className: s,
    component: a = Vl,
    hover: i = !1,
    selected: l = !1
  } = r, c = z(r, mN), d = f.useContext(xr), p = u({}, r, {
    component: a,
    hover: i,
    selected: l,
    head: d && d.variant === "head",
    footer: d && d.variant === "footer"
  }), m = bN(p);
  return /* @__PURE__ */ x(gN, u({
    as: a,
    ref: n,
    className: D(m.root, s),
    role: a === Vl ? null : "row",
    ownerState: p
  }, c));
});
process.env.NODE_ENV !== "production" && (Fp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Should be valid `<tr>` children such as `TableCell`.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * If `true`, the table row will shade on hover.
   * @default false
   */
  hover: t.bool,
  /**
   * If `true`, the table row will have the selected shading.
   * @default false
   */
  selected: t.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const dB = Fp, hN = Je(/* @__PURE__ */ x("path", {
  d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
}), "ArrowDownward");
function vN(e) {
  return ee("MuiTableSortLabel", e);
}
const yN = ne("MuiTableSortLabel", ["root", "active", "icon", "iconDirectionDesc", "iconDirectionAsc"]), Ks = yN, CN = ["active", "children", "className", "direction", "hideSortIcon", "IconComponent"], xN = (e) => {
  const {
    classes: o,
    direction: n,
    active: r
  } = e, s = {
    root: ["root", r && "active"],
    icon: ["icon", `iconDirection${k(n)}`]
  };
  return te(s, vN, o);
}, TN = P(pt, {
  name: "MuiTableSortLabel",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.active && o.active];
  }
})(({
  theme: e
}) => ({
  cursor: "pointer",
  display: "inline-flex",
  justifyContent: "flex-start",
  flexDirection: "inherit",
  alignItems: "center",
  "&:focus": {
    color: (e.vars || e).palette.text.secondary
  },
  "&:hover": {
    color: (e.vars || e).palette.text.secondary,
    [`& .${Ks.icon}`]: {
      opacity: 0.5
    }
  },
  [`&.${Ks.active}`]: {
    color: (e.vars || e).palette.text.primary,
    [`& .${Ks.icon}`]: {
      opacity: 1,
      color: (e.vars || e).palette.text.secondary
    }
  }
})), ON = P("span", {
  name: "MuiTableSortLabel",
  slot: "Icon",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.icon, o[`iconDirection${k(n.direction)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => u({
  fontSize: 18,
  marginRight: 4,
  marginLeft: 4,
  opacity: 0,
  transition: e.transitions.create(["opacity", "transform"], {
    duration: e.transitions.duration.shorter
  }),
  userSelect: "none"
}, o.direction === "desc" && {
  transform: "rotate(0deg)"
}, o.direction === "asc" && {
  transform: "rotate(180deg)"
})), jp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiTableSortLabel"
  }), {
    active: s = !1,
    children: a,
    className: i,
    direction: l = "asc",
    hideSortIcon: c = !1,
    IconComponent: d = hN
  } = r, p = z(r, CN), m = u({}, r, {
    active: s,
    direction: l,
    hideSortIcon: c,
    IconComponent: d
  }), b = xN(m);
  return /* @__PURE__ */ Ce(TN, u({
    className: D(b.root, i),
    component: "span",
    disableRipple: !0,
    ownerState: m,
    ref: n
  }, p, {
    children: [a, c && !s ? null : /* @__PURE__ */ x(ON, {
      as: d,
      className: D(b.icon),
      ownerState: m
    })]
  }));
});
process.env.NODE_ENV !== "production" && (jp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * If `true`, the label will have the active styling (should be true for the sorted column).
   * @default false
   */
  active: t.bool,
  /**
   * Label contents, the arrow will be appended automatically.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The current sort direction.
   * @default 'asc'
   */
  direction: t.oneOf(["asc", "desc"]),
  /**
   * Hide sort icon when active is false.
   * @default false
   */
  hideSortIcon: t.bool,
  /**
   * Sort icon to use.
   * @default ArrowDownwardIcon
   */
  IconComponent: t.elementType,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const pB = jp;
function $N(e) {
  return (1 + Math.sin(Math.PI * e - Math.PI / 2)) / 2;
}
function SN(e, o, n, r = {}, s = () => {
}) {
  const {
    ease: a = $N,
    duration: i = 300
    // standard
  } = r;
  let l = null;
  const c = o[e];
  let d = !1;
  const p = () => {
    d = !0;
  }, m = (b) => {
    if (d) {
      s(new Error("Animation cancelled"));
      return;
    }
    l === null && (l = b);
    const h = Math.min(1, (b - l) / i);
    if (o[e] = a(h) * (n - c) + c, h >= 1) {
      requestAnimationFrame(() => {
        s(null);
      });
      return;
    }
    requestAnimationFrame(m);
  };
  return c === n ? (s(new Error("Element already at target position")), p) : (requestAnimationFrame(m), p);
}
const RN = ["onChange"], wN = {
  width: 99,
  height: 99,
  position: "absolute",
  top: -9999,
  overflow: "scroll"
};
function _p(e) {
  const {
    onChange: o
  } = e, n = z(e, RN), r = f.useRef(), s = f.useRef(null), a = () => {
    r.current = s.current.offsetHeight - s.current.clientHeight;
  };
  return bt(() => {
    const i = fr(() => {
      const c = r.current;
      a(), c !== r.current && o(r.current);
    }), l = Rt(s.current);
    return l.addEventListener("resize", i), () => {
      i.clear(), l.removeEventListener("resize", i);
    };
  }, [o]), f.useEffect(() => {
    a(), o(r.current);
  }, [o]), /* @__PURE__ */ x("div", u({
    style: wN,
    ref: s
  }, n));
}
process.env.NODE_ENV !== "production" && (_p.propTypes = {
  onChange: t.func.isRequired
});
function EN(e) {
  return ee("MuiTabScrollButton", e);
}
const PN = ne("MuiTabScrollButton", ["root", "vertical", "horizontal", "disabled"]), NN = PN, IN = ["className", "slots", "slotProps", "direction", "orientation", "disabled"], kN = (e) => {
  const {
    classes: o,
    orientation: n,
    disabled: r
  } = e;
  return te({
    root: ["root", n, r && "disabled"]
  }, EN, o);
}, MN = P(pt, {
  name: "MuiTabScrollButton",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, n.orientation && o[n.orientation]];
  }
})(({
  ownerState: e
}) => u({
  width: 40,
  flexShrink: 0,
  opacity: 0.8,
  [`&.${NN.disabled}`]: {
    opacity: 0
  }
}, e.orientation === "vertical" && {
  width: "100%",
  height: 40,
  "& svg": {
    transform: `rotate(${e.isRtl ? -90 : 90}deg)`
  }
})), zp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  var r, s;
  const a = oe({
    props: o,
    name: "MuiTabScrollButton"
  }), {
    className: i,
    slots: l = {},
    slotProps: c = {},
    direction: d
  } = a, p = z(a, IN), b = rt().direction === "rtl", h = u({
    isRtl: b
  }, a), v = kN(h), C = (r = l.StartScrollButtonIcon) != null ? r : Bp, g = (s = l.EndScrollButtonIcon) != null ? s : Lp, y = at({
    elementType: C,
    externalSlotProps: c.startScrollButtonIcon,
    additionalProps: {
      fontSize: "small"
    },
    ownerState: h
  }), $ = at({
    elementType: g,
    externalSlotProps: c.endScrollButtonIcon,
    additionalProps: {
      fontSize: "small"
    },
    ownerState: h
  });
  return /* @__PURE__ */ x(MN, u({
    component: "div",
    className: D(v.root, i),
    ref: n,
    role: null,
    ownerState: h,
    tabIndex: null
  }, p, {
    children: d === "left" ? /* @__PURE__ */ x(C, u({}, y)) : /* @__PURE__ */ x(g, u({}, $))
  }));
});
process.env.NODE_ENV !== "production" && (zp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The direction the button should indicate.
   */
  direction: t.oneOf(["left", "right"]).isRequired,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * The component orientation (layout flow direction).
   */
  orientation: t.oneOf(["horizontal", "vertical"]).isRequired,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   * @default {}
   */
  slotProps: t.shape({
    endScrollButtonIcon: t.oneOfType([t.func, t.object]),
    startScrollButtonIcon: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    EndScrollButtonIcon: t.elementType,
    StartScrollButtonIcon: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object])
});
const BN = zp;
function LN(e) {
  return ee("MuiTabs", e);
}
const DN = ne("MuiTabs", ["root", "vertical", "flexContainer", "flexContainerVertical", "centered", "scroller", "fixed", "scrollableX", "scrollableY", "hideScrollbar", "scrollButtons", "scrollButtonsHideMobile", "indicator"]), Ys = DN, AN = ["aria-label", "aria-labelledby", "action", "centered", "children", "className", "component", "allowScrollButtonsMobile", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "slots", "slotProps", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant", "visibleScrollbar"], Ul = (e, o) => e === o ? e.firstChild : o && o.nextElementSibling ? o.nextElementSibling : e.firstChild, Wl = (e, o) => e === o ? e.lastChild : o && o.previousElementSibling ? o.previousElementSibling : e.lastChild, zr = (e, o, n) => {
  let r = !1, s = n(e, o);
  for (; s; ) {
    if (s === e.firstChild) {
      if (r)
        return;
      r = !0;
    }
    const a = s.disabled || s.getAttribute("aria-disabled") === "true";
    if (!s.hasAttribute("tabindex") || a)
      s = n(e, s);
    else {
      s.focus();
      return;
    }
  }
}, FN = (e) => {
  const {
    vertical: o,
    fixed: n,
    hideScrollbar: r,
    scrollableX: s,
    scrollableY: a,
    centered: i,
    scrollButtonsHideMobile: l,
    classes: c
  } = e;
  return te({
    root: ["root", o && "vertical"],
    scroller: ["scroller", n && "fixed", r && "hideScrollbar", s && "scrollableX", a && "scrollableY"],
    flexContainer: ["flexContainer", o && "flexContainerVertical", i && "centered"],
    indicator: ["indicator"],
    scrollButtons: ["scrollButtons", l && "scrollButtonsHideMobile"],
    scrollableX: [s && "scrollableX"],
    hideScrollbar: [r && "hideScrollbar"]
  }, LN, c);
}, jN = P("div", {
  name: "MuiTabs",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${Ys.scrollButtons}`]: o.scrollButtons
    }, {
      [`& .${Ys.scrollButtons}`]: n.scrollButtonsHideMobile && o.scrollButtonsHideMobile
    }, o.root, n.vertical && o.vertical];
  }
})(({
  ownerState: e,
  theme: o
}) => u({
  overflow: "hidden",
  minHeight: 48,
  // Add iOS momentum scrolling for iOS < 13.0
  WebkitOverflowScrolling: "touch",
  display: "flex"
}, e.vertical && {
  flexDirection: "column"
}, e.scrollButtonsHideMobile && {
  [`& .${Ys.scrollButtons}`]: {
    [o.breakpoints.down("sm")]: {
      display: "none"
    }
  }
})), _N = P("div", {
  name: "MuiTabs",
  slot: "Scroller",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.scroller, n.fixed && o.fixed, n.hideScrollbar && o.hideScrollbar, n.scrollableX && o.scrollableX, n.scrollableY && o.scrollableY];
  }
})(({
  ownerState: e
}) => u({
  position: "relative",
  display: "inline-block",
  flex: "1 1 auto",
  whiteSpace: "nowrap"
}, e.fixed && {
  overflowX: "hidden",
  width: "100%"
}, e.hideScrollbar && {
  // Hide dimensionless scrollbar on macOS
  scrollbarWidth: "none",
  // Firefox
  "&::-webkit-scrollbar": {
    display: "none"
    // Safari + Chrome
  }
}, e.scrollableX && {
  overflowX: "auto",
  overflowY: "hidden"
}, e.scrollableY && {
  overflowY: "auto",
  overflowX: "hidden"
})), zN = P("div", {
  name: "MuiTabs",
  slot: "FlexContainer",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.flexContainer, n.vertical && o.flexContainerVertical, n.centered && o.centered];
  }
})(({
  ownerState: e
}) => u({
  display: "flex"
}, e.vertical && {
  flexDirection: "column"
}, e.centered && {
  justifyContent: "center"
})), VN = P("span", {
  name: "MuiTabs",
  slot: "Indicator",
  overridesResolver: (e, o) => o.indicator
})(({
  ownerState: e,
  theme: o
}) => u({
  position: "absolute",
  height: 2,
  bottom: 0,
  width: "100%",
  transition: o.transitions.create()
}, e.indicatorColor === "primary" && {
  backgroundColor: (o.vars || o).palette.primary.main
}, e.indicatorColor === "secondary" && {
  backgroundColor: (o.vars || o).palette.secondary.main
}, e.vertical && {
  height: "100%",
  width: 2,
  right: 0
})), UN = P(_p)({
  overflowX: "auto",
  overflowY: "hidden",
  // Hide dimensionless scrollbar on macOS
  scrollbarWidth: "none",
  // Firefox
  "&::-webkit-scrollbar": {
    display: "none"
    // Safari + Chrome
  }
}), Hl = {};
let ql = !1;
const Vp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiTabs"
  }), s = rt(), a = s.direction === "rtl", {
    "aria-label": i,
    "aria-labelledby": l,
    action: c,
    centered: d = !1,
    children: p,
    className: m,
    component: b = "div",
    allowScrollButtonsMobile: h = !1,
    indicatorColor: v = "primary",
    onChange: C,
    orientation: g = "horizontal",
    ScrollButtonComponent: y = BN,
    scrollButtons: $ = "auto",
    selectionFollowsFocus: T,
    slots: O = {},
    slotProps: S = {},
    TabIndicatorProps: R = {},
    TabScrollButtonProps: w = {},
    textColor: E = "primary",
    value: N,
    variant: M = "standard",
    visibleScrollbar: I = !1
  } = r, F = z(r, AN), A = M === "scrollable", B = g === "vertical", j = B ? "scrollTop" : "scrollLeft", V = B ? "top" : "left", U = B ? "bottom" : "right", _ = B ? "clientHeight" : "clientWidth", W = B ? "height" : "width", de = u({}, r, {
    component: b,
    allowScrollButtonsMobile: h,
    indicatorColor: v,
    orientation: g,
    vertical: B,
    scrollButtons: $,
    textColor: E,
    variant: M,
    visibleScrollbar: I,
    fixed: !A,
    hideScrollbar: A && !I,
    scrollableX: A && !B,
    scrollableY: A && B,
    centered: d && !A,
    scrollButtonsHideMobile: !h
  }), Te = FN(de), $e = at({
    elementType: O.StartScrollButtonIcon,
    externalSlotProps: S.startScrollButtonIcon,
    ownerState: de
  }), ie = at({
    elementType: O.EndScrollButtonIcon,
    externalSlotProps: S.endScrollButtonIcon,
    ownerState: de
  });
  process.env.NODE_ENV !== "production" && d && A && console.error('MUI: You can not use the `centered={true}` and `variant="scrollable"` properties at the same time on a `Tabs` component.');
  const [se, ue] = f.useState(!1), [Z, he] = f.useState(Hl), [q, le] = f.useState(!1), [Oe, fe] = f.useState(!1), [me, ve] = f.useState(!1), [Y, re] = f.useState({
    overflow: "hidden",
    scrollbarWidth: 0
  }), X = /* @__PURE__ */ new Map(), Ee = f.useRef(null), be = f.useRef(null), De = () => {
    const Q = Ee.current;
    let ce;
    if (Q) {
      const ke = Q.getBoundingClientRect();
      ce = {
        clientWidth: Q.clientWidth,
        scrollLeft: Q.scrollLeft,
        scrollTop: Q.scrollTop,
        scrollLeftNormalized: ym(Q, s.direction),
        scrollWidth: Q.scrollWidth,
        top: ke.top,
        bottom: ke.bottom,
        left: ke.left,
        right: ke.right
      };
    }
    let xe;
    if (Q && N !== !1) {
      const ke = be.current.children;
      if (ke.length > 0) {
        const je = ke[X.get(N)];
        process.env.NODE_ENV !== "production" && (je || console.error(["MUI: The `value` provided to the Tabs component is invalid.", `None of the Tabs' children match with "${N}".`, X.keys ? `You can provide one of the following values: ${Array.from(X.keys()).join(", ")}.` : null].join(`
`))), xe = je ? je.getBoundingClientRect() : null, process.env.NODE_ENV !== "production" && process.env.NODE_ENV !== "test" && !ql && xe && xe.width === 0 && xe.height === 0 && // if the whole Tabs component is hidden, don't warn
        ce.clientWidth !== 0 && (ce = null, console.error(["MUI: The `value` provided to the Tabs component is invalid.", `The Tab with this \`value\` ("${N}") is not part of the document layout.`, "Make sure the tab item is present in the document or that it's not `display: none`."].join(`
`)), ql = !0);
      }
    }
    return {
      tabsMeta: ce,
      tabMeta: xe
    };
  }, Ie = nt(() => {
    const {
      tabsMeta: Q,
      tabMeta: ce
    } = De();
    let xe = 0, ke;
    if (B)
      ke = "top", ce && Q && (xe = ce.top - Q.top + Q.scrollTop);
    else if (ke = a ? "right" : "left", ce && Q) {
      const qe = a ? Q.scrollLeftNormalized + Q.clientWidth - Q.scrollWidth : Q.scrollLeft;
      xe = (a ? -1 : 1) * (ce[ke] - Q[ke] + qe);
    }
    const je = {
      [ke]: xe,
      // May be wrong until the font is loaded.
      [W]: ce ? ce[W] : 0
    };
    if (isNaN(Z[ke]) || isNaN(Z[W]))
      he(je);
    else {
      const qe = Math.abs(Z[ke] - je[ke]), Qe = Math.abs(Z[W] - je[W]);
      (qe >= 1 || Qe >= 1) && he(je);
    }
  }), Se = (Q, {
    animation: ce = !0
  } = {}) => {
    ce ? SN(j, Ee.current, Q, {
      duration: s.transitions.duration.standard
    }) : Ee.current[j] = Q;
  }, Me = (Q) => {
    let ce = Ee.current[j];
    B ? ce += Q : (ce += Q * (a ? -1 : 1), ce *= a && hc() === "reverse" ? -1 : 1), Se(ce);
  }, Fe = () => {
    const Q = Ee.current[_];
    let ce = 0;
    const xe = Array.from(be.current.children);
    for (let ke = 0; ke < xe.length; ke += 1) {
      const je = xe[ke];
      if (ce + je[_] > Q) {
        ke === 0 && (ce = Q);
        break;
      }
      ce += je[_];
    }
    return ce;
  }, Ae = () => {
    Me(-1 * Fe());
  }, Ye = () => {
    Me(Fe());
  }, et = f.useCallback((Q) => {
    re({
      overflow: null,
      scrollbarWidth: Q
    });
  }, []), tt = () => {
    const Q = {};
    Q.scrollbarSizeListener = A ? /* @__PURE__ */ x(UN, {
      onChange: et,
      className: D(Te.scrollableX, Te.hideScrollbar)
    }) : null;
    const xe = A && ($ === "auto" && (q || Oe) || $ === !0);
    return Q.scrollButtonStart = xe ? /* @__PURE__ */ x(y, u({
      slots: {
        StartScrollButtonIcon: O.StartScrollButtonIcon
      },
      slotProps: {
        startScrollButtonIcon: $e
      },
      orientation: g,
      direction: a ? "right" : "left",
      onClick: Ae,
      disabled: !q
    }, w, {
      className: D(Te.scrollButtons, w.className)
    })) : null, Q.scrollButtonEnd = xe ? /* @__PURE__ */ x(y, u({
      slots: {
        EndScrollButtonIcon: O.EndScrollButtonIcon
      },
      slotProps: {
        endScrollButtonIcon: ie
      },
      orientation: g,
      direction: a ? "left" : "right",
      onClick: Ye,
      disabled: !Oe
    }, w, {
      className: D(Te.scrollButtons, w.className)
    })) : null, Q;
  }, G = nt((Q) => {
    const {
      tabsMeta: ce,
      tabMeta: xe
    } = De();
    if (!(!xe || !ce)) {
      if (xe[V] < ce[V]) {
        const ke = ce[j] + (xe[V] - ce[V]);
        Se(ke, {
          animation: Q
        });
      } else if (xe[U] > ce[U]) {
        const ke = ce[j] + (xe[U] - ce[U]);
        Se(ke, {
          animation: Q
        });
      }
    }
  }), H = nt(() => {
    A && $ !== !1 && ve(!me);
  });
  f.useEffect(() => {
    const Q = fr(() => {
      Ee.current && Ie();
    });
    let ce;
    const xe = (qe) => {
      qe.forEach((Qe) => {
        Qe.removedNodes.forEach((ft) => {
          var st;
          (st = ce) == null || st.unobserve(ft);
        }), Qe.addedNodes.forEach((ft) => {
          var st;
          (st = ce) == null || st.observe(ft);
        });
      }), Q(), H();
    }, ke = Rt(Ee.current);
    ke.addEventListener("resize", Q);
    let je;
    return typeof ResizeObserver < "u" && (ce = new ResizeObserver(Q), Array.from(be.current.children).forEach((qe) => {
      ce.observe(qe);
    })), typeof MutationObserver < "u" && (je = new MutationObserver(xe), je.observe(be.current, {
      childList: !0
    })), () => {
      var qe, Qe;
      Q.clear(), ke.removeEventListener("resize", Q), (qe = je) == null || qe.disconnect(), (Qe = ce) == null || Qe.disconnect();
    };
  }, [Ie, H]), f.useEffect(() => {
    const Q = Array.from(be.current.children), ce = Q.length;
    if (typeof IntersectionObserver < "u" && ce > 0 && A && $ !== !1) {
      const xe = Q[0], ke = Q[ce - 1], je = {
        root: Ee.current,
        threshold: 0.99
      }, qe = (Tt) => {
        le(!Tt[0].isIntersecting);
      }, Qe = new IntersectionObserver(qe, je);
      Qe.observe(xe);
      const ft = (Tt) => {
        fe(!Tt[0].isIntersecting);
      }, st = new IntersectionObserver(ft, je);
      return st.observe(ke), () => {
        Qe.disconnect(), st.disconnect();
      };
    }
  }, [A, $, me, p == null ? void 0 : p.length]), f.useEffect(() => {
    ue(!0);
  }, []), f.useEffect(() => {
    Ie();
  }), f.useEffect(() => {
    G(Hl !== Z);
  }, [G, Z]), f.useImperativeHandle(c, () => ({
    updateIndicator: Ie,
    updateScrollButtons: H
  }), [Ie, H]);
  const pe = /* @__PURE__ */ x(VN, u({}, R, {
    className: D(Te.indicator, R.className),
    ownerState: de,
    style: u({}, Z, R.style)
  }));
  let Ne = 0;
  const Le = f.Children.map(p, (Q) => {
    if (!/* @__PURE__ */ f.isValidElement(Q))
      return null;
    process.env.NODE_ENV !== "production" && to.isFragment(Q) && console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`));
    const ce = Q.props.value === void 0 ? Ne : Q.props.value;
    X.set(ce, Ne);
    const xe = ce === N;
    return Ne += 1, /* @__PURE__ */ f.cloneElement(Q, u({
      fullWidth: M === "fullWidth",
      indicator: xe && !se && pe,
      selected: xe,
      selectionFollowsFocus: T,
      onChange: C,
      textColor: E,
      value: ce
    }, Ne === 1 && N === !1 && !Q.props.tabIndex ? {
      tabIndex: 0
    } : {}));
  }), Re = (Q) => {
    const ce = be.current, xe = Xe(ce).activeElement;
    if (xe.getAttribute("role") !== "tab")
      return;
    let je = g === "horizontal" ? "ArrowLeft" : "ArrowUp", qe = g === "horizontal" ? "ArrowRight" : "ArrowDown";
    switch (g === "horizontal" && a && (je = "ArrowRight", qe = "ArrowLeft"), Q.key) {
      case je:
        Q.preventDefault(), zr(ce, xe, Wl);
        break;
      case qe:
        Q.preventDefault(), zr(ce, xe, Ul);
        break;
      case "Home":
        Q.preventDefault(), zr(ce, null, Ul);
        break;
      case "End":
        Q.preventDefault(), zr(ce, null, Wl);
        break;
    }
  }, ge = tt();
  return /* @__PURE__ */ Ce(jN, u({
    className: D(Te.root, m),
    ownerState: de,
    ref: n,
    as: b
  }, F, {
    children: [ge.scrollButtonStart, ge.scrollbarSizeListener, /* @__PURE__ */ Ce(_N, {
      className: Te.scroller,
      ownerState: de,
      style: {
        overflow: Y.overflow,
        [B ? `margin${a ? "Left" : "Right"}` : "marginBottom"]: I ? void 0 : -Y.scrollbarWidth
      },
      ref: Ee,
      children: [/* @__PURE__ */ x(zN, {
        "aria-label": i,
        "aria-labelledby": l,
        "aria-orientation": g === "vertical" ? "vertical" : null,
        className: Te.flexContainer,
        ownerState: de,
        onKeyDown: Re,
        ref: be,
        role: "tablist",
        children: Le
      }), se && pe]
    }), ge.scrollButtonEnd]
  }));
});
process.env.NODE_ENV !== "production" && (Vp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * Callback fired when the component mounts.
   * This is useful when you want to trigger an action programmatically.
   * It supports two actions: `updateIndicator()` and `updateScrollButtons()`
   *
   * @param {object} actions This object contains all possible actions
   * that can be triggered programmatically.
   */
  action: yt,
  /**
   * If `true`, the scroll buttons aren't forced hidden on mobile.
   * By default the scroll buttons are hidden on mobile and takes precedence over `scrollButtons`.
   * @default false
   */
  allowScrollButtonsMobile: t.bool,
  /**
   * The label for the Tabs as a string.
   */
  "aria-label": t.string,
  /**
   * An id or list of ids separated by a space that label the Tabs.
   */
  "aria-labelledby": t.string,
  /**
   * If `true`, the tabs are centered.
   * This prop is intended for large views.
   * @default false
   */
  centered: t.bool,
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The component used for the root node.
   * Either a string to use a HTML element or a component.
   */
  component: t.elementType,
  /**
   * Determines the color of the indicator.
   * @default 'primary'
   */
  indicatorColor: t.oneOfType([t.oneOf(["primary", "secondary"]), t.string]),
  /**
   * Callback fired when the value changes.
   *
   * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
   * @param {any} value We default to the index of the child (number)
   */
  onChange: t.func,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: t.oneOf(["horizontal", "vertical"]),
  /**
   * The component used to render the scroll buttons.
   * @default TabScrollButton
   */
  ScrollButtonComponent: t.elementType,
  /**
   * Determine behavior of scroll buttons when tabs are set to scroll:
   *
   * - `auto` will only present them when not all the items are visible.
   * - `true` will always present them.
   * - `false` will never present them.
   *
   * By default the scroll buttons are hidden on mobile.
   * This behavior can be disabled with `allowScrollButtonsMobile`.
   * @default 'auto'
   */
  scrollButtons: t.oneOf(["auto", !1, !0]),
  /**
   * If `true` the selected tab changes on focus. Otherwise it only
   * changes on activation.
   */
  selectionFollowsFocus: t.bool,
  /**
   * The extra props for the slot components.
   * You can override the existing props or add new ones.
   * @default {}
   */
  slotProps: t.shape({
    endScrollButtonIcon: t.oneOfType([t.func, t.object]),
    startScrollButtonIcon: t.oneOfType([t.func, t.object])
  }),
  /**
   * The components used for each slot inside.
   * @default {}
   */
  slots: t.shape({
    EndScrollButtonIcon: t.elementType,
    StartScrollButtonIcon: t.elementType
  }),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Props applied to the tab indicator element.
   * @default  {}
   */
  TabIndicatorProps: t.object,
  /**
   * Props applied to the [`TabScrollButton`](/material-ui/api/tab-scroll-button/) element.
   * @default {}
   */
  TabScrollButtonProps: t.object,
  /**
   * Determines the color of the `Tab`.
   * @default 'primary'
   */
  textColor: t.oneOf(["inherit", "primary", "secondary"]),
  /**
   * The value of the currently selected `Tab`.
   * If you don't want any selected `Tab`, you can set this prop to `false`.
   */
  value: t.any,
  /**
   * Determines additional display behavior of the tabs:
   *
   *  - `scrollable` will invoke scrolling properties and allow for horizontally
   *  scrolling (or swiping) of the tab bar.
   *  - `fullWidth` will make the tabs grow to use all the available space,
   *  which should be used for small views, like on mobile.
   *  - `standard` will render the default state.
   * @default 'standard'
   */
  variant: t.oneOf(["fullWidth", "scrollable", "standard"]),
  /**
   * If `true`, the scrollbar is visible. It can be useful when displaying
   * a long vertical list of tabs.
   * @default false
   */
  visibleScrollbar: t.bool
});
const fB = Vp;
function WN(e) {
  return ee("MuiTextField", e);
}
const HN = ne("MuiTextField", ["root"]), mB = HN, qN = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"], GN = {
  standard: Ua,
  filled: rd,
  outlined: Hd
}, KN = (e) => {
  const {
    classes: o
  } = e;
  return te({
    root: ["root"]
  }, WN, o);
}, YN = P(w0, {
  name: "MuiTextField",
  slot: "Root",
  overridesResolver: (e, o) => o.root
})({}), Up = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiTextField"
  }), {
    autoComplete: s,
    autoFocus: a = !1,
    children: i,
    className: l,
    color: c = "primary",
    defaultValue: d,
    disabled: p = !1,
    error: m = !1,
    FormHelperTextProps: b,
    fullWidth: h = !1,
    helperText: v,
    id: C,
    InputLabelProps: g,
    inputProps: y,
    InputProps: $,
    inputRef: T,
    label: O,
    maxRows: S,
    minRows: R,
    multiline: w = !1,
    name: E,
    onBlur: N,
    onChange: M,
    onFocus: I,
    placeholder: F,
    required: A = !1,
    rows: B,
    select: j = !1,
    SelectProps: V,
    type: U,
    value: _,
    variant: W = "outlined"
  } = r, de = z(r, qN), Te = u({}, r, {
    autoFocus: a,
    color: c,
    disabled: p,
    error: m,
    fullWidth: h,
    multiline: w,
    required: A,
    select: j,
    variant: W
  }), $e = KN(Te);
  process.env.NODE_ENV !== "production" && j && !i && console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
  const ie = {};
  W === "outlined" && (g && typeof g.shrink < "u" && (ie.notched = g.shrink), ie.label = O), j && ((!V || !V.native) && (ie.id = void 0), ie["aria-describedby"] = void 0);
  const se = mo(C), ue = v && se ? `${se}-helper-text` : void 0, Z = O && se ? `${se}-label` : void 0, he = GN[W], q = /* @__PURE__ */ x(he, u({
    "aria-describedby": ue,
    autoComplete: s,
    autoFocus: a,
    defaultValue: d,
    fullWidth: h,
    multiline: w,
    name: E,
    rows: B,
    maxRows: S,
    minRows: R,
    type: U,
    value: _,
    id: se,
    inputRef: T,
    onBlur: N,
    onChange: M,
    onFocus: I,
    placeholder: F,
    inputProps: y
  }, ie, $));
  return /* @__PURE__ */ Ce(YN, u({
    className: D($e.root, l),
    disabled: p,
    error: m,
    fullWidth: h,
    ref: n,
    required: A,
    color: c,
    variant: W,
    ownerState: Te
  }, de, {
    children: [O != null && O !== "" && /* @__PURE__ */ x(v$, u({
      htmlFor: se,
      id: Z
    }, g, {
      children: O
    })), j ? /* @__PURE__ */ x(rp, u({
      "aria-describedby": ue,
      id: se,
      labelId: Z,
      value: _,
      input: q
    }, V, {
      children: i
    })) : q, v && /* @__PURE__ */ x(G0, u({
      id: ue
    }, b, {
      children: v
    }))]
  }));
});
process.env.NODE_ENV !== "production" && (Up.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * This prop helps users to fill forms faster, especially on mobile devices.
   * The name can be confusing, as it's more like an autofill.
   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
   */
  autoComplete: t.string,
  /**
   * If `true`, the `input` element is focused during the first mount.
   * @default false
   */
  autoFocus: t.bool,
  /**
   * @ignore
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the component.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'primary'
   */
  color: t.oneOfType([t.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * The default value. Use when the component is not controlled.
   */
  defaultValue: t.any,
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the label is displayed in an error state.
   * @default false
   */
  error: t.bool,
  /**
   * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
   */
  FormHelperTextProps: t.object,
  /**
   * If `true`, the input will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * The helper text content.
   */
  helperText: t.node,
  /**
   * The id of the `input` element.
   * Use this prop to make `label` and `helperText` accessible for screen readers.
   */
  id: t.string,
  /**
   * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
   * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
   */
  InputLabelProps: t.object,
  /**
   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
   */
  inputProps: t.object,
  /**
   * Props applied to the Input element.
   * It will be a [`FilledInput`](/material-ui/api/filled-input/),
   * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
   * component depending on the `variant` prop value.
   */
  InputProps: t.object,
  /**
   * Pass a ref to the `input` element.
   */
  inputRef: yt,
  /**
   * The label content.
   */
  label: t.node,
  /**
   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
   * @default 'none'
   */
  margin: t.oneOf(["dense", "none", "normal"]),
  /**
   * Maximum number of rows to display when multiline option is set to true.
   */
  maxRows: t.oneOfType([t.number, t.string]),
  /**
   * Minimum number of rows to display when multiline option is set to true.
   */
  minRows: t.oneOfType([t.number, t.string]),
  /**
   * If `true`, a `textarea` element is rendered instead of an input.
   * @default false
   */
  multiline: t.bool,
  /**
   * Name attribute of the `input` element.
   */
  name: t.string,
  /**
   * @ignore
   */
  onBlur: t.func,
  /**
   * Callback fired when the value is changed.
   *
   * @param {object} event The event source of the callback.
   * You can pull out the new value by accessing `event.target.value` (string).
   */
  onChange: t.func,
  /**
   * @ignore
   */
  onFocus: t.func,
  /**
   * The short hint displayed in the `input` before the user enters a value.
   */
  placeholder: t.string,
  /**
   * If `true`, the label is displayed as required and the `input` element is required.
   * @default false
   */
  required: t.bool,
  /**
   * Number of rows to display when multiline option is set to true.
   */
  rows: t.oneOfType([t.number, t.string]),
  /**
   * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
   * If this option is set you must pass the options of the select as children.
   * @default false
   */
  select: t.bool,
  /**
   * Props applied to the [`Select`](/material-ui/api/select/) element.
   */
  SelectProps: t.object,
  /**
   * The size of the component.
   */
  size: t.oneOfType([t.oneOf(["medium", "small"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
   */
  type: t.string,
  /**
   * The value of the `input` element, required for a controlled component.
   */
  value: t.any,
  /**
   * The variant to use.
   * @default 'outlined'
   */
  variant: t.oneOf(["filled", "outlined", "standard"])
});
const bB = Up;
function XN(e) {
  return ee("MuiToggleButton", e);
}
const QN = ne("MuiToggleButton", ["root", "disabled", "selected", "standard", "primary", "secondary", "sizeSmall", "sizeMedium", "sizeLarge", "fullWidth"]), bn = QN, Wp = /* @__PURE__ */ f.createContext({});
process.env.NODE_ENV !== "production" && (Wp.displayName = "ToggleButtonGroupContext");
const Hp = Wp, qp = /* @__PURE__ */ f.createContext(void 0);
process.env.NODE_ENV !== "production" && (qp.displayName = "ToggleButtonGroupButtonContext");
const Gp = qp;
function ZN(e, o) {
  return o === void 0 || e === void 0 ? !1 : Array.isArray(o) ? o.indexOf(e) >= 0 : e === o;
}
const JN = ["value"], eI = ["children", "className", "color", "disabled", "disableFocusRipple", "fullWidth", "onChange", "onClick", "selected", "size", "value"], tI = (e) => {
  const {
    classes: o,
    fullWidth: n,
    selected: r,
    disabled: s,
    size: a,
    color: i
  } = e, l = {
    root: ["root", r && "selected", s && "disabled", n && "fullWidth", `size${k(a)}`, i]
  };
  return te(l, XN, o);
}, oI = P(pt, {
  name: "MuiToggleButton",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [o.root, o[`size${k(n.size)}`]];
  }
})(({
  theme: e,
  ownerState: o
}) => {
  let n = o.color === "standard" ? e.palette.text.primary : e.palette[o.color].main, r;
  return e.vars && (n = o.color === "standard" ? e.vars.palette.text.primary : e.vars.palette[o.color].main, r = o.color === "standard" ? e.vars.palette.text.primaryChannel : e.vars.palette[o.color].mainChannel), u({}, e.typography.button, {
    borderRadius: (e.vars || e).shape.borderRadius,
    padding: 11,
    border: `1px solid ${(e.vars || e).palette.divider}`,
    color: (e.vars || e).palette.action.active
  }, o.fullWidth && {
    width: "100%"
  }, {
    [`&.${bn.disabled}`]: {
      color: (e.vars || e).palette.action.disabled,
      border: `1px solid ${(e.vars || e).palette.action.disabledBackground}`
    },
    "&:hover": {
      textDecoration: "none",
      // Reset on mouse devices
      backgroundColor: e.vars ? `rgba(${e.vars.palette.text.primaryChannel} / ${e.vars.palette.action.hoverOpacity})` : Wn(e.palette.text.primary, e.palette.action.hoverOpacity),
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${bn.selected}`]: {
      color: n,
      backgroundColor: e.vars ? `rgba(${r} / ${e.vars.palette.action.selectedOpacity})` : Wn(n, e.palette.action.selectedOpacity),
      "&:hover": {
        backgroundColor: e.vars ? `rgba(${r} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))` : Wn(n, e.palette.action.selectedOpacity + e.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: e.vars ? `rgba(${r} / ${e.vars.palette.action.selectedOpacity})` : Wn(n, e.palette.action.selectedOpacity)
        }
      }
    }
  }, o.size === "small" && {
    padding: 7,
    fontSize: e.typography.pxToRem(13)
  }, o.size === "large" && {
    padding: 15,
    fontSize: e.typography.pxToRem(15)
  });
}), Kp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = f.useContext(Hp), {
    value: s
  } = r, a = z(r, JN), i = f.useContext(Gp), l = dc(u({}, a, {
    selected: ZN(o.value, s)
  }), o), c = oe({
    props: l,
    name: "MuiToggleButton"
  }), {
    children: d,
    className: p,
    color: m = "standard",
    disabled: b = !1,
    disableFocusRipple: h = !1,
    fullWidth: v = !1,
    onChange: C,
    onClick: g,
    selected: y,
    size: $ = "medium",
    value: T
  } = c, O = z(c, eI), S = u({}, c, {
    color: m,
    disabled: b,
    disableFocusRipple: h,
    fullWidth: v,
    size: $
  }), R = tI(S), w = (N) => {
    g && (g(N, T), N.defaultPrevented) || C && C(N, T);
  }, E = i || "";
  return /* @__PURE__ */ x(oI, u({
    className: D(a.className, R.root, p, E),
    disabled: b,
    focusRipple: !h,
    ref: n,
    onClick: w,
    onChange: C,
    value: T,
    ownerState: S,
    "aria-pressed": y
  }, O, {
    children: d
  }));
});
process.env.NODE_ENV !== "production" && (Kp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the button when it is in an active state.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'standard'
   */
  color: t.oneOfType([t.oneOf(["standard", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * If `true`, the component is disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, the  keyboard focus ripple is disabled.
   * @default false
   */
  disableFocusRipple: t.bool,
  /**
   * If `true`, the ripple effect is disabled.
   *
   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
   * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
   * @default false
   */
  disableRipple: t.bool,
  /**
   * If `true`, the button will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * Callback fired when the state changes.
   *
   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
   * @param {any} value of the selected button.
   */
  onChange: t.func,
  /**
   * Callback fired when the button is clicked.
   *
   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
   * @param {any} value of the selected button.
   */
  onClick: t.func,
  /**
   * If `true`, the button is rendered in an active state.
   */
  selected: t.bool,
  /**
   * The size of the component.
   * The prop defaults to the value inherited from the parent ToggleButtonGroup component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The value to associate with the button when selected in a
   * ToggleButtonGroup.
   */
  value: t.any.isRequired
});
const gB = Kp;
function nI(e) {
  return ee("MuiToggleButtonGroup", e);
}
const rI = ne("MuiToggleButtonGroup", ["root", "selected", "vertical", "disabled", "grouped", "groupedHorizontal", "groupedVertical", "fullWidth", "firstButton", "lastButton", "middleButton"]), ot = rI, sI = ["children", "className", "color", "disabled", "exclusive", "fullWidth", "onChange", "orientation", "size", "value"], aI = (e) => {
  const {
    classes: o,
    orientation: n,
    fullWidth: r,
    disabled: s
  } = e, a = {
    root: ["root", n === "vertical" && "vertical", r && "fullWidth"],
    grouped: ["grouped", `grouped${k(n)}`, s && "disabled"],
    firstButton: ["firstButton"],
    lastButton: ["lastButton"],
    middleButton: ["middleButton"]
  };
  return te(a, nI, o);
}, iI = P("div", {
  name: "MuiToggleButtonGroup",
  slot: "Root",
  overridesResolver: (e, o) => {
    const {
      ownerState: n
    } = e;
    return [{
      [`& .${ot.grouped}`]: o.grouped
    }, {
      [`& .${ot.grouped}`]: o[`grouped${k(n.orientation)}`]
    }, {
      [`& .${ot.firstButton}`]: o.firstButton
    }, {
      [`& .${ot.lastButton}`]: o.lastButton
    }, {
      [`& .${ot.middleButton}`]: o.middleButton
    }, o.root, n.orientation === "vertical" && o.vertical, n.fullWidth && o.fullWidth];
  }
})(({
  ownerState: e,
  theme: o
}) => u({
  display: "inline-flex",
  borderRadius: (o.vars || o).shape.borderRadius
}, e.orientation === "vertical" && {
  flexDirection: "column"
}, e.fullWidth && {
  width: "100%"
}, {
  [`& .${ot.grouped}`]: u({}, e.orientation === "horizontal" ? {
    [`&.${ot.selected} + .${ot.grouped}.${ot.selected}`]: {
      borderLeft: 0,
      marginLeft: 0
    }
  } : {
    [`&.${ot.selected} + .${ot.grouped}.${ot.selected}`]: {
      borderTop: 0,
      marginTop: 0
    }
  })
}, e.orientation === "horizontal" ? {
  [`& .${ot.firstButton},& .${ot.middleButton}`]: {
    borderTopRightRadius: 0,
    borderBottomRightRadius: 0
  },
  [`& .${ot.lastButton},& .${ot.middleButton}`]: {
    marginLeft: -1,
    borderLeft: "1px solid transparent",
    borderTopLeftRadius: 0,
    borderBottomLeftRadius: 0
  }
} : {
  [`& .${ot.firstButton},& .${ot.middleButton}`]: {
    borderBottomLeftRadius: 0,
    borderBottomRightRadius: 0
  },
  [`& .${ot.lastButton},& .${ot.middleButton}`]: {
    marginTop: -1,
    borderTop: "1px solid transparent",
    borderTopLeftRadius: 0,
    borderTopRightRadius: 0
  }
}, e.orientation === "horizontal" ? {
  [`& .${ot.lastButton}.${bn.disabled},& .${ot.middleButton}.${bn.disabled}`]: {
    borderLeft: "1px solid transparent"
  }
} : {
  [`& .${ot.lastButton}.${bn.disabled},& .${ot.middleButton}.${bn.disabled}`]: {
    borderTop: "1px solid transparent"
  }
})), Yp = /* @__PURE__ */ f.forwardRef(function(o, n) {
  const r = oe({
    props: o,
    name: "MuiToggleButtonGroup"
  }), {
    children: s,
    className: a,
    color: i = "standard",
    disabled: l = !1,
    exclusive: c = !1,
    fullWidth: d = !1,
    onChange: p,
    orientation: m = "horizontal",
    size: b = "medium",
    value: h
  } = r, v = z(r, sI), C = u({}, r, {
    disabled: l,
    fullWidth: d,
    orientation: m,
    size: b
  }), g = aI(C), y = f.useCallback((w, E) => {
    if (!p)
      return;
    const N = h && h.indexOf(E);
    let M;
    h && N >= 0 ? (M = h.slice(), M.splice(N, 1)) : M = h ? h.concat(E) : [E], p(w, M);
  }, [p, h]), $ = f.useCallback((w, E) => {
    p && p(w, h === E ? null : E);
  }, [p, h]), T = f.useMemo(() => ({
    className: g.grouped,
    onChange: c ? $ : y,
    value: h,
    size: b,
    fullWidth: d,
    color: i,
    disabled: l
  }), [g.grouped, c, $, y, h, b, d, i, l]), O = vc(s), S = O.length, R = (w) => {
    const E = w === 0, N = w === S - 1;
    return E && N ? "" : E ? g.firstButton : N ? g.lastButton : g.middleButton;
  };
  return /* @__PURE__ */ x(iI, u({
    role: "group",
    className: D(g.root, a),
    ref: n,
    ownerState: C
  }, v, {
    children: /* @__PURE__ */ x(Hp.Provider, {
      value: T,
      children: O.map((w, E) => (process.env.NODE_ENV !== "production" && to.isFragment(w) && console.error(["MUI: The ToggleButtonGroup component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join(`
`)), /* @__PURE__ */ x(Gp.Provider, {
        value: R(E),
        children: w
      }, E)))
    })
  }));
});
process.env.NODE_ENV !== "production" && (Yp.propTypes = {
  // ┌────────────────────────────── Warning ──────────────────────────────┐
  // │ These PropTypes are generated from the TypeScript type definitions. │
  // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
  // └─────────────────────────────────────────────────────────────────────┘
  /**
   * The content of the component.
   */
  children: t.node,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: t.object,
  /**
   * @ignore
   */
  className: t.string,
  /**
   * The color of the button when it is selected.
   * It supports both default and custom theme colors, which can be added as shown in the
   * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
   * @default 'standard'
   */
  color: t.oneOfType([t.oneOf(["standard", "primary", "secondary", "error", "info", "success", "warning"]), t.string]),
  /**
   * If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.
   * @default false
   */
  disabled: t.bool,
  /**
   * If `true`, only allow one of the child ToggleButton values to be selected.
   * @default false
   */
  exclusive: t.bool,
  /**
   * If `true`, the button group will take up the full width of its container.
   * @default false
   */
  fullWidth: t.bool,
  /**
   * Callback fired when the value changes.
   *
   * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
   * @param {any} value of the selected buttons. When `exclusive` is true
   * this is a single value; when false an array of selected values. If no value
   * is selected and `exclusive` is true the value is null; when false an empty array.
   */
  onChange: t.func,
  /**
   * The component orientation (layout flow direction).
   * @default 'horizontal'
   */
  orientation: t.oneOf(["horizontal", "vertical"]),
  /**
   * The size of the component.
   * @default 'medium'
   */
  size: t.oneOfType([t.oneOf(["small", "medium", "large"]), t.string]),
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: t.oneOfType([t.arrayOf(t.oneOfType([t.func, t.object, t.bool])), t.func, t.object]),
  /**
   * The currently selected value within the group or an array of selected
   * values when `exclusive` is false.
   *
   * The value must have reference equality with the option in order to be selected.
   */
  value: t.any
});
const hB = Yp, lI = ["getTrigger", "target"];
function cI(e, o) {
  const {
    disableHysteresis: n = !1,
    threshold: r = 100,
    target: s
  } = o, a = e.current;
  return s && (e.current = s.pageYOffset !== void 0 ? s.pageYOffset : s.scrollTop), !n && a !== void 0 && e.current < a ? !1 : e.current > r;
}
const uI = typeof window < "u" ? window : null;
function vB(e = {}) {
  const {
    getTrigger: o = cI,
    target: n = uI
  } = e, r = z(e, lI), s = f.useRef(), [a, i] = f.useState(() => o(s, r));
  return f.useEffect(() => {
    const l = () => {
      i(o(s, u({
        target: n
      }, r)));
    };
    return l(), n.addEventListener("scroll", l, {
      passive: !0
    }), () => {
      n.removeEventListener("scroll", l, {
        passive: !0
      });
    };
  }, [n, o, JSON.stringify(r)]), a;
}
var Es = class {
  constructor() {
    this.listeners = /* @__PURE__ */ new Set(), this.subscribe = this.subscribe.bind(this);
  }
  subscribe(e) {
    return this.listeners.add(e), this.onSubscribe(), () => {
      this.listeners.delete(e), this.onUnsubscribe();
    };
  }
  hasListeners() {
    return this.listeners.size > 0;
  }
  onSubscribe() {
  }
  onUnsubscribe() {
  }
}, Ps = typeof window > "u" || "Deno" in globalThis;
function Xt() {
}
function dI(e, o) {
  return typeof e == "function" ? e(o) : e;
}
function pI(e) {
  return typeof e == "number" && e >= 0 && e !== 1 / 0;
}
function fI(e, o) {
  return Math.max(e + (o || 0) - Date.now(), 0);
}
function Gl(e, o) {
  const {
    type: n = "all",
    exact: r,
    fetchStatus: s,
    predicate: a,
    queryKey: i,
    stale: l
  } = e;
  if (i) {
    if (r) {
      if (o.queryHash !== oi(i, o.options))
        return !1;
    } else if (!ar(o.queryKey, i))
      return !1;
  }
  if (n !== "all") {
    const c = o.isActive();
    if (n === "active" && !c || n === "inactive" && c)
      return !1;
  }
  return !(typeof l == "boolean" && o.isStale() !== l || s && s !== o.state.fetchStatus || a && !a(o));
}
function Kl(e, o) {
  const { exact: n, status: r, predicate: s, mutationKey: a } = e;
  if (a) {
    if (!o.options.mutationKey)
      return !1;
    if (n) {
      if (sr(o.options.mutationKey) !== sr(a))
        return !1;
    } else if (!ar(o.options.mutationKey, a))
      return !1;
  }
  return !(r && o.state.status !== r || s && !s(o));
}
function oi(e, o) {
  return ((o == null ? void 0 : o.queryKeyHashFn) || sr)(e);
}
function sr(e) {
  return JSON.stringify(
    e,
    (o, n) => ma(n) ? Object.keys(n).sort().reduce((r, s) => (r[s] = n[s], r), {}) : n
  );
}
function ar(e, o) {
  return e === o ? !0 : typeof e != typeof o ? !1 : e && o && typeof e == "object" && typeof o == "object" ? !Object.keys(o).some((n) => !ar(e[n], o[n])) : !1;
}
function Xp(e, o) {
  if (e === o)
    return e;
  const n = Yl(e) && Yl(o);
  if (n || ma(e) && ma(o)) {
    const r = n ? e : Object.keys(e), s = r.length, a = n ? o : Object.keys(o), i = a.length, l = n ? [] : {};
    let c = 0;
    for (let d = 0; d < i; d++) {
      const p = n ? d : a[d];
      !n && e[p] === void 0 && o[p] === void 0 && r.includes(p) ? (l[p] = void 0, c++) : (l[p] = Xp(e[p], o[p]), l[p] === e[p] && e[p] !== void 0 && c++);
    }
    return s === i && c === s ? e : l;
  }
  return o;
}
function Yl(e) {
  return Array.isArray(e) && e.length === Object.keys(e).length;
}
function ma(e) {
  if (!Xl(e))
    return !1;
  const o = e.constructor;
  if (o === void 0)
    return !0;
  const n = o.prototype;
  return !(!Xl(n) || !n.hasOwnProperty("isPrototypeOf"));
}
function Xl(e) {
  return Object.prototype.toString.call(e) === "[object Object]";
}
function mI(e) {
  return new Promise((o) => {
    setTimeout(o, e);
  });
}
function bI(e, o, n) {
  return typeof n.structuralSharing == "function" ? n.structuralSharing(e, o) : n.structuralSharing !== !1 ? Xp(e, o) : o;
}
function gI(e, o, n = 0) {
  const r = [...e, o];
  return n && r.length > n ? r.slice(1) : r;
}
function hI(e, o, n = 0) {
  const r = [o, ...e];
  return n && r.length > n ? r.slice(0, -1) : r;
}
var ir = Symbol(), Zo, Io, hn, Zl, vI = (Zl = class extends Es {
  constructor() {
    super();
    We(this, Zo, void 0);
    We(this, Io, void 0);
    We(this, hn, void 0);
    Be(this, hn, (o) => {
      if (!Ps && window.addEventListener) {
        const n = () => o();
        return window.addEventListener("visibilitychange", n, !1), () => {
          window.removeEventListener("visibilitychange", n);
        };
      }
    });
  }
  onSubscribe() {
    J(this, Io) || this.setEventListener(J(this, hn));
  }
  onUnsubscribe() {
    var o;
    this.hasListeners() || ((o = J(this, Io)) == null || o.call(this), Be(this, Io, void 0));
  }
  setEventListener(o) {
    var n;
    Be(this, hn, o), (n = J(this, Io)) == null || n.call(this), Be(this, Io, o((r) => {
      typeof r == "boolean" ? this.setFocused(r) : this.onFocus();
    }));
  }
  setFocused(o) {
    J(this, Zo) !== o && (Be(this, Zo, o), this.onFocus());
  }
  onFocus() {
    const o = this.isFocused();
    this.listeners.forEach((n) => {
      n(o);
    });
  }
  isFocused() {
    var o;
    return typeof J(this, Zo) == "boolean" ? J(this, Zo) : ((o = globalThis.document) == null ? void 0 : o.visibilityState) !== "hidden";
  }
}, Zo = new WeakMap(), Io = new WeakMap(), hn = new WeakMap(), Zl), Qp = new vI(), vn, ko, yn, Jl, yI = (Jl = class extends Es {
  constructor() {
    super();
    We(this, vn, !0);
    We(this, ko, void 0);
    We(this, yn, void 0);
    Be(this, yn, (o) => {
      if (!Ps && window.addEventListener) {
        const n = () => o(!0), r = () => o(!1);
        return window.addEventListener("online", n, !1), window.addEventListener("offline", r, !1), () => {
          window.removeEventListener("online", n), window.removeEventListener("offline", r);
        };
      }
    });
  }
  onSubscribe() {
    J(this, ko) || this.setEventListener(J(this, yn));
  }
  onUnsubscribe() {
    var o;
    this.hasListeners() || ((o = J(this, ko)) == null || o.call(this), Be(this, ko, void 0));
  }
  setEventListener(o) {
    var n;
    Be(this, yn, o), (n = J(this, ko)) == null || n.call(this), Be(this, ko, o(this.setOnline.bind(this)));
  }
  setOnline(o) {
    J(this, vn) !== o && (Be(this, vn, o), this.listeners.forEach((r) => {
      r(o);
    }));
  }
  isOnline() {
    return J(this, vn);
  }
}, vn = new WeakMap(), ko = new WeakMap(), yn = new WeakMap(), Jl), ls = new yI();
function CI(e) {
  return Math.min(1e3 * 2 ** e, 3e4);
}
function ni(e) {
  return (e ?? "online") === "online" ? ls.isOnline() : !0;
}
var Zp = class {
  constructor(e) {
    this.revert = e == null ? void 0 : e.revert, this.silent = e == null ? void 0 : e.silent;
  }
};
function Xs(e) {
  return e instanceof Zp;
}
function Jp(e) {
  let o = !1, n = 0, r = !1, s, a, i;
  const l = new Promise((g, y) => {
    a = g, i = y;
  }), c = (g) => {
    var y;
    r || (h(new Zp(g)), (y = e.abort) == null || y.call(e));
  }, d = () => {
    o = !0;
  }, p = () => {
    o = !1;
  }, m = () => !Qp.isFocused() || e.networkMode !== "always" && !ls.isOnline(), b = (g) => {
    var y;
    r || (r = !0, (y = e.onSuccess) == null || y.call(e, g), s == null || s(), a(g));
  }, h = (g) => {
    var y;
    r || (r = !0, (y = e.onError) == null || y.call(e, g), s == null || s(), i(g));
  }, v = () => new Promise((g) => {
    var y;
    s = ($) => {
      const T = r || !m();
      return T && g($), T;
    }, (y = e.onPause) == null || y.call(e);
  }).then(() => {
    var g;
    s = void 0, r || (g = e.onContinue) == null || g.call(e);
  }), C = () => {
    if (r)
      return;
    let g;
    try {
      g = e.fn();
    } catch (y) {
      g = Promise.reject(y);
    }
    Promise.resolve(g).then(b).catch((y) => {
      var R;
      if (r)
        return;
      const $ = e.retry ?? (Ps ? 0 : 3), T = e.retryDelay ?? CI, O = typeof T == "function" ? T(n, y) : T, S = $ === !0 || typeof $ == "number" && n < $ || typeof $ == "function" && $(n, y);
      if (o || !S) {
        h(y);
        return;
      }
      n++, (R = e.onFail) == null || R.call(e, n, y), mI(O).then(() => {
        if (m())
          return v();
      }).then(() => {
        o ? h(y) : C();
      });
    });
  };
  return ni(e.networkMode) ? C() : v().then(C), {
    promise: l,
    cancel: c,
    continue: () => (s == null ? void 0 : s()) ? l : Promise.resolve(),
    cancelRetry: d,
    continueRetry: p
  };
}
function xI() {
  let e = [], o = 0, n = (b) => {
    b();
  }, r = (b) => {
    b();
  }, s = (b) => setTimeout(b, 0);
  const a = (b) => {
    s = b;
  }, i = (b) => {
    let h;
    o++;
    try {
      h = b();
    } finally {
      o--, o || d();
    }
    return h;
  }, l = (b) => {
    o ? e.push(b) : s(() => {
      n(b);
    });
  }, c = (b) => (...h) => {
    l(() => {
      b(...h);
    });
  }, d = () => {
    const b = e;
    e = [], b.length && s(() => {
      r(() => {
        b.forEach((h) => {
          n(h);
        });
      });
    });
  };
  return {
    batch: i,
    batchCalls: c,
    schedule: l,
    setNotifyFunction: (b) => {
      n = b;
    },
    setBatchNotifyFunction: (b) => {
      r = b;
    },
    setScheduler: a
  };
}
var St = xI(), Jo, ec, ef = (ec = class {
  constructor() {
    We(this, Jo, void 0);
  }
  destroy() {
    this.clearGcTimeout();
  }
  scheduleGc() {
    this.clearGcTimeout(), pI(this.gcTime) && Be(this, Jo, setTimeout(() => {
      this.optionalRemove();
    }, this.gcTime));
  }
  updateGcTime(e) {
    this.gcTime = Math.max(
      this.gcTime || 0,
      e ?? (Ps ? 1 / 0 : 5 * 60 * 1e3)
    );
  }
  clearGcTimeout() {
    J(this, Jo) && (clearTimeout(J(this, Jo)), Be(this, Jo, void 0));
  }
}, Jo = new WeakMap(), ec), Cn, xn, _t, $t, mt, lr, en, Qt, vo, tc, TI = (tc = class extends ef {
  constructor(o) {
    super();
    We(this, Qt);
    We(this, Cn, void 0);
    We(this, xn, void 0);
    We(this, _t, void 0);
    We(this, $t, void 0);
    We(this, mt, void 0);
    We(this, lr, void 0);
    We(this, en, void 0);
    Be(this, en, !1), Be(this, lr, o.defaultOptions), this.setOptions(o.options), Be(this, mt, []), Be(this, _t, o.cache), this.queryKey = o.queryKey, this.queryHash = o.queryHash, Be(this, Cn, o.state || OI(this.options)), this.state = J(this, Cn), this.scheduleGc();
  }
  get meta() {
    return this.options.meta;
  }
  setOptions(o) {
    this.options = { ...J(this, lr), ...o }, this.updateGcTime(this.options.gcTime);
  }
  optionalRemove() {
    !J(this, mt).length && this.state.fetchStatus === "idle" && J(this, _t).remove(this);
  }
  setData(o, n) {
    const r = bI(this.state.data, o, this.options);
    return Ct(this, Qt, vo).call(this, {
      data: r,
      type: "success",
      dataUpdatedAt: n == null ? void 0 : n.updatedAt,
      manual: n == null ? void 0 : n.manual
    }), r;
  }
  setState(o, n) {
    Ct(this, Qt, vo).call(this, { type: "setState", state: o, setStateOptions: n });
  }
  cancel(o) {
    var r, s;
    const n = (r = J(this, $t)) == null ? void 0 : r.promise;
    return (s = J(this, $t)) == null || s.cancel(o), n ? n.then(Xt).catch(Xt) : Promise.resolve();
  }
  destroy() {
    super.destroy(), this.cancel({ silent: !0 });
  }
  reset() {
    this.destroy(), this.setState(J(this, Cn));
  }
  isActive() {
    return J(this, mt).some(
      (o) => o.options.enabled !== !1
    );
  }
  isDisabled() {
    return this.getObserversCount() > 0 && !this.isActive();
  }
  isStale() {
    return this.state.isInvalidated ? !0 : this.getObserversCount() > 0 ? J(this, mt).some(
      (o) => o.getCurrentResult().isStale
    ) : this.state.data === void 0;
  }
  isStaleByTime(o = 0) {
    return this.state.isInvalidated || this.state.data === void 0 || !fI(this.state.dataUpdatedAt, o);
  }
  onFocus() {
    var n;
    const o = J(this, mt).find((r) => r.shouldFetchOnWindowFocus());
    o == null || o.refetch({ cancelRefetch: !1 }), (n = J(this, $t)) == null || n.continue();
  }
  onOnline() {
    var n;
    const o = J(this, mt).find((r) => r.shouldFetchOnReconnect());
    o == null || o.refetch({ cancelRefetch: !1 }), (n = J(this, $t)) == null || n.continue();
  }
  addObserver(o) {
    J(this, mt).includes(o) || (J(this, mt).push(o), this.clearGcTimeout(), J(this, _t).notify({ type: "observerAdded", query: this, observer: o }));
  }
  removeObserver(o) {
    J(this, mt).includes(o) && (Be(this, mt, J(this, mt).filter((n) => n !== o)), J(this, mt).length || (J(this, $t) && (J(this, en) ? J(this, $t).cancel({ revert: !0 }) : J(this, $t).cancelRetry()), this.scheduleGc()), J(this, _t).notify({ type: "observerRemoved", query: this, observer: o }));
  }
  getObserversCount() {
    return J(this, mt).length;
  }
  invalidate() {
    this.state.isInvalidated || Ct(this, Qt, vo).call(this, { type: "invalidate" });
  }
  fetch(o, n) {
    var d, p, m;
    if (this.state.fetchStatus !== "idle") {
      if (this.state.data !== void 0 && (n != null && n.cancelRefetch))
        this.cancel({ silent: !0 });
      else if (J(this, $t))
        return J(this, $t).continueRetry(), J(this, $t).promise;
    }
    if (o && this.setOptions(o), !this.options.queryFn) {
      const b = J(this, mt).find((h) => h.options.queryFn);
      b && this.setOptions(b.options);
    }
    process.env.NODE_ENV !== "production" && (Array.isArray(this.options.queryKey) || console.error(
      "As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']"
    ));
    const r = new AbortController(), s = {
      queryKey: this.queryKey,
      meta: this.meta
    }, a = (b) => {
      Object.defineProperty(b, "signal", {
        enumerable: !0,
        get: () => (Be(this, en, !0), r.signal)
      });
    };
    a(s);
    const i = () => (process.env.NODE_ENV !== "production" && this.options.queryFn === ir && console.error(
      `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${this.options.queryHash}'`
    ), !this.options.queryFn || this.options.queryFn === ir ? Promise.reject(
      new Error(`Missing queryFn: '${this.options.queryHash}'`)
    ) : (Be(this, en, !1), this.options.persister ? this.options.persister(
      this.options.queryFn,
      s,
      this
    ) : this.options.queryFn(
      s
    ))), l = {
      fetchOptions: n,
      options: this.options,
      queryKey: this.queryKey,
      state: this.state,
      fetchFn: i
    };
    a(l), (d = this.options.behavior) == null || d.onFetch(
      l,
      this
    ), Be(this, xn, this.state), (this.state.fetchStatus === "idle" || this.state.fetchMeta !== ((p = l.fetchOptions) == null ? void 0 : p.meta)) && Ct(this, Qt, vo).call(this, { type: "fetch", meta: (m = l.fetchOptions) == null ? void 0 : m.meta });
    const c = (b) => {
      var h, v, C, g;
      Xs(b) && b.silent || Ct(this, Qt, vo).call(this, {
        type: "error",
        error: b
      }), Xs(b) || ((v = (h = J(this, _t).config).onError) == null || v.call(
        h,
        b,
        this
      ), (g = (C = J(this, _t).config).onSettled) == null || g.call(
        C,
        this.state.data,
        b,
        this
      )), this.isFetchingOptimistic || this.scheduleGc(), this.isFetchingOptimistic = !1;
    };
    return Be(this, $t, Jp({
      fn: l.fetchFn,
      abort: r.abort.bind(r),
      onSuccess: (b) => {
        var h, v, C, g;
        if (b === void 0) {
          process.env.NODE_ENV !== "production" && console.error(
            `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`
          ), c(new Error(`${this.queryHash} data is undefined`));
          return;
        }
        this.setData(b), (v = (h = J(this, _t).config).onSuccess) == null || v.call(h, b, this), (g = (C = J(this, _t).config).onSettled) == null || g.call(
          C,
          b,
          this.state.error,
          this
        ), this.isFetchingOptimistic || this.scheduleGc(), this.isFetchingOptimistic = !1;
      },
      onError: c,
      onFail: (b, h) => {
        Ct(this, Qt, vo).call(this, { type: "failed", failureCount: b, error: h });
      },
      onPause: () => {
        Ct(this, Qt, vo).call(this, { type: "pause" });
      },
      onContinue: () => {
        Ct(this, Qt, vo).call(this, { type: "continue" });
      },
      retry: l.options.retry,
      retryDelay: l.options.retryDelay,
      networkMode: l.options.networkMode
    })), J(this, $t).promise;
  }
}, Cn = new WeakMap(), xn = new WeakMap(), _t = new WeakMap(), $t = new WeakMap(), mt = new WeakMap(), lr = new WeakMap(), en = new WeakMap(), Qt = new WeakSet(), vo = function(o) {
  const n = (r) => {
    switch (o.type) {
      case "failed":
        return {
          ...r,
          fetchFailureCount: o.failureCount,
          fetchFailureReason: o.error
        };
      case "pause":
        return {
          ...r,
          fetchStatus: "paused"
        };
      case "continue":
        return {
          ...r,
          fetchStatus: "fetching"
        };
      case "fetch":
        return {
          ...r,
          fetchFailureCount: 0,
          fetchFailureReason: null,
          fetchMeta: o.meta ?? null,
          fetchStatus: ni(this.options.networkMode) ? "fetching" : "paused",
          ...r.data === void 0 && {
            error: null,
            status: "pending"
          }
        };
      case "success":
        return {
          ...r,
          data: o.data,
          dataUpdateCount: r.dataUpdateCount + 1,
          dataUpdatedAt: o.dataUpdatedAt ?? Date.now(),
          error: null,
          isInvalidated: !1,
          status: "success",
          ...!o.manual && {
            fetchStatus: "idle",
            fetchFailureCount: 0,
            fetchFailureReason: null
          }
        };
      case "error":
        const s = o.error;
        return Xs(s) && s.revert && J(this, xn) ? { ...J(this, xn), fetchStatus: "idle" } : {
          ...r,
          error: s,
          errorUpdateCount: r.errorUpdateCount + 1,
          errorUpdatedAt: Date.now(),
          fetchFailureCount: r.fetchFailureCount + 1,
          fetchFailureReason: s,
          fetchStatus: "idle",
          status: "error"
        };
      case "invalidate":
        return {
          ...r,
          isInvalidated: !0
        };
      case "setState":
        return {
          ...r,
          ...o.state
        };
    }
  };
  this.state = n(this.state), St.batch(() => {
    J(this, mt).forEach((r) => {
      r.onQueryUpdate();
    }), J(this, _t).notify({ query: this, type: "updated", action: o });
  });
}, tc);
function OI(e) {
  const o = typeof e.initialData == "function" ? e.initialData() : e.initialData, n = o !== void 0, r = n ? typeof e.initialDataUpdatedAt == "function" ? e.initialDataUpdatedAt() : e.initialDataUpdatedAt : 0;
  return {
    data: o,
    dataUpdateCount: 0,
    dataUpdatedAt: n ? r ?? Date.now() : 0,
    error: null,
    errorUpdateCount: 0,
    errorUpdatedAt: 0,
    fetchFailureCount: 0,
    fetchFailureReason: null,
    fetchMeta: null,
    isInvalidated: !1,
    status: n ? "success" : "pending",
    fetchStatus: "idle"
  };
}
var io, oc, $I = (oc = class extends Es {
  constructor(o = {}) {
    super();
    We(this, io, void 0);
    this.config = o, Be(this, io, /* @__PURE__ */ new Map());
  }
  build(o, n, r) {
    const s = n.queryKey, a = n.queryHash ?? oi(s, n);
    let i = this.get(a);
    return i || (i = new TI({
      cache: this,
      queryKey: s,
      queryHash: a,
      options: o.defaultQueryOptions(n),
      state: r,
      defaultOptions: o.getQueryDefaults(s)
    }), this.add(i)), i;
  }
  add(o) {
    J(this, io).has(o.queryHash) || (J(this, io).set(o.queryHash, o), this.notify({
      type: "added",
      query: o
    }));
  }
  remove(o) {
    const n = J(this, io).get(o.queryHash);
    n && (o.destroy(), n === o && J(this, io).delete(o.queryHash), this.notify({ type: "removed", query: o }));
  }
  clear() {
    St.batch(() => {
      this.getAll().forEach((o) => {
        this.remove(o);
      });
    });
  }
  get(o) {
    return J(this, io).get(o);
  }
  getAll() {
    return [...J(this, io).values()];
  }
  find(o) {
    const n = { exact: !0, ...o };
    return this.getAll().find(
      (r) => Gl(n, r)
    );
  }
  findAll(o = {}) {
    const n = this.getAll();
    return Object.keys(o).length > 0 ? n.filter((r) => Gl(o, r)) : n;
  }
  notify(o) {
    St.batch(() => {
      this.listeners.forEach((n) => {
        n(o);
      });
    });
  }
  onFocus() {
    St.batch(() => {
      this.getAll().forEach((o) => {
        o.onFocus();
      });
    });
  }
  onOnline() {
    St.batch(() => {
      this.getAll().forEach((o) => {
        o.onOnline();
      });
    });
  }
}, io = new WeakMap(), oc), lo, cr, Mt, Tn, co, Po, nc, SI = (nc = class extends ef {
  constructor(o) {
    super();
    We(this, co);
    We(this, lo, void 0);
    We(this, cr, void 0);
    We(this, Mt, void 0);
    We(this, Tn, void 0);
    this.mutationId = o.mutationId, Be(this, cr, o.defaultOptions), Be(this, Mt, o.mutationCache), Be(this, lo, []), this.state = o.state || RI(), this.setOptions(o.options), this.scheduleGc();
  }
  setOptions(o) {
    this.options = { ...J(this, cr), ...o }, this.updateGcTime(this.options.gcTime);
  }
  get meta() {
    return this.options.meta;
  }
  addObserver(o) {
    J(this, lo).includes(o) || (J(this, lo).push(o), this.clearGcTimeout(), J(this, Mt).notify({
      type: "observerAdded",
      mutation: this,
      observer: o
    }));
  }
  removeObserver(o) {
    Be(this, lo, J(this, lo).filter((n) => n !== o)), this.scheduleGc(), J(this, Mt).notify({
      type: "observerRemoved",
      mutation: this,
      observer: o
    });
  }
  optionalRemove() {
    J(this, lo).length || (this.state.status === "pending" ? this.scheduleGc() : J(this, Mt).remove(this));
  }
  continue() {
    var o;
    return ((o = J(this, Tn)) == null ? void 0 : o.continue()) ?? // continuing a mutation assumes that variables are set, mutation must have been dehydrated before
    this.execute(this.state.variables);
  }
  async execute(o) {
    var s, a, i, l, c, d, p, m, b, h, v, C, g, y, $, T, O, S, R, w;
    const n = () => (Be(this, Tn, Jp({
      fn: () => this.options.mutationFn ? this.options.mutationFn(o) : Promise.reject(new Error("No mutationFn found")),
      onFail: (E, N) => {
        Ct(this, co, Po).call(this, { type: "failed", failureCount: E, error: N });
      },
      onPause: () => {
        Ct(this, co, Po).call(this, { type: "pause" });
      },
      onContinue: () => {
        Ct(this, co, Po).call(this, { type: "continue" });
      },
      retry: this.options.retry ?? 0,
      retryDelay: this.options.retryDelay,
      networkMode: this.options.networkMode
    })), J(this, Tn).promise), r = this.state.status === "pending";
    try {
      if (!r) {
        Ct(this, co, Po).call(this, { type: "pending", variables: o }), await ((a = (s = J(this, Mt).config).onMutate) == null ? void 0 : a.call(
          s,
          o,
          this
        ));
        const N = await ((l = (i = this.options).onMutate) == null ? void 0 : l.call(i, o));
        N !== this.state.context && Ct(this, co, Po).call(this, {
          type: "pending",
          context: N,
          variables: o
        });
      }
      const E = await n();
      return await ((d = (c = J(this, Mt).config).onSuccess) == null ? void 0 : d.call(
        c,
        E,
        o,
        this.state.context,
        this
      )), await ((m = (p = this.options).onSuccess) == null ? void 0 : m.call(p, E, o, this.state.context)), await ((h = (b = J(this, Mt).config).onSettled) == null ? void 0 : h.call(
        b,
        E,
        null,
        this.state.variables,
        this.state.context,
        this
      )), await ((C = (v = this.options).onSettled) == null ? void 0 : C.call(v, E, null, o, this.state.context)), Ct(this, co, Po).call(this, { type: "success", data: E }), E;
    } catch (E) {
      try {
        throw await ((y = (g = J(this, Mt).config).onError) == null ? void 0 : y.call(
          g,
          E,
          o,
          this.state.context,
          this
        )), await ((T = ($ = this.options).onError) == null ? void 0 : T.call(
          $,
          E,
          o,
          this.state.context
        )), await ((S = (O = J(this, Mt).config).onSettled) == null ? void 0 : S.call(
          O,
          void 0,
          E,
          this.state.variables,
          this.state.context,
          this
        )), await ((w = (R = this.options).onSettled) == null ? void 0 : w.call(
          R,
          void 0,
          E,
          o,
          this.state.context
        )), E;
      } finally {
        Ct(this, co, Po).call(this, { type: "error", error: E });
      }
    }
  }
}, lo = new WeakMap(), cr = new WeakMap(), Mt = new WeakMap(), Tn = new WeakMap(), co = new WeakSet(), Po = function(o) {
  const n = (r) => {
    switch (o.type) {
      case "failed":
        return {
          ...r,
          failureCount: o.failureCount,
          failureReason: o.error
        };
      case "pause":
        return {
          ...r,
          isPaused: !0
        };
      case "continue":
        return {
          ...r,
          isPaused: !1
        };
      case "pending":
        return {
          ...r,
          context: o.context,
          data: void 0,
          failureCount: 0,
          failureReason: null,
          error: null,
          isPaused: !ni(this.options.networkMode),
          status: "pending",
          variables: o.variables,
          submittedAt: Date.now()
        };
      case "success":
        return {
          ...r,
          data: o.data,
          failureCount: 0,
          failureReason: null,
          error: null,
          status: "success",
          isPaused: !1
        };
      case "error":
        return {
          ...r,
          data: void 0,
          error: o.error,
          failureCount: r.failureCount + 1,
          failureReason: o.error,
          isPaused: !1,
          status: "error"
        };
    }
  };
  this.state = n(this.state), St.batch(() => {
    J(this, lo).forEach((r) => {
      r.onMutationUpdate(o);
    }), J(this, Mt).notify({
      mutation: this,
      type: "updated",
      action: o
    });
  });
}, nc);
function RI() {
  return {
    context: void 0,
    data: void 0,
    error: null,
    failureCount: 0,
    failureReason: null,
    isPaused: !1,
    status: "idle",
    variables: void 0,
    submittedAt: 0
  };
}
var zt, ur, tn, rc, wI = (rc = class extends Es {
  constructor(o = {}) {
    super();
    We(this, zt, void 0);
    We(this, ur, void 0);
    We(this, tn, void 0);
    this.config = o, Be(this, zt, []), Be(this, ur, 0);
  }
  build(o, n, r) {
    const s = new SI({
      mutationCache: this,
      mutationId: ++Or(this, ur)._,
      options: o.defaultMutationOptions(n),
      state: r
    });
    return this.add(s), s;
  }
  add(o) {
    J(this, zt).push(o), this.notify({ type: "added", mutation: o });
  }
  remove(o) {
    Be(this, zt, J(this, zt).filter((n) => n !== o)), this.notify({ type: "removed", mutation: o });
  }
  clear() {
    St.batch(() => {
      J(this, zt).forEach((o) => {
        this.remove(o);
      });
    });
  }
  getAll() {
    return J(this, zt);
  }
  find(o) {
    const n = { exact: !0, ...o };
    return J(this, zt).find(
      (r) => Kl(n, r)
    );
  }
  findAll(o = {}) {
    return J(this, zt).filter(
      (n) => Kl(o, n)
    );
  }
  notify(o) {
    St.batch(() => {
      this.listeners.forEach((n) => {
        n(o);
      });
    });
  }
  resumePausedMutations() {
    return Be(this, tn, (J(this, tn) ?? Promise.resolve()).then(() => {
      const o = J(this, zt).filter((n) => n.state.isPaused);
      return St.batch(
        () => o.reduce(
          (n, r) => n.then(() => r.continue().catch(Xt)),
          Promise.resolve()
        )
      );
    }).then(() => {
      Be(this, tn, void 0);
    })), J(this, tn);
  }
}, zt = new WeakMap(), ur = new WeakMap(), tn = new WeakMap(), rc);
function EI(e) {
  return {
    onFetch: (o, n) => {
      const r = async () => {
        var v, C, g, y, $;
        const s = o.options, a = (g = (C = (v = o.fetchOptions) == null ? void 0 : v.meta) == null ? void 0 : C.fetchMore) == null ? void 0 : g.direction, i = ((y = o.state.data) == null ? void 0 : y.pages) || [], l = (($ = o.state.data) == null ? void 0 : $.pageParams) || [], c = { pages: [], pageParams: [] };
        let d = !1;
        const p = (T) => {
          Object.defineProperty(T, "signal", {
            enumerable: !0,
            get: () => (o.signal.aborted ? d = !0 : o.signal.addEventListener("abort", () => {
              d = !0;
            }), o.signal)
          });
        }, m = o.options.queryFn && o.options.queryFn !== ir ? o.options.queryFn : () => (process.env.NODE_ENV !== "production" && o.options.queryFn === ir && console.error(
          `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${o.options.queryHash}'`
        ), Promise.reject(
          new Error(`Missing queryFn: '${o.options.queryHash}'`)
        )), b = async (T, O, S) => {
          if (d)
            return Promise.reject();
          if (O == null && T.pages.length)
            return Promise.resolve(T);
          const R = {
            queryKey: o.queryKey,
            pageParam: O,
            direction: S ? "backward" : "forward",
            meta: o.options.meta
          };
          p(R);
          const w = await m(
            R
          ), { maxPages: E } = o.options, N = S ? hI : gI;
          return {
            pages: N(T.pages, w, E),
            pageParams: N(T.pageParams, O, E)
          };
        };
        let h;
        if (a && i.length) {
          const T = a === "backward", O = T ? PI : Ql, S = {
            pages: i,
            pageParams: l
          }, R = O(s, S);
          h = await b(S, R, T);
        } else {
          h = await b(
            c,
            l[0] ?? s.initialPageParam
          );
          const T = e ?? i.length;
          for (let O = 1; O < T; O++) {
            const S = Ql(s, h);
            h = await b(h, S);
          }
        }
        return h;
      };
      o.options.persister ? o.fetchFn = () => {
        var s, a;
        return (a = (s = o.options).persister) == null ? void 0 : a.call(
          s,
          r,
          {
            queryKey: o.queryKey,
            meta: o.options.meta,
            signal: o.signal
          },
          n
        );
      } : o.fetchFn = r;
    }
  };
}
function Ql(e, { pages: o, pageParams: n }) {
  const r = o.length - 1;
  return e.getNextPageParam(
    o[r],
    o,
    n[r],
    n
  );
}
function PI(e, { pages: o, pageParams: n }) {
  var r;
  return (r = e.getPreviousPageParam) == null ? void 0 : r.call(
    e,
    o[0],
    o,
    n[0],
    n
  );
}
var ct, Mo, Bo, On, $n, Lo, Sn, Rn, sc, NI = (sc = class {
  constructor(e = {}) {
    We(this, ct, void 0);
    We(this, Mo, void 0);
    We(this, Bo, void 0);
    We(this, On, void 0);
    We(this, $n, void 0);
    We(this, Lo, void 0);
    We(this, Sn, void 0);
    We(this, Rn, void 0);
    Be(this, ct, e.queryCache || new $I()), Be(this, Mo, e.mutationCache || new wI()), Be(this, Bo, e.defaultOptions || {}), Be(this, On, /* @__PURE__ */ new Map()), Be(this, $n, /* @__PURE__ */ new Map()), Be(this, Lo, 0);
  }
  mount() {
    Or(this, Lo)._++, J(this, Lo) === 1 && (Be(this, Sn, Qp.subscribe(async (e) => {
      e && (await this.resumePausedMutations(), J(this, ct).onFocus());
    })), Be(this, Rn, ls.subscribe(async (e) => {
      e && (await this.resumePausedMutations(), J(this, ct).onOnline());
    })));
  }
  unmount() {
    var e, o;
    Or(this, Lo)._--, J(this, Lo) === 0 && ((e = J(this, Sn)) == null || e.call(this), Be(this, Sn, void 0), (o = J(this, Rn)) == null || o.call(this), Be(this, Rn, void 0));
  }
  isFetching(e) {
    return J(this, ct).findAll({ ...e, fetchStatus: "fetching" }).length;
  }
  isMutating(e) {
    return J(this, Mo).findAll({ ...e, status: "pending" }).length;
  }
  getQueryData(e) {
    var n;
    const o = this.defaultQueryOptions({ queryKey: e });
    return (n = J(this, ct).get(o.queryHash)) == null ? void 0 : n.state.data;
  }
  ensureQueryData(e) {
    const o = this.getQueryData(e.queryKey);
    if (o === void 0)
      return this.fetchQuery(e);
    {
      const n = this.defaultQueryOptions(e), r = J(this, ct).build(this, n);
      return e.revalidateIfStale && r.isStaleByTime(n.staleTime) && this.prefetchQuery(n), Promise.resolve(o);
    }
  }
  getQueriesData(e) {
    return this.getQueryCache().findAll(e).map(({ queryKey: o, state: n }) => {
      const r = n.data;
      return [o, r];
    });
  }
  setQueryData(e, o, n) {
    const r = this.defaultQueryOptions({ queryKey: e }), s = J(this, ct).get(
      r.queryHash
    ), a = s == null ? void 0 : s.state.data, i = dI(o, a);
    if (i !== void 0)
      return J(this, ct).build(this, r).setData(i, { ...n, manual: !0 });
  }
  setQueriesData(e, o, n) {
    return St.batch(
      () => this.getQueryCache().findAll(e).map(({ queryKey: r }) => [
        r,
        this.setQueryData(r, o, n)
      ])
    );
  }
  getQueryState(e) {
    var n;
    const o = this.defaultQueryOptions({ queryKey: e });
    return (n = J(this, ct).get(o.queryHash)) == null ? void 0 : n.state;
  }
  removeQueries(e) {
    const o = J(this, ct);
    St.batch(() => {
      o.findAll(e).forEach((n) => {
        o.remove(n);
      });
    });
  }
  resetQueries(e, o) {
    const n = J(this, ct), r = {
      type: "active",
      ...e
    };
    return St.batch(() => (n.findAll(e).forEach((s) => {
      s.reset();
    }), this.refetchQueries(r, o)));
  }
  cancelQueries(e = {}, o = {}) {
    const n = { revert: !0, ...o }, r = St.batch(
      () => J(this, ct).findAll(e).map((s) => s.cancel(n))
    );
    return Promise.all(r).then(Xt).catch(Xt);
  }
  invalidateQueries(e = {}, o = {}) {
    return St.batch(() => {
      if (J(this, ct).findAll(e).forEach((r) => {
        r.invalidate();
      }), e.refetchType === "none")
        return Promise.resolve();
      const n = {
        ...e,
        type: e.refetchType ?? e.type ?? "active"
      };
      return this.refetchQueries(n, o);
    });
  }
  refetchQueries(e = {}, o) {
    const n = {
      ...o,
      cancelRefetch: (o == null ? void 0 : o.cancelRefetch) ?? !0
    }, r = St.batch(
      () => J(this, ct).findAll(e).filter((s) => !s.isDisabled()).map((s) => {
        let a = s.fetch(void 0, n);
        return n.throwOnError || (a = a.catch(Xt)), s.state.fetchStatus === "paused" ? Promise.resolve() : a;
      })
    );
    return Promise.all(r).then(Xt);
  }
  fetchQuery(e) {
    const o = this.defaultQueryOptions(e);
    o.retry === void 0 && (o.retry = !1);
    const n = J(this, ct).build(this, o);
    return n.isStaleByTime(o.staleTime) ? n.fetch(o) : Promise.resolve(n.state.data);
  }
  prefetchQuery(e) {
    return this.fetchQuery(e).then(Xt).catch(Xt);
  }
  fetchInfiniteQuery(e) {
    return e.behavior = EI(e.pages), this.fetchQuery(e);
  }
  prefetchInfiniteQuery(e) {
    return this.fetchInfiniteQuery(e).then(Xt).catch(Xt);
  }
  resumePausedMutations() {
    return ls.isOnline() ? J(this, Mo).resumePausedMutations() : Promise.resolve();
  }
  getQueryCache() {
    return J(this, ct);
  }
  getMutationCache() {
    return J(this, Mo);
  }
  getDefaultOptions() {
    return J(this, Bo);
  }
  setDefaultOptions(e) {
    Be(this, Bo, e);
  }
  setQueryDefaults(e, o) {
    J(this, On).set(sr(e), {
      queryKey: e,
      defaultOptions: o
    });
  }
  getQueryDefaults(e) {
    const o = [...J(this, On).values()];
    let n = {};
    return o.forEach((r) => {
      ar(e, r.queryKey) && (n = { ...n, ...r.defaultOptions });
    }), n;
  }
  setMutationDefaults(e, o) {
    J(this, $n).set(sr(e), {
      mutationKey: e,
      defaultOptions: o
    });
  }
  getMutationDefaults(e) {
    const o = [...J(this, $n).values()];
    let n = {};
    return o.forEach((r) => {
      ar(e, r.mutationKey) && (n = { ...n, ...r.defaultOptions });
    }), n;
  }
  defaultQueryOptions(e) {
    if (e._defaulted)
      return e;
    const o = {
      ...J(this, Bo).queries,
      ...this.getQueryDefaults(e.queryKey),
      ...e,
      _defaulted: !0
    };
    return o.queryHash || (o.queryHash = oi(
      o.queryKey,
      o
    )), o.refetchOnReconnect === void 0 && (o.refetchOnReconnect = o.networkMode !== "always"), o.throwOnError === void 0 && (o.throwOnError = !!o.suspense), !o.networkMode && o.persister && (o.networkMode = "offlineFirst"), o.enabled !== !0 && o.queryFn === ir && (o.enabled = !1), o;
  }
  defaultMutationOptions(e) {
    return e != null && e._defaulted ? e : {
      ...J(this, Bo).mutations,
      ...(e == null ? void 0 : e.mutationKey) && this.getMutationDefaults(e.mutationKey),
      ...e,
      _defaulted: !0
    };
  }
  clear() {
    J(this, ct).clear(), J(this, Mo).clear();
  }
}, ct = new WeakMap(), Mo = new WeakMap(), Bo = new WeakMap(), On = new WeakMap(), $n = new WeakMap(), Lo = new WeakMap(), Sn = new WeakMap(), Rn = new WeakMap(), sc), II = f.createContext(
  void 0
), kI = ({
  client: e,
  children: o
}) => (f.useEffect(() => (e.mount(), () => {
  e.unmount();
}), [e]), /* @__PURE__ */ x(II.Provider, { value: e, children: o }));
const yB = (e, o) => {
  window.RTB2_MENUS || (window.RTB2_MENUS = {}), Object.assign(window.RTB2_MENUS, e);
  class n extends HTMLElement {
    connectedCallback() {
      const s = document.createElement("div");
      s.style.display = "flex", s.style.flexDirection = "column", s.style.flex = "1", this.appendChild(s);
      const a = mf({
        key: e.component,
        prepend: !0,
        container: s
      }), i = bf(), l = new NI({});
      vf(s).render(
        /* @__PURE__ */ x(gf, { value: a, children: /* @__PURE__ */ x(kI, { client: l, children: /* @__PURE__ */ Ce(Of, { theme: i, children: [
          /* @__PURE__ */ x(Vu, {}),
          /* @__PURE__ */ x(o, {})
        ] }) }) })
      );
    }
  }
  customElements.define(e.component, n);
};
export {
  KI as Accordion,
  XI as AccordionActions,
  ZI as AccordionDetails,
  ek as AccordionSummary,
  tk as Alert,
  rk as AlertTitle,
  ak as AppBar,
  lk as Autocomplete,
  eC as Avatar,
  ck as AvatarGroup,
  gu as Backdrop,
  dk as Badge,
  fk as BottomNavigation,
  mk as BottomNavigationAction,
  tL as Box,
  bk as Breadcrumbs,
  gk as Button,
  pt as ButtonBase,
  hk as ButtonGroup,
  Ru as ButtonGroupButtonContext,
  $u as ButtonGroupContext,
  yk as Card,
  Ck as CardActionArea,
  Tk as CardActions,
  $k as CardContent,
  Sk as CardHeader,
  wk as CardMedia,
  Ek as Checkbox,
  by as Chip,
  Nk as CircularProgress,
  Qr as ClickAwayListener,
  $a as Collapse,
  TB as Column,
  Ik as Container,
  Vu as CssBaseline,
  Dk as Dialog,
  Fk as DialogActions,
  _k as DialogContent,
  Vk as DialogContentText,
  Uk as DialogTitle,
  Wk as Divider,
  p0 as Drawer,
  kB as Experimental_CssVarsProvider,
  nd as Fab,
  mu as Fade,
  rd as FilledInput,
  w0 as FormControl,
  Kk as FormControlLabel,
  z0 as FormGroup,
  G0 as FormHelperText,
  eO as FormLabel,
  Z0 as FormLabelRoot,
  Ba as GlobalStyles,
  Xk as Grid,
  rs as Grow,
  kO as Hidden,
  tM as Icon,
  Qo as IconButton,
  nM as ImageList,
  rM as ImageListItem,
  aM as ImageListItemBar,
  Ua as Input,
  iM as InputAdornment,
  Rs as InputBase,
  v$ as InputLabel,
  N$ as LinearProgress,
  uM as Link,
  H$ as List,
  mM as ListItem,
  gM as ListItemAvatar,
  pM as ListItemButton,
  hM as ListItemIcon,
  s1 as ListItemSecondaryAction,
  vM as ListItemText,
  iy as ListSubheader,
  G1 as Menu,
  eS as MenuItem,
  E1 as MenuList,
  TM as MobileStepper,
  Aa as Modal,
  Lg as ModalManager,
  OM as NativeSelect,
  Jr as NoSsr,
  Hd as OutlinedInput,
  SM as Pagination,
  AS as PaginationItem,
  Gt as Paper,
  D1 as Popover,
  Bd as PopoverPaper,
  L1 as PopoverRoot,
  Cs as Popper,
  tr as Portal,
  RM as Radio,
  wM as RadioGroup,
  EM as Rating,
  $B as Row,
  NM as ScopedCssBaseline,
  rp as Select,
  kM as Skeleton,
  r0 as Slide,
  MM as Slider,
  ew as SliderMark,
  tw as SliderMarkLabel,
  XR as SliderRail,
  YR as SliderRoot,
  ZR as SliderThumb,
  QR as SliderTrack,
  JR as SliderValueLabel,
  DM as Snackbar,
  dw as SnackbarContent,
  AM as SpeedDial,
  FM as SpeedDialAction,
  jM as SpeedDialIcon,
  E0 as Stack,
  UM as Step,
  WM as StepButton,
  IE as StepConnector,
  GM as StepContent,
  Cr as StepContext,
  uE as StepIcon,
  yE as StepLabel,
  YM as Stepper,
  Mn as StepperContext,
  RB as StyledEngineProvider,
  ta as SvgIcon,
  XM as SwipeableDrawer,
  QM as Switch,
  ff as THEME_ID,
  ZM as Tab,
  BN as TabScrollButton,
  eB as Table,
  oB as TableBody,
  fa as TableCell,
  rB as TableContainer,
  aB as TableFooter,
  lB as TableHead,
  uB as TablePagination,
  dB as TableRow,
  pB as TableSortLabel,
  fB as Tabs,
  bB as TextField,
  Qc as TextareaAutosize,
  Of as ThemeProvider,
  gB as ToggleButton,
  hB as ToggleButtonGroup,
  XP as Toolbar,
  Aw as Tooltip,
  xt as Typography,
  Qk as Unstable_Grid2,
  Zr as Unstable_TrapFocus,
  yw as Zoom,
  YI as accordionActionsClasses,
  Rr as accordionClasses,
  QI as accordionDetailsClasses,
  mn as accordionSummaryClasses,
  MB as adaptV4Theme,
  Fi as alertClasses,
  nk as alertTitleClasses,
  Wn as alpha,
  sk as appBarClasses,
  ze as autocompleteClasses,
  Gy as avatarClasses,
  nC as avatarGroupClasses,
  uk as backdropClasses,
  Ro as badgeClasses,
  yu as bottomNavigationActionClasses,
  pk as bottomNavigationClasses,
  oL as boxClasses,
  jC as breadcrumbsClasses,
  lg as buttonBaseClasses,
  Br as buttonClasses,
  vt as buttonGroupClasses,
  k as capitalize,
  As as cardActionAreaClasses,
  xk as cardActionsClasses,
  vk as cardClasses,
  Ok as cardContentClasses,
  Gi as cardHeaderClasses,
  Rk as cardMediaClasses,
  Fs as checkboxClasses,
  He as chipClasses,
  Pk as circularProgressClasses,
  qI as collapseClasses,
  VI as colors,
  Mk as containerClasses,
  Zs as createChainedFunction,
  dv as createFilterOptions,
  wB as createMuiTheme,
  BB as createStyles,
  Je as createSvgIcon,
  bf as createTheme,
  sn as css,
  Bk as darkScrollbar,
  ii as darken,
  fr as debounce,
  LB as decomposeColor,
  UI as deprecatedPropType,
  Ak as dialogActionsClasses,
  js as dialogClasses,
  jk as dialogContentClasses,
  zk as dialogContentTextClasses,
  FT as dialogTitleClasses,
  Zi as dividerClasses,
  Hk as drawerClasses,
  df as duration,
  EB as easing,
  DB as emphasize,
  P as experimentalStyled,
  AB as experimental_extendTheme,
  FB as experimental_sx,
  el as fabClasses,
  Lt as filledInputClasses,
  qk as formControlClasses,
  Gn as formControlLabelClasses,
  Yk as formGroupClasses,
  tl as formHelperTextClasses,
  Qn as formLabelClasses,
  ee as generateUtilityClass,
  ne as generateUtilityClasses,
  zb as getAccordionActionsUtilityClass,
  qb as getAccordionDetailsUtilityClass,
  pg as getAccordionSummaryUtilityClass,
  Db as getAccordionUtilityClass,
  jv as getAlertTitleUtilityClass,
  bv as getAlertUtilityClass,
  Wv as getAppBarUtilityClass,
  Ey as getAutocompleteUtilityClass,
  tC as getAvatarGroupUtilityClass,
  Hy as getAvatarUtilityClass,
  cC as getBackdropUtilityClass,
  bC as getBadgeUtilityClass,
  wC as getBottomNavigationActionUtilityClass,
  TC as getBottomNavigationUtilityClass,
  AC as getBreadcrumbsUtilityClass,
  ag as getButtonBaseUtilityClass,
  JC as getButtonGroupUtilityClass,
  qC as getButtonUtilityClass,
  ux as getCardActionAreaUtilityClass,
  gx as getCardActionsUtilityClass,
  xx as getCardContentUtilityClass,
  Rx as getCardHeaderUtilityClass,
  Bx as getCardMediaUtilityClass,
  sx as getCardUtilityClass,
  Yx as getCheckboxUtilityClass,
  cy as getChipUtilityClass,
  nT as getCircularProgressUtilityClass,
  hb as getCollapseUtilityClass,
  kk as getContainerUtilityClass,
  jB as getContrastRatio,
  PT as getDialogActionsUtilityClass,
  VT as getDialogContentTextUtilityClass,
  BT as getDialogContentUtilityClass,
  DT as getDialogTitleUtilityClass,
  xT as getDialogUtilityClass,
  XT as getDividerUtilityClass,
  s0 as getDrawerUtilityClass,
  f0 as getFabUtilityClass,
  Ry as getFilledInputUtilityClass,
  N0 as getFormControlLabelUtilityClasses,
  T0 as getFormControlUtilityClasses,
  D0 as getFormGroupUtilityClass,
  V0 as getFormHelperTextUtilityClasses,
  K0 as getFormLabelUtilityClasses,
  Zk as getGrid2UtilityClass,
  tO as getGridUtilityClass,
  hv as getIconButtonUtilityClass,
  MO as getIconUtilityClass,
  KO as getImageListItemBarUtilityClass,
  UO as getImageListItemUtilityClass,
  FO as getImageListUtilityClass,
  _B as getInitColorSchemeScript,
  i$ as getInputAdornmentUtilityClass,
  hy as getInputBaseUtilityClass,
  f$ as getInputLabelUtilityClasses,
  Ty as getInputUtilityClass,
  y$ as getLinearProgressUtilityClass,
  I$ as getLinkUtilityClass,
  p1 as getListItemAvatarUtilityClass,
  K$ as getListItemButtonUtilityClass,
  h1 as getListItemIconUtilityClass,
  e1 as getListItemSecondaryActionClassesUtilityClass,
  T1 as getListItemTextUtilityClass,
  q$ as getListItemUtilityClass,
  oy as getListSubheaderUtilityClass,
  _$ as getListUtilityClass,
  zB as getLuminance,
  K1 as getMenuItemUtilityClass,
  A1 as getMenuUtilityClass,
  tS as getMobileStepperUtilityClass,
  bT as getModalUtilityClass,
  jd as getNativeSelectUtilityClasses,
  gl as getOffsetLeft,
  bl as getOffsetTop,
  $y as getOutlinedInputUtilityClass,
  ai as getOverlayAlpha,
  NS as getPaginationItemUtilityClass,
  RS as getPaginationUtilityClass,
  $b as getPaperUtilityClass,
  P1 as getPopoverUtilityClass,
  YS as getRadioUtilityClass,
  rR as getRatingUtilityClass,
  gR as getScopedCssBaselineUtilityClass,
  xR as getSelectUtilityClasses,
  DR as getSkeletonUtilityClass,
  HR as getSliderUtilityClass,
  rw as getSnackbarContentUtilityClass,
  pw as getSnackbarUtilityClass,
  Fw as getSpeedDialActionUtilityClass,
  Gw as getSpeedDialIconUtilityClass,
  Cw as getSpeedDialUtilityClass,
  CE as getStepButtonUtilityClass,
  SE as getStepConnectorUtilityClass,
  kE as getStepContentUtilityClass,
  sE as getStepIconUtilityClass,
  dE as getStepLabelUtilityClass,
  Zw as getStepUtilityClass,
  FE as getStepperUtilityClass,
  tb as getSvgIconUtilityClass,
  ZE as getSwitchUtilityClass,
  EN as getTabScrollButtonUtilityClass,
  aP as getTabUtilityClass,
  gP as getTableBodyUtilityClass,
  TP as getTableCellUtilityClass,
  EP as getTableContainerUtilityClass,
  MP as getTableFooterUtilityClass,
  jP as getTableHeadUtilityClass,
  JP as getTablePaginationUtilityClass,
  pN as getTableRowUtilityClass,
  vN as getTableSortLabelUtilityClass,
  dP as getTableUtilityClass,
  LN as getTabsUtilityClass,
  WN as getTextFieldUtilityClass,
  nI as getToggleButtonGroupUtilityClass,
  XN as getToggleButtonUtilityClass,
  HP as getToolbarUtilityClass,
  Pw as getTooltipUtilityClass,
  JI as getTouchRippleUtilityClass,
  kv as getTypographyUtilityClass,
  Jk as grid2Classes,
  rr as gridClasses,
  VB as hexToRgb,
  UB as hslToRgb,
  yv as iconButtonClasses,
  eM as iconClasses,
  oM as imageListClasses,
  sM as imageListItemBarClasses,
  rl as imageListItemClasses,
  yB as initRTB2App,
  sl as inputAdornmentClasses,
  Bt as inputBaseClasses,
  No as inputClasses,
  lM as inputLabelClasses,
  Co as isMuiElement,
  go as keyframes,
  li as lighten,
  cM as linearProgressClasses,
  M$ as linkClasses,
  dM as listClasses,
  bM as listItemAvatarClasses,
  pn as listItemButtonClasses,
  dn as listItemClasses,
  fl as listItemIconClasses,
  fM as listItemSecondaryActionClasses,
  as as listItemTextClasses,
  ik as listSubheaderClasses,
  WB as makeStyles,
  CM as menuClasses,
  Fn as menuItemClasses,
  xM as mobileStepperClasses,
  Lk as modalClasses,
  qa as nativeSelectClasses,
  ao as outlinedInputClasses,
  Xe as ownerDocument,
  Rt as ownerWindow,
  $M as paginationClasses,
  jt as paginationItemClasses,
  GI as paperClasses,
  yM as popoverClasses,
  PB as private_createMixins,
  NB as private_createTypography,
  HB as private_excludeVariablesFromRoot,
  xl as radioClasses,
  jn as ratingClasses,
  qB as recomposeColor,
  im as requirePropFactory,
  GB as responsiveFontSizes,
  KB as rgbToHex,
  PM as scopedCssBaselineClasses,
  _n as selectClasses,
  Kr as setRef,
  YB as shouldSkipGeneratingVar,
  IM as skeletonClasses,
  Zt as sliderClasses,
  LM as snackbarClasses,
  BM as snackbarContentClasses,
  _w as speedDialActionClasses,
  Dr as speedDialClasses,
  Wo as speedDialIconClasses,
  Gk as stackClasses,
  Bl as stepButtonClasses,
  VM as stepClasses,
  HM as stepConnectorClasses,
  qM as stepContentClasses,
  Us as stepIconClasses,
  Fo as stepLabelClasses,
  KM as stepperClasses,
  P as styled,
  WI as svgIconClasses,
  Ot as switchClasses,
  Ho as tabClasses,
  NN as tabScrollButtonClasses,
  tB as tableBodyClasses,
  $P as tableCellClasses,
  JM as tableClasses,
  nB as tableContainerClasses,
  sB as tableFooterClasses,
  iB as tableHeadClasses,
  Jn as tablePaginationClasses,
  zl as tableRowClasses,
  Ks as tableSortLabelClasses,
  Ys as tabsClasses,
  mB as textFieldClasses,
  bn as toggleButtonClasses,
  ot as toggleButtonGroupClasses,
  cB as toolbarClasses,
  Ao as tooltipClasses,
  Vt as touchRippleClasses,
  ok as typographyClasses,
  HI as unstable_ClassNameGenerator,
  te as unstable_composeClasses,
  XB as unstable_createMuiStrictModeTheme,
  xf as unstable_getUnit,
  Tf as unstable_toUnitless,
  bt as unstable_useEnhancedEffect,
  mo as unstable_useId,
  ga as unsupportedProp,
  mv as useAutocomplete,
  QB as useColorScheme,
  Dt as useControlled,
  nt as useEventCallback,
  Ve as useForkRef,
  oo as useFormControl,
  br as useIsFocusVisible,
  om as useMediaQuery,
  PS as usePagination,
  KS as useRadioGroup,
  vB as useScrollTrigger,
  zM as useStepContext,
  _M as useStepperContext,
  rt as useTheme,
  oe as useThemeProps,
  ZB as withStyles,
  JB as withTheme
};
